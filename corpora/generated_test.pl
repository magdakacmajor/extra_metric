@Test { Destination destination = new Destination ( ) { } ; » will Throw « ( » Destination Resolution Exception « . class ) . given ( this . » jms Template « ) . send ( eq ( destination ) , any ( ) ) ; » assert That Exception Of Type « ( org . springframework . messaging . core . » Destination Resolution Exception « . class ) . » is Thrown By « ( ( ) -> this . » messaging Template « . send ( destination , » create Text Message « ( ) ) ) ; }
@Test { int status = 999 ; given ( » mock Response « . » get Raw Status Code « ( ) ) . » will Return « ( status ) ; » assert That « ( wrapper . » status Code « ( ) ) . » is Same As « ( status ) ; }
@Test { » test Resolve Argument « ( new » Simple Bean « ( " foo " ) , » param Valid Request Part « ) ; }
@Test { » assert That « ( » get Bean Factory « ( ) . » contains Bean « ( " lifecycle " ) ) . » is False « ( ) ; » assert That « ( context . » get Bean « ( " » lifecycle Bean « " ) ) . » is Not Null « ( ) ; }
@Test { » Text Message « message = new » Text Message « ( " [ \" x \" ] " ) ; this . session . » handle Message « ( message , this . » web Socket Session « ) ; verify ( this . » web Socket Handler « ) . » handle Message « ( this . session , new » Text Message « ( " x " ) ) ; » verify No More Interactions « ( this . » web Socket Handler « ) ; }
@Test { String expected = " / foo . css " ; String actual = this . chain . » resolve Url Path « ( expected , this . locations ) . block ( TIMEOUT ) ; » assert That « ( actual ) . » is Equal To « ( expected ) ; }
@Test { » assert That « ( new » My Binary Encoder « ( ) . encode ( » my Type « ) ) . » is Equal To « ( » CONVERTED _ BYTES « ) ; }
@Test { » Servlet Context « » servlet Context « = null ; » Servlet Context Aware Processor « processor = new » Servlet Context Aware Processor « ( » servlet Context « ) ; » Servlet Config Aware Bean « bean = new » Servlet Config Aware Bean « ( ) ; » assert That « ( bean . » get Servlet Config « ( ) ) . » is Null « ( ) ; processor . » post Process Before Initialization « ( bean , " » test Bean « " ) ; » assert That « ( bean . » get Servlet Config « ( ) ) . » is Null « ( ) ; }
@Test { String expected = " foo " ; request . » add Parameter « ( " name " , expected ) ; » Method Parameter « param = this . » test Method « . annot ( » request Param « ( ) . » not Required « ( " bar " ) ) . arg ( String . class ) ; Object result = resolver . » resolve Argument « ( param , null , » web Request « , null ) ; boolean condition = result instanceof String ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Equal To « ( expected ) ; }
@Test { » Annotation Attributes « < ? > annotation = » Merged Annotations « . from ( » Annotation Attributes Test Case « . class ) . stream ( ) . map ( » Annotation Attributes « . class ) ; » assert That « ( attributes ) . » is Not Null « ( ) ; » assert That « ( annotation . value ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " » test 1 « " ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " » test 1 « " ) ; }
@Test { Method rset = » Result Set « . class . » get Declared Method « ( " » get Long « " , int . class ) ; Method rowset = » Result Set Wrapping Sql Row Set « . class . » get Declared Method « ( " » get Long « " , int . class ) ; » do Test « ( rset , rowset , 1 , 1L ) ; }
@Test { » assert That « ( this . handler . » is Reactive Type « ( Mono . class ) ) . » is True « ( ) ; » assert That « ( this . handler . » is Reactive Type « ( Single . class ) ) . » is True « ( ) ; » assert That « ( this . » type Handler « . » is Reactive Field « ( » Request Fields « . class ) ) . » is False « ( ) ; }
@Test { Flux < » Char Sequence « > input = Flux . just ( this . foo , this . bar ) ; » test Encode « ( input , » Char Sequence « . class , step -> step . » consume Next With « ( » expect String « ( this . foo ) ) . » consume Next With « ( » expect String « ( this . bar ) ) . » verify Complete « ( ) ) ; }
@Test { String » response Headers « = " test / plain " ; response . » add Header « ( » Http Headers « . » SET _ COOKIE « , " https : » // example . com / hotels / « " ) ; » assert That « ( response . » get Header « ( " Content - Length " ) ) . » is Equal To « ( " https : » // example . com / hotels / 21 « " ) ; » assert That « ( response . » get Header « ( " Location " ) ) . » is Equal To « ( " https : » // example . com / hotels / 21 « " ) ; }
@Test { » assert Not Null « ( wrapper . » get Property Value « ( " » multi Array « [ 0 ] [ 0 ] " ) ) ; » assert That « ( bean . » get Multi Array « ( ) [ 0 ] . length ) . » is Equal To « ( 1 ) ; » assert That « ( bean . » get Multi Array « ( ) [ 0 ] [ 0 ] ) . » is Instance Of « ( Bean . class ) ; }
@Test { » Method Invoker « » method Invoker « = new » Method Invoker « ( ) ; » method Invoker « . » set Target Object « ( new Greeter ( ) ) ; » method Invoker « . » set Target Method « ( " greet " ) ; » method Invoker « . » set Arguments « ( new Salesman ( ) ) ; » method Invoker « . prepare ( ) ; String greeting = ( String ) » method Invoker « . invoke ( ) ; » assert That « ( greeting ) . » is Equal To « ( " regular : whassup dude ? " ) ; }
@Test { » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( " org / springframework / context / annotation / » scoped Proxy Default Tests « . xml " ) ; context . » get Bean Factory « ( ) . » register Scope « ( " » my Scope « " , new » Simple Map Scope « ( ) ) ; » Scoped Proxy Test Bean « bean = ( » Scoped Proxy Test Bean « ) context . » get Bean « ( " » scoped Proxy Test Bean « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( bean ) ) . » is False « ( ) ; context . close ( ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . » get Environment « ( ) . » set Default Profiles « ( » TEST _ DEFAULT _ PROFILE _ NAME « ) ; ctx . register ( » Default Profile Annotated Component « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( » Default Profile Annotated Component « . » BEAN _ NAME « ) ) . » is False « ( ) ; }
@Test { » formatting Service « . » add Printer « ( new » Number Style Formatter « ( " # , # » 00 . 0 « # " ) ) ; » assert That « ( » formatting Service « . convert ( 123 , String . class ) ) . » is Equal To « ( " 123.0 " ) ; » assert That « ( » formatting Service « . convert ( " 123.0 " , Integer . class ) ) . » is Equal To « ( 123 ) ; }
@Test { » test Bean « . » do It « ( ) ; » assert That « ( » this As Class And Target As Class Counter « . » get Count « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » assert That « ( » Jmx Utils « . » is M Bean « ( » Jmx Class « . class ) ) . as ( " Simple » M Bean « ( through inheritance ) not detected correctly " ) . » is True « ( ) ; » assert That « ( » Jmx Utils « . » is M Bean « ( » Specialized Jmx Interface « . class ) ) . » is True « ( ) ; » assert That « ( » Jmx Utils « . » is M Bean « ( » Jmx Interface « . class ) ) . » is False « ( ) ; }
@Test { » do Test Send Destination « ( false , false , false , true ) ; }
@Test { » Mock Servlet Context « » sc 1 « = new » Mock Servlet Context « ( " " ) ; » Servlet Context Listener « listener = new » Context Loader Listener « ( ) ; » Servlet Context Event « event = new » Servlet Context Event « ( sc ) ; » assert That Exception Of Type « ( » Bean Definition Store Exception « . class ) . » is Thrown By « ( ( ) -> listener . » context Initialized « ( event ) ) . » with Cause Instance Of « ( » IO Exception « . class ) . satisfies ( ex -> » assert That « ( ex . » get Cause « ( ) ) . » has Message Containing « ( " / WEB - INF / » application Context « . xml " ) ) ; }
@Test { Comparator < Object > » custom Comparator « = this . comparator . » with Source Provider « ( new » Test Source Provider « ( 5L , new Object [ ] { new Object ( ) , new Object ( ) } ) ) ; » assert That « ( » custom Comparator « . compare ( new » Stub Ordered « ( 10 ) , 5L ) ) . » is Equal To « ( - 1 ) ; }
@Test { this . composite . » add Resolver « ( new » Stub Argument Resolver « ( 1 ) ) ; this . composite . » add Resolver « ( new » Stub Argument Resolver « ( " » value 1 « " ) ) ; Object value = » get Invocable « ( Integer . class , String . class ) . » invoke For Request « ( request , null , 2 , " » value 2 « " ) ; » assert That « ( value ) . » is Equal To « ( " 2 - » value 2 « " ) ; }
@Test { » Class Metadata « metadata = » get Class Metadata For « ( » L 0 _ b « . class ) ; String [ ] » nested Classes « = metadata . » get Member Class Names « ( ) ; » assert That « ( » nested Classes « ) . » is Equal To « ( new String [ ] { » L 0 _ b « . » L 1 « . class . » get Name « ( ) } ) ; }
@Test { » Jndi Locator Delegate « » jndi Locator « = new » Jndi Locator Delegate « ( ) { @ Override public Object lookup ( String » jndi Name « ) throws » Naming Exception « { » assert That « ( » jndi Name « ) . » is Equal To « ( " my : key " ) ; return " my : value " ; } } ; » jndi Locator « . » set Resource Ref « ( false ) ; » Jndi Property Source « ps = new » Jndi Property Source « ( " » jndi Properties « " , » jndi Locator « ) ; » assert That « ( ps . » get Property « ( " my : key " ) ) . » is Equal To « ( " my : value " ) ; }
@Test { » assert Get All Merged Annotations Behavior « ( » get Bridge Method « ( ) ) ; }
@Test { » Root Bean Definition « » bean Definition « = new » Root Bean Definition « ( » Extended Configuration With Attribute Override For Exclude Filter « . class ) ; » assert Support For Composed Annotation With Exclude « ( » bean Definition « ) ; }
@Test { evaluate ( " » test 'abc' . get [ « ( ) . ? [ # this matches '. * o . * ' ] " , " [ monday ] " , » Array List « . class ) ; evaluate ( " » test Map . key Set « ( ) . ? [ # this matches '. * r . * ' ] » . contains « ( » ' saturday « ' ) " , " true " , Boolean . class ) ; evaluate ( " » test Map . key Set « ( ) . ? [ # this matches '. * r . * ' ] » . size « ( ) " , " 3 " , Integer . class ) ; }
@Test { new » Default Namespace Handler Resolver « ( null , " 738 trbc » bobabloobop 871 « " ) ; }
@Test { » assert Exception « ( » get Method « ( " » one Object « " ) , " target ( x , y ) " , » Illegal State Exception « . class , " Failed to bind all argument names : 1 argument ( s ) could not be bound " ) ; » assert Exception « ( » get Method « ( " » one Object « " ) , " this ( x && foo ( ) " , » Illegal State Exception « . class , " Failed to bind all argument names : 1 argument ( s ) could not be bound " ) ; }
@Test { String decimal = Double . » value Of « ( 3.14d ) ; » assert That « ( » Number Utils « . » convert Number To Target Class « ( decimal , » Big Integer « . class ) ) . » is Equal To « ( new » Big Integer « ( " 987459837583750387355346 " ) ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Spel Expression « expr = parser . » parse Raw « ( " 2 + 10 / 2 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 8 ) ; }
@Test { Set < » Pete Repeat « > annotations = » get Annotations « ( null , » Pete Repeat « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « , » Composed Repeatable Class « . class ) ; » assert That « ( annotations . stream ( ) . map ( » Pete Repeat « :: value ) ) . » contains Exactly « ( " A " , " B " , " C " ) ; }
@Test { String variant = " proper northern " ; String » locale String « = " » en _ GB _ « " + variant ; Locale locale = » String Utils « . » parse Locale String « ( » locale String « ) ; » assert That « ( locale . » get Variant « ( ) ) . as ( " Multi - valued variant portion of the Locale not extracted correctly . " ) . » is Equal To « ( variant ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( Comparator . class , " compare " , Object . class , Object . class ) ; » assert That « ( source . » determine Cache Name « ( method , null , " " ) ) . » is Equal To « ( " java . util . Comparator . compare ( java . lang . Object , java . lang . Object ) " ) ; }
@Test { lbf . » register Bean Definition « ( " test " , new » Root Bean Definition « ( » Non Public Test Bean « . class ) ) ; lbf . » pre Instantiate Singletons « ( ) ; » assert That « ( lbf . » get Bean « ( " » test Bean « " ) ) . » is Equal To « ( lbf ) ; }
@Test { » XML Output Factory « » output Factory « = » XML Output Factory « . » new Instance « ( ) ; » XML Stream Writer « » stream Writer « = » output Factory « . » create XML Stream Writer « ( new » String Writer « ( ) ) ; Result result = » Stax Utils « . » create Custom Stax Result « ( » stream Writer « ) ; » assert That « ( » Stax Utils « . » is Stax Result « ( result ) ) . as ( " Not a » St AX « Result " ) . » is True « ( ) ; }
@Test { » assert That « ( » get Tagged « ( » With Method « . class ) . » get Declaring Class Name « ( ) ) . » is Equal To « ( » Special Attr « . class . » get Name « ( ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » add Properties Files To Environment « ( ( » Configurable Environment « ) null , » FOO _ LOCATIONS « ) ) . » with Message Containing « ( " 'context' must not be null " ) ; }
@Test { » Class Path Scanning Candidate Component Provider « provider = new » Class Path Scanning Candidate Component Provider « ( true ) ; provider . » set Resource Loader « ( new » Default Resource Loader « ( » Candidate Components Test Class Loader « . » disable Index « ( » get Class « ( ) . » get Class Loader « ( ) ) ) ) ; » test Ant Style « ( provider , » Scanned Generic Bean Definition « . class ) ; }
@Test { editor . » set As Text « ( " 8 " ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " Invalid email address failed " ) . » is Equal To « ( SIMPLE ) ; }
@Test { » Entity Manager Factory Info « emfi = ( » Entity Manager Factory Info « ) » entity Manager Factory « ; » assert That « ( emfi . » get Native Entity Manager Factory « ( ) . » get Class « ( ) . » get Name « ( ) . » ends With « ( " » Entity Manager Factory Impl « " ) ) . » is True « ( ) ; }
@Test { » assert Bootstrapper « ( » Meta Annotated Bootstrap With Annotation Class « . class , » Foo Bootstrapper « . class ) ; }
@Test { Scope scope = mock ( Scope . class ) ; factory . » register Scope « ( » FOO _ SCOPE « , scope ) ; Map < String , Object > scopes = new » Hash Map « < > ( ) ; scopes . put ( » FOO _ SCOPE « , scope ) ; » Custom Scope Configurer « figurer = new » Custom Scope Configurer « ( ) ; figurer . » set Scopes « ( scopes ) ; figurer . » post Process Bean Factory « ( factory ) ; boolean condition = factory . » get Registered Scope « ( » FOO _ SCOPE « ) instanceof » No Op Scope « ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { Object [ ] values = » find Repeated Annotation Values « ( » Repeatable Containers « . » standard Repeatables « ( ) , » With Explicit Repeatables « . class , » Explicit Container « . class ) ; » assert That « ( values ) . » is Null « ( ) ; }
@Test { » Locale Context Holder « . » set Locale « ( Locale . FRANCE ) ; URL url = this . configurer . » resolve Template « ( » get Class « ( ) . » get Class Loader « ( ) , » TEMPLATE _ PREFIX « + " » i 18 n « . tpl " ) ; » assert That « ( url ) . » is Not Null « ( ) ; » assert That « ( url . » get Path « ( ) ) . contains ( " » i 18 n _ fr « . tpl " ) ; }
@Test { Assert . » not Empty « ( new String [ ] { } , ( ) -> " enigma " ) ; }
@Test { String » attr Name « = " PARENT " ; String » attr Value « = " VALUE " ; » Mock Mvc « » mock Mvc « = » Mock Mvc Builders « . » standalone Setup « ( new » Hello Controller « ( ) ) . » default Request « ( get ( " / " ) . » session Attr « ( » attr Name « , » attr Value « ) ) . build ( ) ; » assert That « ( » mock Mvc « . perform ( » request Builder « ) . » and Return « ( ) . » get Request « ( ) . » get Header « ( " name " ) ) . » is Equal To « ( " value " ) ; }
@Test { » Http Message Not Writable Exception « ex = new » Http Message Not Writable Exception « ( " foo " ) ; » Model And View « mav = » exception Resolver « . » resolve Exception « ( request , response , null , ex ) ; » assert That « ( mav ) . as ( " No » Model And View « returned " ) . » is Not Null « ( ) ; » assert That « ( mav . » is Empty « ( ) ) . as ( " No Empty » Model And View « returned " ) . » is True « ( ) ; » assert That « ( response . » get Status « ( ) ) . as ( " Invalid status code " ) . » is Equal To « ( 500 ) ; }
@Test { » Data Buffer « buffer = new » Metadata Encoder « ( » Mime Type Utils « . » TEXT _ PLAIN « , this . strategies ) . metadata ( " » to A « " ) . encode ( ) . block ( ) ; » assert That « ( » dump String « ( buffer ) ) . » is Equal To « ( " » to A « " ) ; }
@Test { this . emitter . send ( event ( ) . data ( " foo " ) ) ; this . handler . » assert Sent Object Count « ( 3 ) ; this . handler . » assert Object « ( 0 , " data : " , » TEXT _ PLAIN _ UTF 8 « ) ; this . handler . » assert Object « ( 1 , " foo " ) ; this . handler . » assert Object « ( 2 , " \n \n " , » TEXT _ PLAIN _ UTF 8 « ) ; }
@Test { » Packages Annotation Filter « filter = new » Packages Annotation Filter « ( " / test " ) ; » assert That « ( filter . matches ( " org . springframework . sterotype . Component " ) ) . » is True « ( ) ; }
@Test { » Mock Http Servlet Request « » servlet Request « = new » Mock Http Servlet Request « ( " GET " , " / " ) ; » servlet Request « . » set Server Name « ( " example . com " ) ; » servlet Request « . » set Scheme « ( " https " ) ; » servlet Request « . » set Server Port « ( 443 ) ; » Default Server Request « request = new » Default Server Request « ( » servlet Request « , this . » message Converters « ) ; » assert That « ( request . uri ( ) ) . » is Equal To « ( URI . create ( " https : » // example . com / « " ) ) ; }
@Test { » Default Listable Bean Factory « bf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( bf ) . » load Bean Definitions « ( » INVALID _ CONTEXT « ) ; » assert That « ( factory . » get Bean « ( " » factory Bean « " ) . » is Singleton « ( ) ) . » is True « ( ) ; }
@Test { Method method = » Implements Service Impl « . class . » get Method « ( " » handle Annotation « " , String . class ) ; » assert That « ( » find Merged Annotation « ( » Transactional Class « . class , Transactional . class ) ) . » is Null « ( ) ; }
@Test { » test Bean « . » get Strings « ( ) ; » assert That « ( » counter Aspect « . » get Strings Invocations Count « ) . » is Equal To « ( 1 ) ; » assert That « ( » counter Aspect « . » get Integers Invocations Count « ) . » is Equal To « ( 0 ) ; » counter Aspect « . reset ( ) ; » test Bean « . » get Integers « ( ) ; » assert That « ( » counter Aspect « . » get Strings Invocations Count « ) . » is Equal To « ( 0 ) ; }
@Test { String » test Server « = " test . server " ; request . » add Header « ( HOST , » test Server « ) ; » assert That « ( request . » get Server Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { » assert Registered Listeners « ( » Default Listeners Test Case « . class , » as List « ( » Quux Test Execution Listener « . class ) ) ; » assert Registered Listeners « ( » Sub Default Listeners Test Case « . class , » as List « ( » Quux Test Execution Listener « . class ) ) ; » assert Registered Listeners « ( » Sub Sub Inherited Default Listeners Test Case « . class , » as List « ( » Quux Test Execution Listener « . class , » Enigma Test Execution Listener « . class ) ) ; }
@Test { » data Source « = new » Delegating Data Source With Wrapper « ( ) ; » assert That « ( » data Source « . unwrap ( » Example Wrapper « . class ) ) . » is Same As « ( » data Source « ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Constructors Resource Injection Bean « . class ) ) ; » Constructors Resource Injection Bean « bean = ( » Constructors Resource Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean 3 « ( ) ) . » is Null « ( ) ; » assert That « ( bean . » get Test Bean 4 « ( ) ) . » is Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . » simple Service « . » set Destination Resolver « ( new » Simple Cache Resolver « < Object > ( " foo " ) ) ) ; }
@Test { » increment Invocation Count « ( ) ; }
@Test { » IO Exception « exception = new » Illegal Argument Exception « ( ) ; » assert That « ( this . resolver . » resolve Method « ( exception ) . » get Name « ( ) ) . » is Equal To « ( " » handle Illegal Argument Exception « " ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " foo " , Long . class ) ) . » is Equal To « ( Optional . of ( " foo " ) ) ; }
@Test { view . » set View « ( true ) ; view . render ( » get Class « ( ) ) ; » assert That « ( view . » get View Name « ( ) ) . » is Equal To « ( » view Initialized « ) ; }
@Test { final Integer argument = 99 ; » do Test Strings « ( null , null , null , argument , ( template , sql , rch ) -> template . query ( sql , ps -> ps . » set Object « ( 1 , argument ) , rch ) ) ; }
@Test { » assert That « ( » conversion Service « . » can Convert « ( String . class , String . class ) ) . » is False « ( ) ; » conversion Service « . » add Converter Factory « ( new » String To Number Converter Factory « ( ) ) ; » assert That « ( » conversion Service « . » can Convert « ( String . class , null ) ) . » is True « ( ) ; }
@Test { » test Cacheable « ( this . cs ) ; }
@Test { String resource = " classpath : bingo ! " ; » Input Stream « » file Editor « = new » Input Stream Editor « ( ) ; editor . » set As Text « ( resource ) ; » assert That « ( editor . » get As Text « ( ) ) . » is Null « ( ) ; }
@Test { » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> » get Bean Container « ( ) . » get Bean « ( " some name " , » No Definition In Spring Context Test Bean « . class , » Native Lifecycle Options « . INSTANCE , » Ineffective Bean Instance Producer « . INSTANCE ) ) ; }
@Test { » Default Listable Bean Factory « bf = new » Default Listable Bean Factory « ( ) ; » Xml Bean Definition Reader « » xml Bean Definition Reader « = new » Xml Bean Definition Reader « ( bf ) ; » xml Bean Definition Reader « . » set Validating « ( false ) ; » xml Bean Definition Reader « . » load Bean Definitions « ( new » Class Path Resource « ( " » Nested Beans Element Attribute Recursion Tests « - lazy - context . xml " , this . » get Class « ( ) ) ) ; » assert Lazy Inits « ( bf ) ; }
@Test { » set Test Groups « ( " " ) ; » assert That Exception Of Type « ( » Test Aborted Exception « . class ) . » is Thrown By « ( ( ) -> » assume Group « ( » LONG _ RUNNING « ) ) ; }
@Test { » assert That « ( request . » is Secure « ( ) ) . » is False « ( ) ; request . » set Scheme « ( " https " ) ; request . » set Secure « ( true ) ; » assert That « ( request . » is Secure « ( ) ) . » is True « ( ) ; }
@Test { » Transactional Operator « operator = » Transactional Operator « . create ( tm , new » Default Transaction Definition « ( ) ) ; Mono . just ( 1 , 2 , 3 , 4 ) . as ( operator :: transactional ) . as ( » Step Verifier « :: create ) . » expect Next Count « ( 4 ) . » verify Complete « ( ) ; » assert That « ( tm . commit ) . » is True « ( ) ; » assert That « ( tm . rollback ) . » is False « ( ) ; }
@Test { » assert That « ( » Data Size « . parse ( " 1024 B " ) ) . » is Equal To « ( » Data Size « . » of Kilobytes « ( 1 ) ) ; }
@Test { ctx = new » Annotation Config Application Context « ( » Scheduling Enabled _ with Ambiguous Task Schedulers _ and Single Task « . class ) ; }
@Test { » assert That « ( » get Handler « ( " » / resources / « * * " ) . » get Handler « ( ) ) . » is Null « ( ) ; this . registration . » set Attribute « ( » Handler Mapping « . » PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE « , " / » test Stylesheet « . css " ) ; » assert That « ( this . registry . » get Handler Mapping « ( ) . » get Attribute « ( " » hash Code « " ) ) . » is Equal To « ( " » / resources / « * * " ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . » test Method « . arg ( Principal . class ) ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » test Method « . arg ( Optional . class , Principal . class ) ) ) . » is True « ( ) ; }
@Test { » web Request « . » set Request Parameters « ( Arrays . » as List « ( new » Name Value Pair « ( " name " , " " ) ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Parameter Map « ( ) . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( » actual Request « . » get Parameter « ( " name " ) ) . » is Equal To « ( " " ) ; }
@Test { » Type Descriptor « desc = new » Type Descriptor « ( » Type Descriptor « . » value Of « ( String . class ) , » Type Descriptor « . » value Of « ( String . class ) ) ; » Type Descriptor « desc = new » Type Descriptor « ( property ) ; » assert That « ( desc . » get Type « ( ) ) . » is Equal To « ( Integer . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is True « ( false , ( Supplier < String > ) null ) ) . » with Message « ( null ) ; }
@Test { » evaluate And Check Error « ( " null ? null : null " , » Spel Message « . » TYPE _ CONVERSION _ ERROR « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Profiles . of ( ) ) . » with Message Containing « ( " must contain text " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( environment :: » accepts Profiles « ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " java : foo " , o ) ) ; jof . » set Jndi Name « ( " java : foo " ) ; jof . » set Resource Ref « ( false ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » one Annotation « " ) , " foo ( ) " , null , " ex " , new String [ ] { " » this Join Point « " , " ex " } ) ; }
@Test { » Type Descriptor « » type Descriptor « = new » Type Descriptor « ( » Type Descriptor « . class . » get Field « ( " » array 3 « " ) ) ; » assert That « ( » type Descriptor « . » is Array « ( ) ) . » is True « ( ) ; » assert That « ( » type Descriptor « . » get Element Type Descriptor « ( ) . length ) . » is Equal To « ( 1 ) ; » assert That « ( » type Descriptor « . » get Annotation « ( » Field Array « . class ) ) . » is Equal To « ( » array Type « ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / persons / 1 " ) . header ( » IF _ MODIFIED _ SINCE « , now ) ) . » and Expect « ( status ( ) . » is Not Modified « ( ) ) . » and Expect « ( header ( ) . string ( " X - Custom - Header " , » null Value « ( ) ) ) ; }
@Test { Simple target = new Simple ( " John " , 2 ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; » assert That Exception Of Type « ( » Not Readable Property Exception « . class ) . » is Thrown By « ( ( ) -> accessor . » get Property Value « ( " foo " ) ) . satisfies ( ex -> { » assert That « ( ex . » get Bean Class « ( ) ) . » is Equal To « ( Simple . class ) ; » assert That « ( ex . » get Property Name « ( ) ) . » is Equal To « ( " foo " ) ; } ) ; }
@Test { Map < String , Object > scopes = new » Hash Map « < > ( ) ; scopes . put ( » FOO _ SCOPE « , » No Op Scope « . class . » get Name « ( ) ) ; » Custom Scope Configurer « figurer = new » Custom Scope Configurer « ( ) ; figurer . » set Scopes « ( scopes ) ; » assert That Exception Of Type « ( » Class Cast Exception « . class ) . » is Thrown By « ( ( ) -> figurer . » post Process Bean Factory « ( factory ) ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) ) ; » Headers Request Condition « condition = new » Headers Request Condition « ( " ! accept " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Not Null « ( ) ; }
@Test { » assert That « ( parse ( " form - data ; name = \" foo \" ; filename *= test . txt " ) ) . » is Equal To « ( builder ( " form - data " ) . name ( " foo " ) . filename ( " foo . txt " ) . build ( ) ) ; }
@Test { » assert That « ( this . tag . » get country « ( ) . » get Country « ( ) ) . as ( " Expected a bean is null " ) . » is Null « ( ) ; }
@Test { » assert That « ( this . missing . » get Value « ( " value " , Integer . class ) ) . » is Empty « ( ) ; }
@Test { try { load ( » Multi Cache Manager Config « . class ) ; } catch ( » Illegal State Exception « ex ) { » assert That « ( ex . » get Message « ( ) . contains ( " no unique bean of type » Cache Manager « " ) ) . » is True « ( ) ; } }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Object Factory Field Injection Bean « . class ) ) ; bf . » register Bean Definition « ( " » test Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> bf . » get Bean « ( " » annotated Bean « " ) ) . » with Root Cause Instance Of « ( » Illegal State Exception « . class ) ; }
@Test { Method method = » Web Controller « . class . » get Method « ( " » handle Mapped With Value Attribute « " ) ; » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( method ) . get ( » Request Mapping « . class ) ; » assert That « ( annotation . » get String « ( " name " ) ) . » is Equal To « ( " foo " ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " / foo " ) ; » assert That « ( annotation . » get String Array « ( " path " ) ) . » contains Exactly « ( " / foo " ) ; }
@Test { » assert That « ( » Class Utils « . » is Primitive Or Wrapper « ( boolean . class ) ) . » is True « ( ) ; }
@Test { this . » servlet Request « . » add Header « ( » Http Headers « . ORIGIN , " http : » // mydomain 3 . example « " ) ; this . » servlet Request « . » set Server Name « ( " » mydomain 2 « . example " ) ; » Origin Handshake Interceptor « interceptor = new » Origin Handshake Interceptor « ( Collections . » empty List « ( ) ) ; » assert That « ( interceptor . » before Handshake « ( request , response , » ws Handler « , attributes ) ) . » is False « ( ) ; » assert That « ( » Http Status « . FORBIDDEN . value ( ) ) . » is Equal To « ( » servlet Response « . » get Status « ( ) ) ; }
@Test { » do Test Translation Needed For These Exceptions « ( new » My Interface Stereotyped Repository Interface Impl « ( ) ) ; }
@Test { String body = " foo " ; » Method Parameter « param = this . » test Method « . » annot Not Present « ( Payload . class ) . arg ( String . class ) ; Mono < Object > mono = » resolve Value « ( param , Mono . delay ( Duration . » of Millis « ( 10 ) ) . map ( » a Long « -> » to Data Buffer « ( body ) ) , null ) ; » assert That « ( mono . block ( ) ) . » is Equal To « ( body ) ; }
@Test { this . request . » set Attribute « ( » Handler Mapping « . » PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE « , " foo . css " ) ; this . response = new » Mock Http Servlet Response « ( ) ; » resource Not Found « ( method ) ; } }
@Test { » do Test « ( new » Fixed Locale Resolver « ( ) , true ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( » Mock Server Http Request « . get ( " / " ) ) ; » Handler Path Handler « handler = new » Handler Mapping « ( ) ; pointcut . » set Content « ( " foo " ) . build ( ) ; » assert That « ( » get Content As String « ( ) ) . » is Equal To « ( " no - 11e16 » people 2 « world " ) ; }
@Test { String body = " » Foo Bar « " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( " UTF - 8 " ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( new » Media Type « ( " application " , " json " ) ) ; » assert That Exception Of Type « ( » Http Message Not Readable Exception « . class ) . » is Thrown By « ( ( ) -> this . converter . read ( » My Bean « . class , » input Message « ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Test Group « . parse ( null ) ) . » with Message Containing « ( " Unable to find test group 'missing' when parsing " + " » test Groups « value : 'performance, missing' . Available groups include : " + " [ » LONG _ RUNNING « , PERFORMANCE ] " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Model M Bean Notification Publisher « ( null , » create Object Name « ( ) , this ) ) ; }
@Test { Collection < » Cache Operation « > ops = » get Ops « ( » Annotated Class With Some Default « . class , " » method Level Cache Manager « " , 1 ) ; » Cache Operation « » cache Operation « = ops . iterator ( ) . next ( ) ; » assert Shared Config « ( » cache Operation « , " » class Key Generator « " , " custom " , " " , " » class Cache Name « " ) ; }
@Test { » Transaction Attribute Editor « pe = new » Transaction Attribute Editor « ( ) ; pe . » set As Text « ( " " ) ; » Transaction Attribute Editor « pe = ( » Transaction Attribute Editor « ) pe . » get Value « ( ) ; » assert That « ( ta == null ) . » is True « ( ) ; }
@Test { URI location = URI . create ( " https : » // example . com « " ) ; » Server Response « response = » Server Response « . » temporary Redirect « ( location ) . build ( ) ; » assert That « ( response . » status Code « ( ) ) . » is Equal To « ( » Http Status « . » TEMPORARY _ REDIRECT « ) ; » assert That « ( response . headers ( ) . » get Location « ( ) ) . » is Equal To « ( location ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get Field « ( ( Object ) null , " id " ) ) . » with Message Starting With « ( " Either » target Object « or » target Class « " ) ; }
@Test { » do Test Send Destination « ( false , true , false , false ) ; }
@Test { » Headers Request Condition « condition = new » Headers Request Condition « ( " foo != bar " ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Header « ( " foo " , " bar " ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Null « ( ) ; }
@Test { Message < String > message = » create Text Message « ( ) ; this . » messaging Template « . send ( " » my Queue « " , message ) ; verify ( this . » jms Template « ) . send ( eq ( " » my Queue « " ) , this . » message Creator « . capture ( ) ) ; » assert Text Message « ( this . » message Creator « . » get Value « ( ) ) ; }
@Test { » assert That « ( » application Context « ) . as ( " The application should be autowired . " ) . » is Not Null « ( ) ; » assert That « ( this . pet . » get Bean « ( » Test Bean « . class ) . » get Name « ( ) ) . » is Equal To « ( " John Smith " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » assert That « ( xbf . » get Bean Definition « ( " Constructor " ) && String . class ) . » is True « ( ) ; }
@Test { String » expected Query « = " param = " ; » web Request « . » set Url « ( new URL ( " https : » // example . com / example « ? " + » expected Query « ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Query String « ( ) ) . » is Equal To « ( » expected Query « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Http Request « ( » Http Method « . GET , " / path " ) . » get Path « ( ) ) ; }
@Test { » Method Parameter « parameter = on ( » Test Controller « . class ) . » resolve Return Type « ( Object . class ) ; this . handler . » handle Return Value « ( " foo " , parameter , this . message ) . block ( ) ; Flux < String > result = this . handler . » get Content As Strings « ( ) ; » Step Verifier « . create ( result ) . » expect Next « ( " foo " ) . » expect Next « ( " bar " ) . » verify Complete « ( ) ; }
@Test { » generic Test Scope « ( " » scoped Class « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is Assignable « ( String . class , Integer . class , ( ) -> " enigma " ) ) . » with Message Containing « ( " class java . lang . Integer is not assignable to class java . lang . String " ) ; }
@Test { Method method = » Implements Interface With Generic Annotated Method « . class . » get Method « ( " foo " , String . class ) ; » assert That « ( » Merged Annotations « . from ( method , » Search Strategy « . » TYPE _ HIERARCHY « ) . get ( Order . class ) . » get Distance « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { new » Json Path Request Matchers « ( " $ . » color Map « " ) . » is Not Empty « ( ) . match ( request ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » has Length « ( " \t " , " enigma " ) ) . » with Message Containing « ( " enigma " ) ; }
@Test { » assert That Exception Of Type « ( » Aop Config Exception « . class ) . » is Thrown By « ( ( ) -> » create Factory Bean Factory « ( new » Dummy Factory Bean « ( ) , » create Object Factory « ( ) ) ) ; }
@Test { » do Test Transaction Rollback Restoring Auto Commit « ( true , false , false ) ; }
@Test { » will Throw « ( new » Illegal State Exception « ( " error " ) ) . given ( this . delegate ) . » handle Transport Error « ( this . session , » web Request « ) ; this . decorator . » handle Message « ( this . session , new » No Op Message « ( ) ) ; » assert That « ( this . session . » get Status « ( ) ) . » is Equal To « ( » Close Status « . » BAD _ REQUEST « ) ; }
@Test { byte [ ] bytes = " body " . » get Bytes « ( Charset . » default Charset « ( ) ) ; request . » set Content « ( bytes ) ; » assert That « ( request . » get Input Stream « ( ) ) . » is Same As « ( request . » get Input Stream « ( ) ) ; }
@Test { » Test Bean « rod = new » Test Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( rod , " person " ) ; » Mutable Property Values « pvs = new » Mutable Property Values « ( ) ; pvs . add ( " name " , " Rod " ) ; pvs . add ( " spouse . age " , 32 ) ; » assert That Exception Of Type « ( » Null Value In Nested Path Exception « . class ) . » is Thrown By « ( ( ) -> binder . bind ( pvs ) ) ; }
@Test { » assert That « ( » entity Manager Factory Bean « . » get Jpa Dialect « ( ) ) . as ( " Dialect must have been set " ) . » is Not Null « ( ) ; » do Test Exception Translation With Dialect Found « ( » entity Manager Factory Bean « ) ; }
@Test { this . request . » get Headers « ( ) . put ( " foo " , Arrays . » as List « ( " bar " , " baz " ) ) ; » assert That Thrown By « ( ( ) -> » Mock Rest Request Matchers « . header ( " foo " , » contains String « ( " bx " ) ) . match ( this . request ) ) . » is Instance Of « ( » Assertion Error « . class ) . » has Message Containing « ( " was \" bar \" " ) ; }
@Test { » Stomp Header Accessor « headers = » Stomp Header Accessor « . create ( » Stomp Command « . SEND ) ; headers . » set Content Type « ( 12 ) ; Message < byte [ ] > frame = » Message Builder « . » create Message « ( " Message body " . » get Bytes « ( ) , headers . » get Message Headers « ( ) ) ; » assert That « ( new String ( encoder . encode ( frame ) ) ) . » is Equal To « ( " DISCONNECT \n \n » \\ \\ « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> factory . » set Bean Factory « ( new » Class Path Resource « ( ) ) ) ; }
@Test { » Counting Refreshable Target Source « ts = new » Counting Refreshable Target Source « ( ) ; ts . » set Refresh Check Delay « ( 0 ) ; Object a = ts . » get Target « ( ) ; Thread . sleep ( 1 ) ; Object b = ts . » get Target « ( ) ; » assert That « ( ts . » get Call Count « ( ) ) . as ( " Should be one call to » fresh Target « to get initial target " ) . » is Equal To « ( 1 ) ; » assert That « ( b ) . as ( " Returned objects should be the same - no refresh should occur " ) . » is Same As « ( a ) ; }
@Test { Method method = » Concrete Class With Inherited Annotation « . class . » get Method « ( " » handle From Value Attribute « " ) ; » Annotation Config « » element Type « = » get Merged Annotation Mapping « ( element , name ) ; » assert That « ( » is Annotated « ( element , name ) ) . » is True « ( ) ; » assert That « ( » is Annotated « ( element , name ) ) . » is True « ( ) ; }
@Test { » initialize Add Invoice With Meta Data « ( false ) ; » Simple Jdbc Call « adder = new » Simple Jdbc Call « ( » data Source « ) . » with Procedure Name « ( " » add _ invoice « " ) ; Number » new Id « = adder . » execute Object « ( Number . class , 1103 , 3 ) ; » assert That « ( » new Id « . » int Value « ( ) ) . » is Equal To « ( 4 ) ; » verify Add Invoice With Meta Data « ( false ) ; verify ( connection , » at Least Once « ( ) ) . close ( ) ; }
@Test { » XML Input Factory « » input Factory « = » XML Input Factory « . » new Instance « ( ) ; String expected = " < element / > " ; » XML Stream Reader « » stream Reader « = » input Factory « . » create XML Stream Reader « ( new » String Reader « ( expected ) ) ; Source source = » Stax Utils « . » create Custom Stax Source « ( » stream Reader « ) ; » assert That « ( » Stax Utils « . » is Stax Source « ( source ) ) . as ( " Not a » St AX « Source " ) . » is True « ( ) ; }
@Test { » assert That « ( this . resolver . » resolve Locale « ( Collections . » CANADA _ US « ) ) . » is Equal To « ( CANADA ) ; » assert That « ( this . resolver . » resolve Locale « ( request ( US , CANADA ) ) ) . » is Equal To « ( CANADA ) ; }
@Test { » Multi Value Map « < String , Object > map = » Merged Annotations « . from ( » Tx Config « . class ) . stream ( Transactional . class ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( ) ) ; » assert That « ( map ) . contains ( entry ( " value " , Arrays . » as List « ( " » Tx Config « " ) ) ) ; }
@Test { response . » add Header « ( " Content - Length " , 66 ) ; » assert That « ( response . » get Content Length « ( ) ) . » is Equal To « ( 66 ) ; » assert That « ( response . » get Header « ( " Content - Length " ) ) . » is Equal To « ( " 66 " ) ; }
@Test { » assert That « ( » is Empty « ( Collections . » empty List « ( ) ) ) . » is True « ( ) ; » assert That « ( » is Empty « ( new Object ( ) ) ) . » is False « ( ) ; }
@Test { Set < » Pete Repeat « > annotations = » get Annotations « ( null , » Pete Repeat « . class , » Search Strategy « . » TYPE _ HIERARCHY « , » Composed Container Class « . class ) ; » assert That « ( annotations . stream ( ) . map ( » Pete Repeat « :: value ) ) . » contains Exactly « ( " A " , " B " , " C " ) ; }
@Test { » Abstract Property Accessor « accessor = » create Accessor « ( new Simple ( " John " , 2 ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; accessor . » set Auto Grow Nested Paths « ( true ) ; accessor . » set Property Value « ( " name " , " » Some Value « " ) ; » assert That « ( target . » is Writable « ( 0 ) ) . » is False « ( ) ; }
@Test { int » delivery Mode « = 1 ; javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; » jms Message « . » set JMS Timestamp « ( priority ) ; » assert Inbound Header « ( » jms Message « , » Jms Headers « . PRIORITY , priority ) ; }
@Test { load ( » Multi Cache Manager Config « . class ) ; } catch ( » Illegal State Exception « ex ) { » assert That « ( ex . » get Message « ( ) . contains ( " no unique bean of type » Cache Manager « " ) ) . » is True « ( ) ; } }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add All « ( this . » test Server « ) ; » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> this . » test Template « . » add Handler « ( request , this . request , this . exchange ) ) ; }
@Test { » Multi Value Map « < String , Object > map = » Merged Annotations « . from ( » Sub Sub Class With Inherited Composed Annotation « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . stream ( Transactional . class ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( ) ) ; » assert That « ( map ) . contains ( entry ( " qualifier " , Arrays . » as List « ( " » transaction Manager « " ) ) ) ; }
@Test { this . composite . » add Resolver « ( new » Stub Argument Resolver « ( 1 ) ) ; this . composite . » add Resolver « ( new » Stub Argument Resolver « ( " » value 1 « " ) ) ; Object value = » get Invocable « ( Integer . class , String . class ) . » invoke For Request « ( request , null , 2 , " » value 2 « " ) ; » assert That « ( value ) . » is Equal To « ( " 2 - » value 2 « " ) ; }
@Test { » Multi Value Map « < String , Object > attributes = » get All Annotation Attributes « ( » Non Annotated Class « . class , » TX _ NAME « ) ; » assert That « ( attributes ) . as ( " Annotation attributes map for @ Transactional on » Non Annotated Class « " ) . » is Not Null « ( ) ; » assert That « ( attributes . get ( " when " ) ) . as ( " value for » Non Annotated Class « " ) . » is Equal To « ( » as List « ( When . ALWAYS ) ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( » Sample Events « . class , " » handle Raw « " , » Application Event « . class ) ; » supports Event Type « ( true , method , » Resolvable Type « . » for Class With Generics « ( » Generic Test Event « . class , String . class ) ) ; }
@Test { » Log Message « msg = » Log Message « . format ( " a % s % s % s % s " , " b " , " c " , " d " , " e " ) ; » assert That « ( msg . » to String « ( ) ) . » is Equal To « ( " a b c d e " ) ; » assert That « ( msg . » to String « ( ) ) . » is Same As « ( msg . » to String « ( ) ) ; }
@Test { Method [ ] » m 1 « = » Reflection Utils « . » get Unique « ( » Test Class « . class , " » get Name « " ) ; » assert That « ( » get Methods « ( ) . » get Methods « ( ) ) . » is Equal To « ( String . class ) ; }
@Test { List < String > values = new » Array List « < > ( 2 ) ; values . add ( " » value 1 « " ) ; values . add ( " » value 2 « " ) ; map . put ( " key " , values ) ; » assert That « ( map . get ( " key " ) ) . » is Equal To « ( " » value 1 « " ) ; » assert That « ( map . get ( " key " ) ) . » contains Exactly « ( " » value 1 « " , " » value 2 « " , " » value 3 « " ) ; }
@Test { new » Json Path Request Matchers « ( " $ . num " ) . value ( » equal To « ( " bogus " ) ) . match ( request ) ; }
@Test { ctx = new » Annotation Config Application Context « ( » Scheduling Enabled _ with Ambiguous Task Schedulers _ and Single Task _ disambiguated By Scheduler Name Attribute « . class ) ; Thread . sleep ( 100 ) ; » assert That « ( ctx . » get Bean « ( » Thread Aware Worker « . class ) . » executed By Thread « ) . » starts With « ( " » explicit Scheduler 2 « - " ) ; }
@Test { » Mock Server Web Exchange « exchange = » post Exchange « ( " text / plain " ) ; » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Bean Wiring Info « ( 123871 , true ) ) ; }
@Test { » assert That « ( » formatting Service « . convert ( " " , » Type Descriptor « . » value Of « ( String . class ) , » Type Descriptor « . » value Of « ( Integer . class ) ) ) . » is Null « ( ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . » cookie Parameter « ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » cookie String Parameter « ) ) . » is True « ( ) ; }
@Test { » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> endpoint . » setup Listener Container « ( » create Simple Jms Simple Jms Simple Jms « ( ) , endpoint ) ) ; }
@Test { List < String > values = new » Array List « < > ( 2 ) ; values . add ( " » value 1 « " ) ; values . add ( " » value 2 « " ) ; map . put ( " key " , values ) ; » assert That « ( map . » get First « ( " key " ) ) . » is Equal To « ( " » value 1 « " ) ; » assert That « ( map . » get First « ( " other " ) ) . » is Null « ( ) ; }
@Test { evaluate ( " 'joe bloggs' " , " Hello World " , String . class ) ; }
@Test { Message < byte [ ] > message = message ( null ) ; » Message Type « message = » message Socket Type « . » get Mime Types « ( ) ; » assert That « ( message ) . » is Not Null « ( ) ; » assert That « ( message . » get Frame Type « ( ) ) . » has Size « ( » Frame Type « . » METADATA _ PUSH « ) ; » assert That « ( message . » get Frame Condition « ( ) ) . » has Size « ( 1 ) ; }
@Test { » assert That Exception Of Type « ( » Pattern Not org Not Exception « . class ) . » is Thrown By « ( ( ) -> new » Type Pattern Class Filter « ( " org . springframework . beans . testfixture . beans . * " ) ) ; }
@Test { Class < » Class With Local Meta Annotation And Meta Annotated Interface « > » start Class « = » Class With Local Meta Annotation And Meta Annotated Interface « . class ; » assert At Component On Composed Annotation For Multiple Candidate Types « ( » start Class « , " » meta 2 « " , » Meta 2 « . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Rollback Rule Attribute « ( » String Buffer « . class ) ) ; }
@Test { Constants c = new Constants ( A . class ) ; Set < Object > values = c . » get Values « ( " " ) ; » assert That « ( values . size ( ) ) . as ( " Must have returned * all * public static final values " ) . » is Equal To « ( 7 ) ; }
@Test { » My Bean Impl « . initialized = false ; » Application Context « ctx = new » Annotation Config Application Context « ( » Config With Static « . class ) ; » My Bean « bean = ctx . » get Bean « ( " » my Bean « " , » My Bean « . class ) ; » assert That « ( » My Bean Impl « . initialized ) . » is False « ( ) ; bean . » do It « ( ) ; » assert That « ( » My Bean Impl « . initialized ) . » is True « ( ) ; }
@Test { Comparator < Integer > » expected Values « = new » Hash Map « < > ( ) ; » Statement Initializer « . » add Include Expression « ( 0 , null ) ; » assert That « ( » c 1 « . compare ( 1 , new » Stub Web Data Source « ( » c 1 « ) ) ) . » is Equal To « ( 1 ) ; }
@Test { » assert That « ( » test Resolve Argument « ( » param Parameter « ) ) . » is True « ( ) ; » assert That « ( » test Resolve Argument « ( new » Servlet Request Parameter « ( ) ) . » get Servlet Request « ( ) ) . » is Same As « ( » test Resolve Argument « ( ) ) ; }
@Test { List < Resource > resources = new » Array List « < > ( ) ; resources . add ( new » Class Path Resource « ( " test " ) ) ; resources . add ( new » File System Resource « ( " test " ) ) ; resources . add ( new » Test Resource « ( ) ) ; » Type Descriptor « » source Type « = » Type Descriptor « . » for Object « ( resources ) ; » assert That « ( » conversion Service « . convert ( resources , » source Type « , new » Type Descriptor « ( » get Class « ( ) . » get Field « ( " resources " ) ) ) ) . » is Same As « ( resources ) ; }
@Test { Destination » correlation Id « = " ABC - 123 " ; javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; » jms Message « . » set JMS Expiration « ( priority ) ; » assert Inbound Header « ( » jms Message « , » Jms Headers « . EXPIRATION , priority ) ; }
@Test { » Class Path Xml Application Context « ctx = new » Class Path Xml Application Context « ( ) { @ Override protected void » customize Bean Factory « ( » Default Listable Bean Factory « » bean Factory « ) { super . » customize Bean Factory « ( » bean Factory « ) ; » register Misconfigured Bean Definition « ( » bean Factory « ) ; } } ; » assert Factory Count Throughout Lifecycle « ( ctx ) ; }
@Test { » assert Merged Test Property Sources « ( » Overridden Locations Property Sources « . class , » as Array « ( " classpath : / baz . properties " ) , » as Array « ( " » k 1 a « = » v 1 a « " , " » k 1 b « : » v 1 b « " , " key = value " ) ) ; }
@Test { » assert Merged Test Property Sources « ( » Extended Property Sources « . class , » as Array « ( " classpath : / » foo 1 « . xml " , " classpath : / » foo 2 « . xml " ) , » as Array « ( " » k 1 a « = » v 1 a « " , " » k 1 b « : » v 1 b « " ) ) ; }
@Test { » Class Path Xml Application Context « ctx = new » Class Path Xml Application Context « ( » get Class « ( ) . » get Simple Name « ( ) + " - without - bpp . xml " , » get Class « ( ) ) ; » I Test Bean « tb = ( » I Test Bean « ) ctx . » get Bean « ( " » test Bean « " ) ; » assert That Exception Of Type « ( » Unknown Advice Type Exception « . class ) . » is Thrown By « ( tb :: » get Name « ) ; » assert That « ( » get Advice Impl « ( tb ) . » get Invocation Counter « ( ) ) . » is Zero « ( ) ; }
@Test { String » expected Body « = " request body " ; » web Request « . » set Http Method « ( » Http Method « . POST ) ; » web Request « . » set Request Body « ( » expected Body « ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Path Info « ( ) ) . » is Equal To « ( » expected Context « ) ; }
@Test { » set Value « ( " » places Lived « [ 0 ] . city " , " Wien " ) ; }
@Test { » initialize Add Invoice With Meta Data « ( true ) ; » Simple Jdbc Call « adder = new » Simple Jdbc Call « ( » data Source « ) . » with Function Name « ( " » add _ invoice « " ) ; adder . compile ( ) ; » verify Statement « ( adder , " { ? = call » ADD _ INVOICE « ( ? , ? ) } " ) ; }
@Test { » test Context Manager « . » before Test Class « ( » test Class « ) ; verify ( listener , only ( ) ) . » before Test Class « ( » test Context « ) ; }
@Test { » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( » Sub Sub Class With Inherited Composed Annotation « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . get ( Transactional . class ) ; » assert That « ( annotation . » get Boolean « ( " » read Only « " ) ) . » is False « ( ) ; }
@Test { » Method Parameter « param = this . » test Method « . » annot Not Present « ( » Request Param « . class ) . arg ( String . class ) ; » assert That « ( resolve ( param , » Mock Server Web Exchange « . from ( » Mock Server Http Request « . get ( " / " ) ) ) ) . » is Null « ( ) ; }
@Test { » Mapped Interceptor « » mapped Interceptor « = new » Mapped Interceptor « ( null , new String [ ] { " » / admin / « * * " } , this . interceptor ) ; » assert That « ( » mapped Interceptor « . matches ( " / foo " , » path Matcher « ) ) . » is True « ( ) ; » assert That « ( » mapped Interceptor « . matches ( " / admin / foo " , » path Matcher « ) ) . » is False « ( ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression expr = parser . » parse Expression « ( " hello $ { 'world' } " , » DEFAULT _ TEMPLATE _ PARSER _ CONTEXT « ) ; Object o = expr . » get Value « ( ) ; » assert That « ( o . » to String « ( ) ) . » is Equal To « ( " hello to you " ) ; }
@Test { » do Test « ( " » S 1 « " , » Transient Data Access Resource Exception « . class ) ; }
@Test { Number » expected Number « = 10.21f + 10.2 ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.21f + 10.2 " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Result « ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » create Default Instance « ( String . class ) ) . » with Message Containing « ( " » first Integer « " ) . » with Message Containing « ( " » second Invalid Method « " ) ; }
@Test { » test Bean Proxy « . » get Age « ( ) ; verify ( » mock Collaborator « ) . » needs Join Point « ( " » get Age « " ) ; }
@Test { » get Variables For « ( " cars " ) . add ( " year " , " 2006 " ) ; » get Variables For « ( " bikes " ) . add ( " year " , " 2005 " ) ; » Method Parameter « param = this . » test Method « . annot ( » matrix Attribute « ( ) . name ( " year " ) ) . arg ( int . class ) ; Object actual = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) . block ( Duration . ZERO ) ; » assert That « ( actual ) . » is Equal To « ( 2006 ) ; }
@Test { » Http Headers « headers = new » Http Headers « ( ) ; headers . » set Content Length « ( Collections . » singleton List « ( » base Url « + " https : » // example . com « " ) ) ; » assert That « ( headers . » contains Content Length « ( ) ) . as ( " Invalid Content - length header " ) . » is True « ( ) ; » assert That « ( headers . » get Headers « ( ) . » contains Key « ( " Content - Type " ) ) . as ( " Invalid Content - length header " ) . » is False « ( ) ; }
@Test { ( ( » Mock Http Servlet Request « ) context . » get Request « ( ) ) . » set Context Path « ( " / app - context " ) ; tag . » set Value « ( " / url / path " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " / app - context / url / path " ) ; }
@Test { » assert That Exception Of Type « ( » Missing Path Variable Exception « . class ) . » is Thrown By « ( ( ) -> resolver . » resolve Argument « ( » param Named String « , » mav Container « , » web Request « , null ) ) ; }
@Test { @ Configuration class Config { @ Lazy ( false ) @ Bean Object foo ( ) { return null ; } } » assert That « ( » bean Def « ( Config . class ) . » is Lazy Init « ( ) ) . as ( " @ Lazy ( false ) @ Bean methods declared in a non - Lazy @ Configuration should be eagerly instantiated " ) . » is False « ( ) ; }
@Test { » Property Source « < ? > ps = new » Property Sources « ( » PROPERTIES _ LOCATION « ) ; » assert That « ( ps . » get Property « ( " a . key " ) ) . » is Equal To « ( " bar " ) ; » assert That « ( ps . » get Property « ( " » key And Equal « " ) ) . » is Equal To « ( " » p 1 « " ) ; }
@Test { String » short Name « = » Class Utils « . » get Short Name As Property « ( this . » get Class « ( ) ) ; » assert That « ( » short Name « ) . as ( " Class name did not match " ) . » is Equal To « ( " » class Utils Tests « " ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; cache . put ( key , " 123 " ) ; » tx Template « . » execute Without Result « ( s -> { cache . evict ( key , " 123 " ) ; » assert That « ( target . get ( key , String . class ) ) . » is Equal To « ( " 123 " ) ; } ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; }
@Test { String text = " foo = $ { foo } , bar = $ { bar } " ; Properties props = new Properties ( ) ; props . » set Property « ( " foo " , " bar " ) ; » assert That Exception Of Type « ( » Null Value In Nested Path Exception « . class ) . » is Thrown By « ( ( ) -> this . resolver . » replace Placeholders « ( " foo = bar " ) ) . » with Message Containing « ( " In no properties : } " ) ; }
@Test { » Attribute Methods « methods = » Attribute Methods « . » for Annotation Type « ( » Multiple Attributes « . class ) ; » assert That « ( methods . » get Name « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { Map < String , String > » path Variables « = Collections . » singleton Map « ( " foo " , " bar " ) ; given ( » mock Request « . path ( ) ) . » will Return « ( » path Variables « ) ; » assert That « ( wrapper . » path Variables « ( ) ) . » is Same As « ( » path Variables « ) ; }
@Test { » assert That « ( » Object Utils « . » null Safe To String « ( ( short [ ] ) null ) ) . » is Equal To « ( " null " ) ; }
@Test { » Optional Long « » content Type « = » Optional Long « . of ( 42L ) ; given ( » mock Headers « . » content Type « ( ) ) . » will Return « ( » content Type « ) ; » assert That « ( wrapper . » content Type « ( ) ) . » is Same As « ( » content Type « ) ; }
@Test { » Method Parameter « param = this . » test Method « . » annot Present « ( » Request Param « . class ) . arg ( Optional . class ) ; » Multipart File « » Optional Content « = new » Servlet Request « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Multipart File « ) ) . as ( " Must not supported " ) . » is True « ( ) ; » assert That « ( resolver . » resolve Argument « ( » param Multipart File « , null ) ) . as ( " Invalid argument value " ) . » is False « ( ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Nullable Field Injection Bean « . class ) ) ; » Nullable Field Injection Bean « bean = ( » Nullable Field Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Null « ( ) ; }
@Test { » Standard Evaluation Context « » society Context « = new » Standard Evaluation Context « ( ) ; » society Context « . » set Root Object « ( new IEEE ( ) ) ; List < Inventor > list = ( List < Inventor > ) parser . » parse Expression « ( " » Members 2 « . ? [ nationality == 'Serbian' ] " ) . » get Value « ( » society Context « ) ; » assert That « ( tesla . » get Name « ( ) ) . » is Equal To « ( " Nikola Tesla " ) ; }
@Test { » Service Locator Factory Bean « factory = new » Service Locator Factory Bean « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> factory . » set Service Locator Exception Class « ( » get Class « ( ) ) ) ; }
@Test { » test This Or Target « ( " this " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » set Field « ( person , " » likes Pets « " , null , boolean . class ) ) ; }
@Test { » assert That Exception Of Type « ( » Annotation Configuration Exception « . class ) . » is Thrown By « ( ( ) -> » Annotation Type Mappings « . » for Annotation Type « ( » Alias For With Array Compatible Return Types « . class ) ) . » with Message « ( " @ » Alias For « declaration on attribute 'test' in annotation [ " + » Alias For With Both Value And Attribute « . class . » get Name « ( ) + " ] and attribute 'b' in annotation [ " + » Alias For With Missing Value And Target « . class . » get Name « ( ) + " ] must declare the same default value . " ) ; }
@Test { » Composite Iterator « < String > c = new » Composite Iterator « < > ( ) ; » assert That « ( c . » next Back Off « ( ) ) . » is Equal To « ( c ) ; » assert That « ( c . » next Value « ( ) ) . » is Equal To « ( " it - b " ) ; » assert That « ( it . next ( ) ) . » is Equal To « ( " java . util . » c 3 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> environment . » accepts Profiles « ( ( String ) null ) ) ; }
@Test { » register Test Bean Definition « ( bf ) ; ppc . » set System Properties Mode « ( » Property Placeholder Configurer « . » SYSTEM _ PROPERTIES _ MODE _ OVERRIDE « ) ; ppc . » post Process Bean Factory « ( bf ) ; » Test Bean « bean = ( » Test Bean « ) bf . » get Bean « ( " » test Bean « " ) ; » assert That « ( bean . » get Name « ( ) ) . » is Equal To « ( » P 1 _ SYSTEM _ PROPS _ VAL « ) ; }
@Test { » setup Info Request « ( true ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) . » add Callback « ( this . » connect Callback « ) ; » assert That « ( this . » web Socket Transport « . invoked ( ) ) . » is True « ( ) ; » Web Socket Session « session = mock ( » Web Socket Session « . class ) ; this . » web Socket Transport « . » get Connect Callback « ( ) . » on Success « ( session ) ; verify ( this . » connect Callback « ) . » on Success « ( session ) ; » verify No More Interactions « ( this . » connect Callback « ) ; }
@Test { this . » web Request « . perform ( get ( " / " ) ) . » and Expect « ( request ( ) . » attribute Exists « ( " String \" : \" Joe \" , \" » some Boolean « \" : false } " ) ) ; }
@Test { Method » get Name « = » Test Object « . class . » get Method « ( " » get Name « " ) ; String [ ] names = discoverer . » get Parameter Names « ( » get Name « ) ; » assert That « ( names ) . as ( " should find method info " ) . » is Not Null « ( ) ; » assert That « ( names . length ) . as ( " no argument names " ) . » is Equal To « ( 0 ) ; }
@Test { » standalone Setup « ( new » Multipart Controller « ( ) ) . build ( ) . perform ( multipart ( " / multipartfilelist " ) ) . » and Expect « ( status ( ) . » is Found « ( ) ) ; }
@Test { » assert That « ( » get Macro Output « ( " » FORM 3 « " ) ) . » is Equal To « ( " < input type = \" text \" id = \" name \" name = \" name \" value = \" Darren \" > " ) ; }
@Test { Number » expected Number « = - 10.21f / - 10.2f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " - 10.21f / - 10.2f " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Number « ) ; }
@Test { new » Xpath Result Matchers « ( " / foo / Bar " , null ) . » does Not Exist « ( ) . match ( » get Stub Mvc Result « ( ) ) ; }
@Test { » Test Bean « tb = new » Test Bean « ( " " ) ; Errors errors = new » Bean Property Binding Result « ( tb , " tb " ) ; Validator » test Validator « = new » Empty Validator « ( ) ; » test Validator « . validate ( tb , errors ) ; » assert That « ( errors . » has Field Errors « ( " name " ) ) . » is True « ( ) ; » assert That « ( errors . » get Field Error « ( " name " ) . » get Code « ( ) ) . » is Equal To « ( " EMPTY " ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Spel Expression « expr = parser . » parse Raw « ( " 2 + 2 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 8 ) ; }
@Test { this . tag . » set Path « ( " » my Float « " ) ; this . tag . » set Dynamic Attribute « ( null , " type " , " number " ) ; » assert That « ( this . tag . » do Start Tag « ( ) ) . » is Equal To « ( Tag . » SKIP _ BODY « ) ; String output = » get Output « ( ) ; » assert Tag Opened « ( output ) ; » assert Tag Closed « ( output ) ; » assert Contains Attribute « ( output , " type " , » get Type « ( ) ) ; » assert Value Attribute « ( output , " 12.34 " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . scan ( example . scannable . » Package Marker « . class . » get Package « ( ) . » get Name « ( ) ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » foo Service Impl « " ) ) . as ( " control scan for example . scannable package failed to register » Foo Service Impl « bean " ) . » is True « ( ) ; }
@Test { » Annotation Type Mapping « mapping = » Annotation Type Mappings « . » for Annotation Type « ( » Alias Pair « . class ) . get ( 0 ) ; Method [ ] resolved = » resolve Mirror Sets « ( mapping , » With Same Value Alias Pair « . class , » Alias Pair « . class ) ; » assert That « ( resolved [ 0 ] . » get Name « ( ) ) . » is Equal To « ( " a " ) ; » assert That « ( resolved [ 1 ] . » get Name « ( ) ) . » is Equal To « ( " a " ) ; }
@Test { » Fixed Locale Context Resolver « resolver = new » Fixed Locale Context Resolver « ( ) ; » assert That « ( resolver . » resolve Locale Context « ( exchange ( ) ) . » get Locale « ( ) ) . » is Equal To « ( US ) ; » assert That « ( resolver . » resolve Locale Context « ( exchange ( CANADA ) ) . » get Locale « ( ) ) . » is Equal To « ( US ) ; }
@Test { » Multi Value Map « < String , Object > attributes = » get All Annotation Attributes « ( » Parameters Are Nonnull By Default « . class , Nonnull . class . » get Name « ( ) ) ; » assert That « ( attributes ) . as ( " Annotation attributes map for @ Nonnull on » Non Null Api « " ) . » is Not Null « ( ) ; » assert That « ( attributes . get ( " when " ) ) . as ( " value for » Non Null Api « " ) . » is Equal To « ( » as List « ( When . ALWAYS ) ) ; }
@Test { » assert Composed Annotation Mapping « ( » Request Method « . GET ) ; }
@Test { this . handler . handle ( this . » mvc Result « ) ; » assert Value « ( " » Flash Map « " , " Type " , null ) ; }
@Test { this . emitter . send ( " foo " ) ; this . handler . » assert Sent Object Count « ( 3 ) ; this . handler . » assert Object « ( 0 , " data : " , » TEXT _ PLAIN _ UTF 8 « ) ; this . handler . » assert Object « ( 1 , " foo " ) ; this . handler . » assert Object « ( 2 , " \n \n " , » TEXT _ PLAIN _ UTF 8 « ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " / foo / bar " ) . » path Segment « ( " q " , " » / foo / bar « " ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " / foo / bar " ) ; » assert That « ( result . » get Path Segments « ( ) ) . » is Equal To « ( Arrays . » as List « ( " foo " , " bar " ) ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Single Constructor Optional Collection Bean « . class ) ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ( ) -> bf . » get Bean « ( " » annotated Bean « " ) ) ; }
@Test { Assert . » does Not Contain « ( null , " bar " , ( ) -> " enigma " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ( ) -> xbf . » get Bean « ( " » rod 8 « " , » Constructor Dependencies Bean « . class ) ) ; }
@Test { » Bean Name « Harrop = ( » Simple Bean « ) this . » bean Factory « . » get Bean « ( " » child With View Name « " ) ; » assert That « ( bean ) . » is Not Null « ( ) ; » assert That « ( bean . » get Name « ( ) ) . » is Equal To « ( " Rob Harrop " ) ; }
@Test { Cache cache = » get Cache « ( » DEFAULT _ CACHE « ) ; Object key = » create Key « ( this . » key Item « ) ; cache . put ( key , new Object ( ) ) ; » assert That Null Pointer Exception « ( ) . » is Thrown By « ( ( ) -> service . » remove All With Exception « ( false ) ) ; » assert That « ( » is Empty « ( cache ) ) . » is True « ( ) ; }
@Test { load ( context -> { } ) ; » Request Mapping Handler Mapping « » handler Mapping « = this . context . » get Bean « ( » Request Mapping Handler Mapping « . class ) ; » assert That « ( » handler Mapping « . » get Content Negotiation Manager « ( ) ) . » is Same As « ( this . context . » get Bean « ( " » mvc Content Negotiation Manager « " ) ) ; }
@Test { this . request . » add Header « ( » X _ FORWARDED _ PREFIX « , " / " ) ; this . request . » set Context Path « ( " / app " ) ; this . request . » set Request URI « ( " / app / " ) ; » Http Servlet Request « actual = » filter And Get Wrapped Request « ( ) ; » assert That « ( actual . » get Context Path « ( ) ) . » is Equal To « ( " " ) ; » assert That « ( actual . » get Request URI « ( ) ) . » is Equal To « ( " / " ) ; }
@Test { try ( » Annotation Config Application Context « » direct Registration « = new » Annotation Config Application Context « ( ) ) { » via Import « . register ( Importer . class ) ; » via Import « . refresh ( ) ; » assert That Exception Of Type « ( » No Such Bean Definition Exception « . class ) . » is Thrown By « ( ( ) -> » via Import « . » get Bean « ( Thing . class ) ) ; } }
@Test { » assert That « ( processor . » supports Parameter « ( » param Model « ) ) . » is True « ( ) ; » assert That « ( processor . » supports Parameter « ( » param Param « ) ) . » is False « ( ) ; }
@Test { » Http Headers « headers = new » Http Headers « ( ) ; headers . » set Content Type « ( » Media Type « . » APPLICATION _ JSON « ) ; » Header Assertions « assertions = » header Assertions « ( headers ) ; assertions . exists ( " Content - Type " ) ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> assertions . exists ( " Framework " ) ) . satisfies ( ex -> » assert That « ( ex . » get Cause « ( ) ) . » has Message « ( " Response header 'Framework' does not exist " ) ) ; }
@Test { » Message Mapping Message Handler « » messsage Handler « = » init Messsage Handler « ( ) ; » messsage Handler « . » handle Message « ( message ( " exception " , " abc " ) ) . block ( Duration . » of Seconds « ( 5 ) ) ; » verify Output Content « ( Collections . » singleton List « ( " rejected :: handled " ) ) ; }
@Test { » parse Check « ( " '5.0067' matches '^-?\\d+(\\.\\d{2})?$' " , " ( '5.0067' matches '^-?\\d+(\\.\\d{2})?$' ) " ) ; }
@Test { Map < String , Object > map = Collections . » singleton Map « ( " text " , null ) ; » Merged Annotation « < Component > annotation = » Merged Annotation « . of ( null , null ) ; » assert That « ( map . value ( ) ) . » is Equal To « ( " test . xml " ) ; » assert That « ( map . get ( " value " ) ) . » is Equal To « ( " test " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » App Config « . class ) ; ctx . register ( » Parameterized Factory Bean Interface Config « . class ) ; ctx . refresh ( ) ; }
@Test { this . » message Handler « . » set Heartbeat Value « ( new long [ ] { 10000 , 10000 } ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( this . » message Handler « :: start ) ; }
@Test { List < » Rollback Rule Attribute « > l = new » Linked List « < > ( ) ; l . add ( new » Rollback Rule Attribute « ( java . rmi . » Remote Exception « . class . » get Name « ( ) ) ) ; » Rule Based Transaction Attribute « rta = new » Rule Based Transaction Attribute « ( » Transaction Definition « . » PROPAGATION _ REQUIRED « , l ) ; » do Test Rule For Selective Rollback On Checked « ( rta ) ; }
@Test { load ( » Generic Event Listener « . class ) ; » Resolvable Type Event Listener « listener = this . context . » get Bean « ( » Resolvable Type Event Listener « . class ) ; this . » event Collector « . » assert No Event Received « ( listener ) ; » Generic Event Pojo « < Long > event = new » Generic Event Pojo « < > ( 123L ) ; this . context . » publish Event « ( event ) ; this . » event Collector « . » assert No Event Received « ( listener ) ; this . » event Collector « . » assert Total Events Count « ( 1 ) ; }
@Test { » Path Pattern Parser « parser = new » Path Pattern Parser « ( ) ; parser . » set Path Options « ( » Path Container « . Options . create ( ' . ' , false ) ) ; » Path Pattern « pattern = parser . parse ( " » / foo « " ) ; » assert That « ( pattern . » check Pattern String « ( ) ) . » is Pattern « ( » path Pattern « ) ; » assert That « ( » path Pattern « . » get Pattern String « ( ) ) . » is Pattern To « ( " / foo " ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) . header ( " Accept " , " text / plain " ) ) ; » Produces Request Condition « condition = new » Produces Request Condition « ( " ! text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { » Concurrent Reference Hash Map « < String , String > map = new » Concurrent Reference Hash Map « < > ( ) ; » assert That « ( map . » is Expose Segments « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » Bean Wrapper « bw = new » Bean Wrapper Impl « ( bar ) ; bw . » set Property Value « ( " » version 1 « " , " 10 " ) ; » assert That « ( bar . » get Version « ( ) ) . » is Equal To « ( new Double ( 10.0 ) ) ; }
@Test { » Generic Application Context « ctx = new » Generic Application Context « ( ) ; ctx . » register Bean Definition « ( " » tb 1 « " , » Test Bean « . class ) ; ac . » register Singleton « ( " » my Bean « " , » Test Bean « . class ) ; » Test Bean « tb = new » Test Bean « ( ) ; ctx . » register Bean Definition « ( " » test Bean « " , » bd 2 « ) ; ctx . » register Bean Definition « ( " » tb 2 « " , » Test Bean « . class ) ; » assert That « ( tb . » get Factory « ( ) ) . » is Same As « ( ctx . » get Bean « ( » Test Bean « . class ) ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> » forwarded Url Pattern « ( " / resource / " ) . match ( » forwarded Url Stub « ( " / resource / 1 " ) ) ) . » with Message « ( " '/resource/' is not an Ant - style path pattern " ) ; }
@Test { » Request Condition Holder « params = new » Request Condition Holder « ( new » Params Request Condition « ( " name " ) ) ; » Request Condition Holder « » params 2 « = new » Request Condition Holder « ( new » Params Request Condition « ( " name " ) ) ; » assert That Exception Of Type « ( » Class Cast Exception « . class ) . » is Thrown By « ( ( ) -> params . combine ( » params Msg « ) ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ NESTED « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ NEVER « ) ; }
@Test { » test Bean « . » get Strings « ( ) ; » assert That « ( » counter Aspect « . » get Strings Invocations Count « ) . » is Equal To « ( 1 ) ; » assert That « ( » counter Aspect « . » get Integers Invocations Count « ) . » is Equal To « ( 0 ) ; }
@Test { » Multipart File « file = new » Test Multipart « ( ) ; editor . » set Value « ( » expected Value « ) ; » assert That « ( editor . » get As Text « ( ) ) . » is Equal To « ( » expected Value « ) ; }
@Test { » Bean Definition « » bean Definition « = this . » bean Factory « . » get Merged Bean Definition « ( " » test Bean 1 « " ) ; » assert That « ( » bean Definition 1 « . » get Attribute « ( " » some String « " ) ) . » is Equal To « ( " » some Bean « " ) ; }
@Test { evaluate ( " 1 " , " 1 " , Integer . class ) ; }
@Test { » test Single Component « ( » Sample Smart Repo « . class , Repo . class , » Smart Repo « . class ) ; }
@Test { this . configurer . » default Supported Media Types « ( » Media Type « . » APPLICATION _ JSON « ) ; » Content Negotiation Manager « manager = this . configurer . » build Content Negotiation Manager « ( ) ; » assert That « ( » media Types « ) . » is Equal To « ( » Media Type « . » APPLICATION _ JSON « ) ; }
@Test { » do Test New Transaction Synchronization « ( » Transaction Definition « . » PROPAGATION _ NEVER « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ON _ ACTUAL _ TRANSACTION « ) ; }
@Test { » formatting Service « . » add Formatter For Field Type « ( new » Joda Date Time Formatter Factory « ( ) ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » conversion Service « . convert ( " 3 " , » Type Descriptor « . » value Of « ( String . class ) , » Type Descriptor « . » value Of « ( String . class ) ) ) ; }
@Test { » Cache Result Operation « op = » get Default Cache Operation « ( » Cache Result Operation « . class , String . class ) ; » assert Defaults « ( op ) ; » assert That « ( op . » get Exception Cache Resolver « ( ) ) . as ( " Exception caching not enabled so resolver should not be set " ) . » is Null « ( ) ; }
@Test { » Bean Definition « » bd 1 « = new » Root Bean Definition « ( » Factory Bean That Shouldnt Be Called « . class ) ; » Root Bean Definition « » bd 2 « = new » Root Bean Definition « ( » Test Bean « . class ) ; lbf . » register Bean Definition « ( " » test Bean « " , » bd 1 « ) ; lbf . » pre Instantiate Singletons « ( ) ; }
@Test { » assert That « ( this . handler . » supports Return Type « ( this . param ) ) . » is True « ( ) ; }
@Test { » Requested Content Type Resolver « resolver = new » Requested Content Type Resolver Builder « ( ) . build ( ) ; » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( » Mock Server Http Request « . get ( " / flower " ) . accept ( » Media Type « . » IMAGE _ GIF « ) ) ; List < » Media Type « > » media Types « = resolver . » resolve Media Types « ( exchange ) ; » assert That « ( » media Types « ) . » is Equal To « ( » Requested Content Type Resolver « . » IMAGE _ GIF « ) ; }
@Test { » Cache Remove Operation « operation = » create Simple Operation « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> operation . » remove All Parameters « ( 2L ) ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Bean Three Configuration « . class , » Bean Three Configuration « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 3 « " ) ) . » is False « ( ) ; }
@Test { » assert That « ( » Object Comparator « . compare ( null , » c 1 « ) ) . » is Equal To « ( - 1 ) ; }
@Test { tag . » set Value « ( " url / path " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " url / path " ) ; }
@Test { » do Test « ( " 07 " , » Data Integrity Violation Exception « . class ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " java : comp / env / foo " , o ) ) ; jof . » set Jndi Name « ( " java : comp / env / foo " ) ; jof . » set Resource Ref « ( false ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression » spel Expression « = parser . » parse Expression « ( " # » an Array « [ 0 ] eq 1 " ) ; » assert That Exception Of Type « ( » Spel Evaluation Exception « . class ) . » is Thrown By « ( » spel Expression « :: » get Value « ) ; }
@Test { » find Type Of Prototype Factory Method On Bean Instance « ( false ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get With Mapping « ( " » Jmx Test Bean « " ) ) ; }
@Test { Flux < byte [ ] > input = Flux . just ( this . » foo Bytes « , this . » bar Bytes « ) ; » test Encode All « ( input , byte [ ] . class , step -> step . » consume Next With « ( » expect Bytes « ( this . » foo Bytes « ) ) . » consume Next With « ( » expect Bytes « ( this . » bar Bytes « ) ) . » verify Complete « ( ) ) ; }
@Test { this . resolver . » set Default Mime Type « ( » Mime Type Utils « . » APPLICATION _ JSON « ) ; » Message Headers « headers = new » Message Headers « ( map ) ; » assert That « ( this . resolver . resolve ( headers ) ) . » is Equal To « ( » Mime Type Utils « . » APPLICATION _ JSON « ) ; }
@Test { » File Copy « content = new » File System Resource « ( » content Length « ) ; » File Copy Utils « . copy ( content , file ) ; » assert That « ( resource . » content Length « ( ) ) . » is Equal To « ( content . length ) ; }
@Test { » assert That « ( converter . » can Read « ( Feed . class , » Media Type « . » APPLICATION _ ATOM _ XML « ) ) . » is True « ( ) ; » assert That « ( converter . » can Read « ( Feed . class , » ATOM _ XML _ UTF 8 « ) ) . » is True « ( ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression » spel Expression « = parser . » parse Expression « ( " # » a Map . contains Key « ( » ' one « ' ) " ) ; » assert That Exception Of Type « ( » Spel Evaluation Exception « . class ) . » is Thrown By « ( » spel Expression « :: » get Value « ) ; }
@Test { » assert That « ( new » Mapping Media Type File Extension Resolver « ( » DEFAULT _ MAPPINGS « ) . » resolve File Extensions « ( » Media Type « . » TEXT _ HTML « ) ) . » is Equal To « ( » Media Type « . » APPLICATION _ JSON « ) ; }
@Test { » autowired Config Class Is Enhanced « ( » Config That Does Not Import « . class , » Config To Be Autowired « . class ) ; }
@Test { Message < String > message = » Message Builder « . » with Payload « ( " foo " ) . build ( ) ; » Method Parameter « param = this . resolvable . annot ( header ( " foo " ) ) . arg ( Optional . class , String . class ) ; Object result = » resolve Argument « ( param , message ) ; » assert That « ( result ) . » is Equal To « ( Optional . empty ( ) ) ; }
@Test { » assert Context Was Assert Stats « ( ) ; » assert Clean Child And Autowired Mapping « ( ) ; }
@Test { » I Test Bean « bean = ( » I Test Bean « ) » bean Factory « . » get Bean « ( " » auto Bean « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( bean ) ) . » is True « ( ) ; » assert That « ( instance . » get Name « ( ) ) . » is Equal To « ( " John Smith " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » Constructor Test Bean « bean = ( » Constructor Test Bean « ) xbf . » get Bean « ( " » constructor Overrides « " ) ; » assert That « ( bean . get ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( bean . get ( 0 ) ) . » is Equal To « ( " » constructor _ Test Bean « " ) ; }
@Test { » Map Persistence Exception Translator « mpet = new » Map Persistence Exception Translator « ( ) ; » Runtime Exception « in = new » Runtime Exception « ( ) ; » assert That « ( » Data Access Utils « . » translate If Necessary « ( in , mpet ) ) . » is Same As « ( in ) ; }
@Test { » Http Servlet Request « request = mock ( » Http Servlet Request « . class ) ; » Servlet Request Attributes « attrs = new » Servlet Request Attributes « ( request ) ; attrs . » set Attribute « ( KEY , » Request Attributes « . » SCOPE _ SESSION « ) ; verify ( request ) . » get Session « ( false ) ; }
@Test { » database Populator « . » add Script « ( » default Schema « ( ) ) ; » database Populator « . » add Script « ( resource ( " db - test - data - mysql - escaped - literal . sql " ) ) ; » Database Populator Utils « . execute ( » database Populator « , db ) ; » assert Test Database Created « ( " Brannen " ) ; }
@Test { context = new » Class Path Xml Application Context « ( " org / springframework / jdbc / config / jdbc - initialize - expression - config . xml " ) ; » assert Correct Setup « ( context . » get Bean « ( " » data Source « " , » Data Source « . class ) ) ; }
@Test { » test Evict Early « ( this . ccs ) ; }
@Test { » assert That « ( » Class Utils « . » get Class File Name « ( String . class ) ) . » is Equal To « ( " java . lang " ) ; » assert That « ( » Class Utils « . » get Class File Name « ( » get Class « ( ) ) ) . » is Equal To « ( " » Class Utils Tests « . class " ) ; }
@Test { Object source = rx . Single . just ( 1 ) ; Object target = » get Adapter « ( rx . Single . class ) . » to Publisher « ( source ) ; boolean condition = target instanceof Mono ; » assert That « ( condition ) . as ( " Expected Mono Publisher : " + target . » get Class « ( ) . » get Name « ( ) ) . » is True « ( ) ; » assert That « ( ( ( Mono < Integer > ) target ) . block ( Duration . » of Millis « ( 1000 ) ) ) . » is Equal To « ( Integer . » value Of « ( 1 ) ) ; }
@Test { » Persistence Annotation Bean Post Processor « pabpp = new » Persistence Annotation Bean Post Processor « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> pabpp . » post Process Properties « ( null , new » Setter With No Args « ( ) , " bean " ) ) ; }
@Test { » Conversion Service « cs = new » Default Conversion Service « ( ) ; » Object To String Http Message Converter « converter = new » Object To String Http Message Converter « ( cs , » Standard Charsets « . » UTF _ 16 « ) ; converter . write ( ( byte ) 31 , null , this . response ) ; » assert That « ( this . » servlet Response « . » get Character Encoding « ( ) ) . » is Equal To « ( " UTF - 16 " ) ; }
@Test { » Default Listable Bean Factory « » bean Factory « = » create Factory « ( " » simple Constructor Namespace Handler Tests « . xml " ) ; String name = " name - value " ; » Test Bean « » name Value « = » bean Factory « . » get Bean « ( name , » Test Bean « . class ) ; » assert That « ( » name Value « . » get Name « ( ) ) . » is Equal To « ( name ) ; » assert That « ( » name Value « . » get Age « ( ) ) . » is Equal To « ( 10 ) ; }
@Test { » path Pattern « = » check Structure « ( " { » spring . html « " ) ; » Path Pattern « » path Pattern « = » check Structure « ( " / foo / { bar } " ) ; » assert That « ( » path Pattern « . » get Head Section « ( ) . » get Class « ( ) . » get Name « ( ) ) . » is Equal To « ( » Capture Variable Path Element « . class . » get Name « ( ) ) ; » check Structure « ( " / { foo } " ) ; » check Structure « ( " / { f } / " ) ; » check Structure « ( " / { foo } / { bar } / { wibble } " ) ; » check Structure « ( " / { mobile - number } " ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Nullable Method Injection Bean « . class ) ) ; » Nullable Method Injection Bean « bean = ( » Nullable Method Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Null « ( ) ; }
@Test { » Class Path View Controller « ctrl = new » Url Filename View Controller « ( ) ; » assert That « ( ctrl . » get Content As String « ( ) ) . » is Equal To « ( " localhost " ) ; }
@Test { » Bean Factory « bf = » get Bean Factory « ( ) . » get Bean « ( " » proxy Class « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( bean ) ) . » is True « ( ) ; boolean condition = ( Advised ) bf . » get Bean « ( " » proxy proxy « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( proxy ) ) . » is True « ( ) ; }
@Test { » Reactive Test Transaction Manager « tm = new » Reactive Test Transaction Manager « ( false , true ) ; tm . » get Reactive Transaction « ( new » Default Transaction Definition « ( ) ) . » flat Map « ( tm :: commit ) . » subscriber Context « ( » Transaction Context Manager « . » create Transaction Context « ( ) ) . as ( » Step Verifier « :: create ) . » verify Complete « ( ) ; » assert Has Not Began « ( tm ) ; » assert Has Not Committed « ( tm ) ; » assert Has No Rollback « ( tm ) ; » assert Has Not Set Rollback Only « ( tm ) ; » assert Has Not Cleaned Up « ( tm ) ; }
@Test { » do Test Receive « ( true , false , true , false , false , true , » Jms Template « . » RECEIVE _ TIMEOUT _ INDEFINITE _ WAIT « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Default Context Cache « ( - 1 ) ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; cache . put ( key , " 123 " ) ; cache . » evict If Present « ( key ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; }
@Test { Comparator < Boolean > c = new » Boolean Comparator « ( true ) ; » assert That « ( c . compare ( true , false ) ) . » is Equal To « ( - 1 ) ; » assert That « ( c . compare ( Boolean . TRUE , Boolean . TRUE ) ) . » is Equal To « ( 0 ) ; }
@Test { Map < String , Object > map = new » Hash Map « < > ( ) ; » Message Headers « headers = new » Message Headers « ( map ) ; » assert That « ( headers . get ( " nosuchattribute " , String . class ) ) . » is Null « ( ) ; }
@Test { » Produces Request Condition « condition = new » Produces Request Condition « ( " ! text / plain " ) ; » Http Servlet Request « request = » create Request « ( " bogus " ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Null « ( ) ; }
@Test { » Web Data Binder « » binder Factory « = new » Servlet Request Condition « ( ) ; » Web Exchange « . » post Exchange « ( new » Mock Http Servlet Request « ( ) ) ; » assert That Exception Of Type « ( » Servlet Request Data Access Exception « . class ) . » is Thrown By « ( ( ) -> binder . » post Binder « ( » test Bean « , null ) ) . » with Message « ( " » test Bean « has already scoped » test Bean « " ) ; }
@Test { » Unsupported Operation Exception « exception = new » Unsupported Operation Exception « ( " Test exception on get " ) ; » will Throw « ( exception ) . given ( this . cache ) . get ( 0L ) ; this . » cache Interceptor « . » set Error Handler « ( new » Simple Cache Error Handler « ( ) ) ; » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> this . » simple Service « . get ( 0L ) ) . » with Message « ( " Test exception on get " ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Property « ( " counter " , » Sample Bean Properties « . class ) ; » assert That « ( matches . » get Possible Matches « ( ) ) . contains ( " » counter 1 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Http Range « . » create First « ( " 1 - 2 " ) ) ; }
@Test { Method source = » method From « ( » With Single Superclass « . class ) ; » assert That « ( scan ( source , » Search Strategy « . » TYPE _ HIERARCHY « ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " , " 1 : » Test Annotation 2 « " , " 1 : » Test Inherited Annotation 2 « " ) ; }
@Test { » uuid Conversion With Empty Or Blank Value « ( " " ) ; }
@Test { String » string Frame « = » I Test Bean « . class ; int » proxy 1 « = ( Date ) factory . » get Bean « ( " » proxy Factory « " ) ; » assert That « ( » proxy 1 « . length ) . » is True « ( ) ; Object » proxy 1 « = ( Date ) factory . » get Bean « ( " » proxy Factory « " ) ; » assert That « ( » proxy 1 « . length ) . » is True « ( ) ; }
@Test { super . » verify Properties Are Available In Environment « ( ) ; » assert Environment Value « ( " enigma " , " auto detected " ) ; }
@Test { new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » is Empty « ( ) . match ( » stub Mvc Result « ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » message Handler « . » resolve Mime Type « ( " bogus " , this . » type Type « , this . exchange ) ) ; }
@Test { » Has Map « » has Map « = ( » Has Map « ) this . » bean Factory « . » get Bean « ( " » class List « " ) ; » assert That « ( » has Map « . » get Class Array « ( ) . size ( ) == 2 ) . » is True « ( ) ; » assert That « ( » has Map « . » get Class Array « ( ) . get ( 0 ) . equals ( " bar " ) ) . » is True « ( ) ; » assert That « ( » has Map « . » get Class Array « ( ) [ 1 ] . equals ( Exception . class ) ) . » is True « ( ) ; }
@Test { » assert Bootstrapper « ( » Inherited Annotation Class « . class , » Bar Bootstrapper « . class ) ; }
@Test { Class < ? extends Throwable > » found Class « = » find Closest Match « ( » Lowest Depth Exception « . class , » Highest Depth Exception « . class ) ; » assert That « ( » found Class « ) . » is Equal To « ( » Highest Depth Exception « . class ) ; }
@Test { » Merged Annotation « < ? > annotation = » Type Mapped Annotation « . of ( null , null , » Class Attributes « . class , Collections . » singleton Map « ( " » class Inherited « " , new String [ ] { » Input Stream « . class . » get Name « ( ) } ) ) ; » assert That « ( annotation . » get String Array « ( " » class Array Value « " ) ) . » contains Exactly « ( » Input Stream « . class . » get Name « ( ) ) ; » assert That « ( annotation . » get Class Array « ( " » class Array Value « " ) ) . » contains Exactly « ( » Input Stream « . class ) ; }
@Test { » Annotation Descriptor « < Component > descriptor = » find Annotation Descriptor « ( » Transactional Class « . class , Component . class ) ; » assert That « ( descriptor ) . as ( " Should not find @ Component on » Transactional Class « " ) . » is Null « ( ) ; }
@Test { Integer entity = 42 ; » Response Entity « < Integer > » response Entity « = » Response Entity « . ok ( entity ) ; » assert That « ( » response Entity « ) . » is Not Null « ( ) ; » assert That « ( » response Entity « . » get Status Code « ( ) ) . » is Equal To « ( » Http Status « . OK ) ; » assert That « ( ( int ) » response Entity « . » get Body « ( ) ) . » is Equal To « ( " John " ) ; }
@Test { » Configurable Environment « env = new » Standard Environment « ( ) ; » Mutable Property Sources « sources = env . » get Property Sources « ( ) ; » assert That « ( sources . get ( » Standard Environment « . » SYSTEM _ ENVIRONMENT _ PROPERTY _ SOURCE _ NAME « ) ) . » is Instance Of « ( » System Environment Property Source « . class ) ; }
@Test { String body = " foo " ; » Entity Response « < String > result = » Entity Response « . » from Object « ( body ) . » vary By « ( " foo " ) . build ( ) ; List < String > expected = Collections . » singleton List « ( " foo " ) ; » assert That « ( result . headers ( ) . » get Vary « ( ) ) . » is Equal To « ( expected ) ; }
@Test { » Text Message « » text Message Mock « = mock ( » Text Message « . class ) ; Object unmarshalled = new Object ( ) ; String text = " foo " ; given ( » session Mock « . » create Text Message « ( » is A « ( String . class ) ) ) . » will Return « ( » text Message Mock « ) ; converter . » to Message « ( » to Be Marshalled « , » session Mock « ) ; verify ( » text Message Mock « ) . marshal ( eq ( » to Be Marshalled « ) , » is A « ( Result . class ) ) ; verify ( » text Message Mock « ) . » write Object « ( » is A « ( byte [ ] . class ) ) ; }
@Test { Collection < » Cache Operation « > ops = » get Ops « ( » Annotated Class « . class , " » interface Cache Name « " , 1 ) ; » Cache Operation « » cache Operation « = ops . iterator ( ) . next ( ) ; » assert That « ( » cache Operation « . » get Exception Cache « ( ) ) . as ( " cache names set must not be null " ) . » is Null « ( ) ; }
@Test { for ( » Stomp Command « » stomp Command « : » Stomp Command « . values ( ) ) { » assert That « ( » stomp Command « . » requires Destination « ( ) ) . » is Equal To « ( » destination Required « . contains ( » stomp Command « ) ) ; } }
@Test { » assert That « ( resolver . » supports Parameter « ( » param Map « ) ) . » is True « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Named Map « ) ) . » is False « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Map No Annot « ) ) . » is False « ( ) ; }
@Test { » assert That « ( this . converter . » can Write « ( String . class , new » Character Encoding « ( ) ) ) . » is True « ( ) ; }
@Test { this . » key Generator « . expect ( 1L ) ; Object first = this . » simple Service « . get ( 1L ) ; Object second = this . » simple Service « . get ( 1L ) ; » assert That « ( second ) . » is Same As « ( first ) ; Object key = new » Simple Key « ( 1L ) ; » assert That « ( cache . get ( key ) . get ( ) ) . » is Equal To « ( first ) ; }
@Test { » do Test Jta Transaction With Propagation Requires New « ( false , false , true , false ) ; }
@Test { » assert That « ( this . strategy . » get Default Version « ( VERSION + " / " + PATH ) ) . » is Equal To « ( ( " / path " ) ) ; }
@Test { headers . set ( » Http Headers « . » CONTENT _ LANGUAGE « , " de , » en _ CA « " ) ; » assert That « ( headers . » get Content Language « ( ) ) . as ( " Invalid Accept - Control header " ) . » is Equal To « ( Locale . GERMAN ) ; }
@Test { » Tcp Connection « < byte [ ] > » tcp Connection « = » get Tcp Connection « ( ) ; Runnable runnable = mock ( Runnable . class ) ; long delay = 1000 ; » tcp Connection « . » on Read Inactivity « ( runnable , delay ) ; » test Inactivity Task Scheduling « ( runnable , delay , 10 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Async Config « . class , » Async Bean With Interface « . class , » Async Bean User « . class ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ctx :: refresh ) . » with Cause Instance Of « ( » Bean Not Of Required Type Exception « . class ) ; ctx . close ( ) ; }
@Test { » assert That « ( » Annotation Filter « . PLAIN . matches ( Retention . class ) ) . » is True « ( ) ; }
@Test { » assert That « ( » settable Listenable Future « . » is Cancelled « ( ) ) . » is True « ( ) ; » assert That « ( » settable Listenable Future « . » is Cancelled « ( ) ) . » is False « ( ) ; » assert That « ( » settable Listenable Future « . » is Done « ( ) ) . » is True « ( ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Request Matchers « ( " $ . str " ) . » is Number « ( ) . match ( request ) ) ; }
@Test { load ( » After Completion Test Listener « . class ) ; this . » transaction Template « . execute ( status -> { » get Context « ( ) . » publish Event « ( " test " ) ; » get Event Collector « ( ) . » assert No Event Received « ( ) ; return null ; } ) ; » get Event Collector « ( ) . » assert Events « ( » Event Collector « . » AFTER _ COMPLETION « , " test " ) ; » get Event Collector « ( ) . » assert Total Events Count « ( 1 ) ; }
@Test { » Method Jms Listener Endpoint « endpoint = new » Method Jms Listener Endpoint « ( ) ; endpoint . » set Bean « ( this ) ; endpoint . » set Method « ( » get Test Method « ( ) ) ; endpoint . » set Message Handler Method Factory « ( this . factory ) ; » assert That « ( endpoint . » create Message Listener « ( this . container ) ) . » is Not Null « ( ) ; }
@Test { » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; context . » set Variable « ( " » bridge Example « " , new org . springframework . expression . spel . » spr 10210 « . D ( ) ) ; Expression expression = parser . » parse Expression « ( " T ( » java . nio . charset . Charset « ) » . for Name « ( # » ' Property Accessor « ) null " ) ; Object result = expression . » get Value « ( context ) ; » assert That « ( » result C « ) . » is Equal To « ( » Standard Charsets « . » UTF _ 8 « ) ; }
@Test { String script = » read Script « ( " test - data - with - comments . sql " ) ; » split Script Containing Comments « ( script , » DEFAULT _ COMMENT _ PREFIXES « ) ; }
@Test { » parse Check « ( " false or 4 " , " ( false or 6 ) " ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " " ) ) ; » assert That « ( this . chain . » resolve Resource « ( exchange , " invalid . css " , this . locations ) . block ( TIMEOUT ) ) . » is Null « ( ) ; }
@Test { Class < ? > source = » With Multiple Annotations « . class ; » assert That « ( scan ( source , » Search Strategy « . DIRECT ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " , " 0 : » Test Annotation 2 « " ) ; }
@Test { » wrap Concurrent Result _ Response Body « ( new » Type Level Response Body Handler « ( ) , " bar " , String . class ) ; }
@Test { » assert Resolved Profiles « ( » Locations Foo « . class , " foo " ) ; }
@Test { » Field Retrieving Factory Bean « fr = new » Field Retrieving Factory Bean « ( ) ; fr . » set Target Object « ( " » TRANSACTION _ SERIALIZABLE « " ) ; try { fr . » after Properties Set « ( ) ; } catch ( » Illegal Argument Exception « expected ) { } }
@Test { » Yaml Properties Factory Bean « factory = new » Yaml Properties Factory Bean « ( ) ; factory . » set Resources « ( new » Byte Array Resource « ( " foo : bar " . » get Bytes « ( ) ) ) ; Properties properties = factory . » get Object « ( ) ; » assert That « ( properties . » get Property « ( " foo " ) ) . » is Equal To « ( " " ) ; }
@Test { Cache cache = this . manager . » get Cache « ( " bucket " ) ; » assert That « ( manager ) . » is Not Null « ( ) ; }
@Test { this . factory . » set Pretty Printing « ( false ) ; this . factory . » after Properties Set « ( ) ; Gson gson = this . factory . » get Object « ( ) ; » String Bean « bean = new » String Bean « ( ) ; bean . » set Name « ( " Jason " ) ; String result = gson . » to Json « ( bean ) ; » assert That « ( result . contains ( " \" name \" : \" Jason \" " ) ) . » is False « ( ) ; }
@Test { » test Bean « . » do It « ( ) ; » assert That « ( » this As Interface Counter « . » get Count « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( » Config With Ignored Property Source « . class ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 2 « " ) ) . » is True « ( ) ; }
@Test { request . » set Query String « ( " forward = ! " ) ; request . » set Attribute « ( » Web Utils « . » FORWARD _ REQUEST _ URI _ ATTRIBUTE « , " / path " ) ; » assert That « ( this . helper . » get Originating Query String « ( request ) ) . » is Null « ( ) ; }
@Test { load ( context -> { } ) ; » Request Mapping Handler Mapping « » handler Mapping « = this . context . » get Bean « ( » Request Mapping Handler Mapping « . class ) ; » assert That « ( » handler Mapping « . » get Adapter Registry « ( ) ) . » is Same As « ( this . context . » get Bean « ( " » mvc Content Negotiation Manager « " ) ) ; }
@Test { Transactional tx = » find Annotation « ( » Sub Inherited Annotation Interface « . class , Transactional . class ) ; » assert That « ( tx ) . as ( " Should find @ Transactional on » Sub Inherited Annotation Interface « " ) . » is Not Null « ( ) ; }
@Test { » Byte Array Resource « resource = mock ( » Byte Array Resource « . class ) ; given ( resource . » content Length « ( ) ) . » will Return « ( - 1L ) ; » Http Range « range = » Http Range « . » create Byte Range « ( 0 , 9 ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> range . » to Resource Region « ( resource ) ) ; }
@Test { » get Variables For « ( " cars " ) . add ( " year " , " 2006 " ) ; » get Variables For « ( " bikes " ) . add ( " year " , " 2005 " ) ; » Method Parameter « param = this . » test Method « . annot ( » matrix Attribute « ( ) . name ( " year " ) ) . arg ( int . class ) ; Object actual = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) . block ( Duration . ZERO ) ; » assert That « ( actual ) . » is Equal To « ( 2006 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Config With Implicit Name « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 2 « " ) ) . » is True « ( ) ; }
@Test { this . adapter . » on Error « ( this . session , exception ) ; verify ( this . » web Socket Handler « ) . » handle Transport Error « ( this . » web Socket Session « , » Close Status « . NORMAL . » with Reason « ( " reason " ) ) ; }
@Test { this . processor . » handle Return Value « ( " expected " , this . » return Param Named Model Attr « , this . container , this . request ) ; » assert That « ( this . container . » get Model « ( ) . get ( " » model Attr Name « " ) ) . » is Equal To « ( " expected " ) ; }
@Test { String » attr Name « = " PARENT " ; String » attr Value « = " VALUE " ; » Mock Mvc « » mock Mvc « = » Mock Mvc Builders « . » standalone Setup « ( new » Hello Controller « ( ) ) . » default Request « ( get ( " / " ) . » session Attr « ( » attr Name « , » attr Value « ) ) . build ( ) ; » assert That « ( » mock Mvc « . perform ( » request Builder « ) . » and Return « ( ) . » get Request « ( ) . » get Attribute « ( » attr Name « ) ) . » is Equal To « ( » attr Value « ) ; }
@Test { » test Multi Put « ( this . ccs ) ; }
@Test { » Merged Annotation « < » Test Annotation « > annotation = » Merged Annotations « . from ( » With Test Annotation « . class ) . get ( » Test Annotation « . class ) ; » assert That « ( » Merged Annotation Predicates « . » type In « ( » Test Annotation « . class . » get Name « ( ) ) ) . accepts ( annotation ) ; }
@Test { » Jaxb 2 Marshaller « marshaller = new » Jaxb 2 Marshaller « ( ) ; marshaller . » set Context Path « ( » CONTEXT _ PATH « ) ; marshaller . » set Lazy Init « ( true ) ; marshaller . » after Properties Set « ( ) ; » String Writer « writer = new » String Writer « ( ) ; » Stream Result « result = new » Stream Result « ( writer ) ; marshaller . marshal ( flights , result ) ; » Difference Evaluator « ev = chain ( Default , » downgrade Differences To Equal « ( » XML _ STANDALONE « ) ) ; » assert That « ( » Xml Content « . from ( writer ) ) . » is Similar To « ( » EXPECTED _ STRING « , ev ) ; }
@Test { » do Test Strings « ( null ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) . header ( " Accept " , " text / plain " ) ) ; » Produces Request Condition « condition = new » Produces Request Condition « ( " text / plain " , " application / xml " ) ; » Produces Request Condition « result = condition . » get Matching Condition « ( exchange ) ; » assert Conditions « ( result , " text / plain " ) ; condition = new » Produces Request Condition « ( " application / xml " ) ; result = condition . » get Matching Condition « ( exchange ) ; » assert That « ( result ) . » is Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Spring Fail On Timeout « ( statement , 1 ) . » get User Timeout « ( ) ) . » with Message Containing « ( " security . name " ) ; }
@Test { Runnable runnable = Mockito . mock ( Runnable . class ) ; this . » simp Attributes « . » register Destruction Callback « ( " » name 1 « " , » callback 1 « ) ; this . » simp Attributes « . » session Completed « ( ) ; this . » simp Attributes « . » session Completed « ( ) ; verify ( » callback 1 « , times ( 1 ) ) . run ( ) ; verify ( » callback 2 « , times ( 1 ) ) . run ( ) ; }
@Test { » assert Filter Not Invoked « ( " / index . html . " , " * . html " ) ; }
@Test { » given ( » Message Listener Adapter « . » ORIGINAL Default Message Listener « ( mock ( » Message Listener « . class ) ) ; given ( » text Message « . » get Text « ( ) ) . » will Return « ( TEXT ) ; » Stub Message Listener Adapter « adapter = new » Stub Message Listener Adapter « ( ) ; adapter . » set Default Listener Method « ( " » walnuts Rock « " ) ; adapter . » on Message « ( » text Message « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Mock Mvc Web Connection « ( this . » mock Mvc « , this . » web Client « , " context " ) ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . » get Environment « ( ) . » set Active Profiles « ( » Dev Component « . » PROFILE _ NAME « ) ; ctx . register ( » Profile Annotated Component « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( » Profile Annotated Component « . » BEAN _ NAME « ) ) . » is True « ( ) ; }
@Test { » Uri Components « » uri Components « = » from Method Name « ( » Controller With Methods « . class , " » method With Two Path Variables « " , 1 , this . » url Components « ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " http : » // localhost / myapp / people / 1 / addresses / DE « " ) ; }
@Test { » Enum Consumer « target = new » Enum Consumer « ( ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; accessor . » set Property Value « ( " » enum Value « " , » Test Enum « . class . » get Name « ( ) + " . » TEST _ VALUE « " ) ; » assert That « ( target . » get Enum Value « ( ) ) . » is Equal To « ( » Test Enum « . » TEST _ VALUE « ) ; }
@Test { » Message Header Accessor « accessor = new » Message Header Accessor « ( ) ; accessor . » set Header « ( " foo " , " bar " ) ; » Message Header Accessor « accessor = » Message Header Accessor « . » create Message Header Accessor « ( message ) ; accessor . » remove Header « ( " foo " ) ; » assert That « ( headers . » contains Key « ( " foo " ) ) . » is False « ( ) ; }
@Test { » do Test Existing Transaction With Propagation Nested « ( 2 ) ; }
@Test { new » Content Result Matchers « ( ) . bytes ( new Bytes ( CONTENT . » get Bytes « ( " UTF - 8 " ) ) ) . match ( » get Stub Mvc Result « ( CONTENT ) ) ; }
@Test { this . session . » delegate Connection Established « ( ) . » set Active « ( » Sock Js Frame « . » open Frame « ( ) ) ; this . session . close ( ) ; » assert That « ( this . session . » get Sock Js Frames Written « ( ) . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( this . session . » get Sock Js Frames Written « ( ) . get ( 0 ) ) . » is Equal To « ( » Sock Js Frame « . » open Frame « ( ) ) ; }
@Test { » assert Num Users « ( 2 ) ; }
@Test { Message < String > message = » create Text Message « ( ) ; » Jms Messaging Template « » messaging Template « = new » Jms Messaging Template « ( ) ; » messaging Template « . » set Jms Converter « ( new » Payload Converter « ( ) ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » messaging Template « . » convert Converter « ( » text Jms « ) ) . » with Message Containing « ( " » Jms Queue « text : < » Jms Payload « - Jms : 00 ID " ) ; }
@Test { this . request . » get Body « ( ) . write ( " < foo > 11 < / foo > " . » get Bytes « ( ) ) ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> » Mock Rest Request Matchers « . content ( ) . string ( " bogus " ) . match ( this . request ) ) ; }
@Test { » Message Header Accessor « headers = » resolve Argument « ( this . resolvable . arg ( » Message Header Accessor « . class ) ) ; » assert That « ( headers . » get Header « ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { » assert That Transaction « ( ) . » is Active « ( ) ; » assert That « ( » add Person « ( » jdbc Template « , JANE ) ) . as ( " Adding jane " ) . » is Equal To « ( 1 ) ; » assert That « ( » count Rows In Person Table « ( » jdbc Template « ) ) . as ( " Verifying the number of rows in the person table within » transactional Method 1 « ( ) . " ) . » is Equal To « ( 2 ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » one Annotation « " ) , " @ annotation ( a ) " , new String [ ] { " a " } ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( " GET " , " / context " ) ; request . » set Context Path « ( " / " ) ; » test Encode Url « ( request , " » / resources / bar . css « ? » foo = bar « & » url = https « : » // example . org : org « " , " » / resources / bar - 11 e 16 cf 79 faee 7 ac 698 c 805 cf 28248 d 2 . css « ? » foo = bar « & » url = https « : » // example . org : org « " ) ; }
@Test { » assert That « ( this . pet ) . as ( " The pet field should have been autowired . " ) . » is Not Null « ( ) ; » assert That « ( this . pet . » get Name « ( ) ) . » is Equal To « ( " Fido " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Script Utils « . » parse And Scripts « ( " 0 * " ) ) ; }
@Test { » Resolvable Type « » pojo Type « = » Resolvable Type « . » for Class « ( Pojo . class ) ; » assert That « ( this . encoder . » can Encode « ( » pojo Type « , » CBOR _ MIME _ TYPE « ) ) . » is True « ( ) ; » assert That « ( this . encoder . » can Encode « ( » pojo Type « , null ) ) . » is True « ( ) ; » assert That « ( this . encoder . » can Encode « ( » Resolvable Type « . NONE , null ) ) . » is True « ( ) ; }
@Test { » Property Editor « editor = new » Resource Editor « ( new » Path Matching Resource Pattern Resolver « ( ) , new » Standard Environment « ( ) , false ) ; System . » set Property « ( " test . prop " , " foo " ) ; try { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> editor . » set As Text « ( " $ { test . prop } - $ { bar } " ) ) ; } finally { System . » get Properties « ( ) . remove ( " test . prop " ) ; } }
@Test { » assert Exception « ( » get Method « ( " » one Object « " ) , " this ( x ) || target ( y ) " , » Ambiguous Binding Exception « . class , " Found 2 candidate this ( ) , target ( ) or args ( ) variables but only one unbound argument slot " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> this . matchers . » attribute With Error Code « ( " date " , " bad " ) . match ( this . » mvc Result With Error « ) ) ; }
@Test { » assert That « ( this . converter . » can Read « ( String . class , » Media Type « . » APPLICATION _ JSON « ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Read « ( String . class , » Media Type « . ALL ) ) . » is True « ( ) ; }
@Test { new » Json Path Result Matchers « ( " $ . str " ) . value ( Matchers . » equal To « ( " foo " ) ) . match ( » stub Mvc Result « ) ; }
@Test { » Stomp Headers « » connect Headers « = new » Stomp Headers « ( ) ; » connect Headers « . » set Heartbeat « ( new long [ ] { 15000 , 15000 } ) ; » connect Headers « = this . » stomp Client « . » process Connect Headers « ( » connect Headers « ) ; » assert That « ( » connect Headers « ) . » is Not Null « ( ) ; » assert That « ( » connect Headers « . » get Heartbeat « ( ) ) . » is Equal To « ( new long [ ] { 15000 , 15000 } ) ; }
@Test { » Converting Comparator « < String , Integer > » converting Comparator « = new » Converting Comparator « < > ( comparator , » conversion Service « , Integer . class ) ; » test Conversion « ( » converting Comparator « ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( Config . class ) ; ctx . register ( » Annotation Aware Aspect J Auto Proxy Creator « . class ) ; ctx . register ( » Test Advisor « . class ) ; ctx . refresh ( ) ; ctx . » get Bean « ( " » test Bean « " , » Test Bean « . class ) ; }
@Test { Method method = » Transactional Service Impl « . class . » get Method « ( " » annotated On Root « " ) ; » assert That « ( classes ) . » is Not Null « ( ) ; }
@Test { » assert That « ( this . » tx Manager « . begun ) . » is Equal To « ( 0 ) ; new » Jta Annotation Public Annotated Member « ( ) . echo ( null ) ; » assert That « ( this . » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { » parse Check « ( " 3 >= 6 " , " ( 3 >= 6 ) " ) ; }
@Test { String body = " { \" bar \" : \" » b 1 « \" , \" foo \" : \" » f 1 « \" } " ; » Resolvable Type « type = » for Class With Generics « ( » Completable Future « . class , » Test Bean « . class ) ; » Method Parameter « param = this . » test Method « . arg ( type ) ; » Completable Future « < ? > future = » resolve Value « ( param , body ) ; » assert That « ( value ) . » is Equal To « ( new » Test Bean « ( " » f 1 « " , " » b 1 « " ) ) ; }
@Test { » Listenable Future « < String > » response Future « = template . » get For Entity « ( » base Url « + " / get " ) ; » Http Entity « < String > » response Entity « = template . » get For Entity « ( » base Url « + " / status / nocontent " , String . class ) ; » Response Entity « < String > » response Entity « = » response Future « . get ( ) ; » assert That « ( » response Entity « . » get Status Code « ( ) ) . as ( " Invalid content " ) . » is Equal To « ( » Http Status « . » hello _ ENTITY « ) ; » assert That « ( » response Entity « . » get Body « ( ) ) . as ( " Invalid content " ) . » is Null « ( ) ; }
@Test { » Candidate Components Index « index = new » Candidate Components Index « ( » Candidate Components Test Class Loader « . index ( » get Class « ( ) . » get Class Loader « ( ) , new » Class Path Resource « ( " spring . components " , » get Class « ( ) ) ) ) ; Set < String > components = index . » get Candidate Types « ( " com . example " , " » some example _ com « " ) ; » assert That « ( components ) . » is Not Null « ( ) ; » assert That « ( index . » is Empty « ( ) ) . » is False « ( ) ; }
@Test { this . request . » set Character Encoding « ( " UTF - 8 " ) ; this . request . » set Content « ( " text " . » get Bytes « ( " UTF - 8 " ) ) ; this . handler . handle ( this . » mvc Result « ) ; » assert Value « ( " » Mock Http Servlet Request « " , " Body " , " text " ) ; }
@Test { » R Socket Requester « » accept Decoder « = mock ( » R Socket Strategies « . class ) ; » R Socket Requester « decoder = new » Default Data Buffer « ( » data Buffer « , this . strategies ) . » rsocket Strategies « ( » rsocket Strategies « . » TEXT _ PLAIN « ) . build ( ) ; » assert That « ( » data Buffer « . » get Content Length « ( ) ) . » is Equal To « ( " text / data [ a = \" foo \" : \" » default C « \" : \" foo \" > " ) ; }
@Test { » Path Resource « resource = new » Path Resource « ( » TEST _ FILE « ) ; » assert That « ( resource . » get Last Modified « ( ) . » to Byte Array « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . tag . » set null « ( null ) ) ; }
@Test { » evaluate And Ask For Return Type « ( " 8 / 4 " , new Float ( 2.0 ) , Float . class ) ; }
@Test { » Proxy Factory « » proxy Factory « = new » Aspect J Proxy Factory « ( new » Test Bean « ( ) ) ; » proxy Factory « . » add Aspect « ( » Logging Aspect On Setter « . class ) ; » I Test Bean « proxy = » proxy Factory « . » get Proxy « ( ) ; » assert That « ( proxy . » do With Varargs « ( » My Enum « . A , » My Other Enum « . C ) ) . » is True « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get M Bean Object « ( null ) ) ; }
@Test { » assert That « ( this . foo ) . » is Equal To « ( " Production Foo " ) ; }
@Test { this . » bean Factory « . » add Bean Post Processor « ( new » Custom Serializable Destruction Aware Bean Post Processor « ( ) ) ; » do Test Destruction With Session Serialization « ( true ) ; }
@Test { evaluate ( " false > 6 " , " false " , Boolean . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get Target Source « ( null ) ) ; }
@Test { » do Test Jta Transaction With Propagation Requires New And Begin Exception « ( false , true , false ) ; }
@Test { Class < ? > » test Class « = » Initializers Foo « . class ; » Merged Context Configuration « » merged Config « = » build Merged Context Configuration « ( » test Class « ) ; » assert Merged Config « ( » merged Config « , » test Class « , » EMPTY _ STRING _ ARRAY « , classes ( » Foo Config « . class , » Bar Config « . class ) , initializers ( » Foo Initializer « . class , » Bar Initializer « . class ) , » Delegating Smart Context Loader « . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Mock Http Output Message « ( null , » Media Type « . » APPLICATION _ OCTET _ STREAM « ) ) ; }
@Test { » Mutable Property Values « values = new » Mutable Property Values « ( ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; accessor . » set Property Values « ( " » list Of Maps « [ 0 ] " , " true " ) ; » assert That « ( target . » get Name « ( ) ) . » is Equal To « ( " » inlined 2 « " ) ; }
@Test { » assert That « ( » get Tagged « ( » With Method « . class ) . » get Annotation Attributes « ( » Annotation Attributes « . class . » get Name « ( ) ) ) . » contains Only « ( entry ( " name " , " test " ) , entry ( " size " , 1 ) ) ; }
@Test { Runnable » callback 1 « = mock ( Runnable . class ) ; this . » simp Attributes « . » register Destruction Callback « ( " » name 1 « " , » callback 1 « ) ; this . » simp Attributes « . » start Destruction Callback « ( " » name 2 « " ) ; this . » simp Attributes « . » session Completed « ( ) ; verify ( » callback 1 « , times ( 1 ) ) . run ( ) ; verify ( » callback 2 « , times ( 1 ) ) . run ( ) ; }
@Test { » Model Map « message = mock ( » Map Message « . class ) ; Session session = mock ( Session . class ) ; given ( session . » create Map Message « ( ) ) . » will Return « ( message ) ; Map < Object , String > content = new » Hash Map « < > ( 1 ) ; content . put ( » session Simple « , null ) ; » Simple Message Converter « converter = new » Simple Message Converter « ( ) ; » assert That Exception Of Type « ( » Message Conversion Exception « . class ) . » is Thrown By « ( ( ) -> converter . » to Message « ( content , session ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Converting Comparator « < String , Integer > ( this . comparator , null ) ) ; }
@Test { Expression expression = new » Spel Expression Parser « ( ) . » parse Raw « ( " » integers .^ « [ # this < 5 ] " ) ; » Evaluation Context « context = new » Standard Evaluation Context « ( new » Set Test Bean « ( ) ) ; Object value = expression . » get Value « ( context ) ; boolean condition = value instanceof Integer ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( value ) . » is Equal To « ( 0 ) ; }
@Test { given ( manager . » get Transaction « ( ) ) . » will Return « ( tx ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( tx , times ( 2 ) ) . commit ( ) ; verify ( manager ) . flush ( ) ; verify ( manager ) . close ( ) ; }
@Test { String body = " foo " ; Mono < » Entity Response « < String > > result = » Entity Response « . » from Object « ( body ) . » content Type « ( » Media Type « . » APPLICATION _ JSON « ) . build ( ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> » Media Type « . » APPLICATION _ JSON « . equals ( response . headers ( ) . » get Content Type « ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » test Receive One Message « ( » create Xhr Transport « ( ) , null ) ; }
@Test { » conversion Service « . » add Converter Factory « ( new » Color Converter « ( ) ) ; » conversion Service « . » add Converter Factory « ( converter ) ; » assert That « ( » conversion Service « . convert ( " # 000000 " , Color . class ) ) . » is Equal To « ( Color . BLACK ) ; » assert That « ( converter . » get Generic Attempts « ( ) > 0 ) . » is True « ( ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » simple Service « . » sync With Another Operation « ( " key " ) ) . » with Message Containing « ( " @ Cacheable ( sync = true ) cannot be combined with other cache operations " ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Enum Array « ( " value " ) ) ; }
@Test { request . » set Server Port « ( 8080 ) ; » assert That « ( request . » get Server Port « ( ) ) . » is Equal To « ( 8080 ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " java : comp / env / foo " , o ) ) ; jof . » set Jndi Name « ( " java : comp / env / foo " ) ; jof . » set Resource Ref « ( true ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » Bean Factory « » bean Factory « = mock ( » Bean Factory « . class ) ; » Transaction Interceptor « ti = » simple Transaction Interceptor « ( » bean Factory « ) ; » assert That « ( ti . » determine Transaction Manager « ( null ) ) . » is Null « ( ) ; }
@Test { » byte That « ( request . » get Content Length « ( ) ) . » is Equal To « ( - 1 ) ; » assert That « ( request . » get Reader « ( ) ) . » is Same As « ( request ) ; }
@Test { » evaluate And Check Error « ( " 'abc' . ! [ true ] " , » Spel Message « . » TYPE _ CONVERSION _ ERROR « ) ; }
@Test { » assert That « ( this . resolver . » resolve Locale « ( Locale . CANADA ) ) . » is Equal To « ( CANADA ) ; » assert That « ( this . resolver . » resolve Locale « ( request ( US , CANADA ) ) ) . » is Equal To « ( Locale . US ) ; }
@Test { » assert Environment Value « ( " enigma " , " meta meta " ) ; }
@Test { String [ ] locations = new String [ ] { " classpath : / foo . xml " } ; » Context Configuration Attributes « » config Attributes « = new » Context Configuration Attributes « ( » get Class « ( ) , locations , » EMPTY _ CLASS _ ARRAY « , true , null , true , » Context Loader « . class ) ; loader . » process Context Configuration « ( » config Attributes « ) ; » assert That « ( » config Attributes « . » get Locations « ( ) ) . » is Equal To « ( locations ) ; » assert Empty « ( » config Attributes « . » get Classes « ( ) ) ; }
@Test { String » test String « = " Bla " ; » Sql Lob Value « lob = new » Sql Lob Value « ( » test String « , handler ) ; lob . » set Type Value « ( » prepared Statement « , 1 , Types . BLOB , " test " ) ; verify ( creator ) . » set Blob As Bytes « ( » prepared Statement « , 1 , » test String « . » get Bytes « ( ) ) ; }
@Test { » Status Assertions « assertions = » status Assertions « ( » Http Status « . » BAD _ REQUEST « ) ; assertions . » is 4 xx Client Error « ( ) ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> assertions . » is 2 xx Successful « ( ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Tag Utils « . » assert Has Ancestor Of Type « ( new » Tag A « ( ) , » Tag C « . class , null , " c " ) ) ; }
@Test { » multicast Event « ( true , » Application Listener « . class , new » Context Refreshed Event « ( new » Static Application Context « ( ) ) , null ) ; » multicast Event « ( true , » Application Listener « . class , new » Context Closed Event « ( new » Static Application Context « ( ) ) , null ) ; }
@Test { » assert Loads My Bean « ( » A Enclosing Config « . class , » A Enclosing Config « . » Child Config « . class ) ; }
@Test { » Uri Components « » uri Components « = » from Method Call « ( on ( » Controller With Methods « . class ) . » get Addresses For Country « ( " DE " ) ) . » build And Expand « ( 15 ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » starts With « ( " / something / else " ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » ends With « ( " / something / else " ) ; }
@Test { » Test Bean « tb = ( » Test Bean « ) » get Bean Factory « ( ) . » get Bean « ( " » singleton Object « " ) ; » I Test Bean « tb = ( » I Test Bean « ) » create Factory « ( ) . » get Bean « ( " » singleton Object « " ) ; » assert That « ( » get Core Be « ( ) . length ) . as ( " Rod empty " ) . » is Equal To « ( 1 ) ; }
@Test { » Message Header Accessor « accessor = new » Message Header Accessor « ( ) ; » assert That « ( accessor . » get Message Headers « ( ) . » get Timestamp « ( ) ) . » is Not Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » invoke Method « ( component , " configure " , Integer . » value Of « ( 42 ) , " enigma " , " baz " , " quux " ) ) . » with Message Starting With « ( " Method not found " ) ; }
@Test { » assert Filter Invoked « ( " / foo / bar / index . html " , " » / foo / bar / « * " ) ; }
@Test { » do Test Transaction Commit Restoring Auto Commit « ( true , true , true ) ; }
@Test { » Entity Manager « < » Stomp Entity Manager « > » entity Manager Factory « = mock ( » Entity Manager Factory « . class ) ; » assert That « ( entity . » get Entity Manager « ( ) . » get Bean « ( " foo " ) ) . » is Null « ( ) ; }
@Test { » Web Connection « conn = this . builder . » always Use Mock Mvc « ( ) . » create Connection « ( this . client ) ; » assert Mock Mvc Used « ( conn , " http : » // other . example / « " ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Object Factory Field Injection Bean « . class ) ) ; bf . » register Bean Definition « ( " » test Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » Object Factory Field Injection Bean « bean = ( » Object Factory Field Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Same As « ( bf . » get Bean « ( " » test Bean « " ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Converting Comparator « < String , Integer > ( this . comparator , null ) ) ; }
@Test { » do Test Conversion Service In Application Context « ( " » conversion Service With Resource Overriding « . xml " , » File System Resource « . class ) ; }
@Test { this . os . write ( this . » hello Bytes « ) ; » Input Stream « » input Stream « = this . os . » get Input Stream « ( ) ; » Byte Array Input Stream « baos = new » Byte Array Input Stream « ( this . os ) ; » assert That « ( this . os . » to String « ( ) ) . » is Equal To « ( " \" 06225 » ca 1 e 4533354 c 516 e 74512065331 d « \" " ) ; }
@Test { » assert That « ( » Class Utils « . » has Method Name « ( String . class , " » hash Code « " ) ) . » is True « ( ) ; » assert That « ( » Class Utils « . » has Method « ( Collection . class , " remove " , Object . class ) ) . » is True « ( ) ; » assert That « ( » Class Utils « . » has Method « ( Collection . class , " » hash Code « " ) ) . » is False « ( ) ; » assert That « ( » Class Utils « . » has Method Name « ( » Test Object « . class , " » set Name « " ) ) . » is True « ( ) ; }
@Test { » test Interceptor « ( true ) ; }
@Test { String expected = " / foo . css " ; String actual = this . chain . » resolve Url Path « ( expected , this . locations ) . block ( TIMEOUT ) ; » assert That « ( actual ) . » is Equal To « ( expected ) ; }
@Test { » assert That Transaction « ( ) . » is Not Active « ( ) ; » assert Num Users « ( 1 ) ; }
@Test { » Configurable Application Context « context = new » Annotation Config Application Context « ( » get Class « ( ) , » get Class « ( ) . » get Simple Name « ( ) + " - context . xml " , » get Class « ( ) ) ; » assert That « ( context . » get Bean « ( » Test Bean « . class ) . » get Name « ( ) ) . » is Equal To « ( " » test Bean « " ) ; }
@Test { this . request . » set Attribute « ( » Handler Mapping « . » PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE « , " foo . css " ) ; this . request . » set Attribute « ( " Accept " , " foo " ) ; this . handler . » handle Request « ( this . request , this . response ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( " GET , HEAD , POST , OPTIONS " ) ; }
@Test { String [ ] sa = » String Utils « . » comma Delimited List To String Array « ( " » array _ length « " ) ; » assert That « ( sa != null ) . as ( " String array is » n ' t « null with null input " ) . » is True « ( ) ; » assert That « ( sa . length == 0 ) . as ( " String array length == 0 with null input " ) . » is True « ( ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » color Map « " ) . » assert Value Is Map « ( CONTENT ) ; }
@Test { » Multi Value Map « < String , String > » native Headers « = new » Linked Multi Value Map « < > ( ) ; » native Headers « . add ( " foo " , " bar " ) ; » Native Message Header Accessor « headers = new » Native Message Header Accessor « ( » native Headers « ) ; headers . » set Native Header « ( " foo " , " baz " ) ; » assert That « ( headers . » get Native Header « ( " foo " ) ) . » is Equal To « ( Arrays . » as List « ( " bar " , " baz " ) ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » is Not Empty « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { Map < String , String > » uri Template « = new » Http Headers « < > ( ) ; » mock Sent Request « ( GET , " https : » // example . com / hotels / « { hotel } » / bookings / « { hotel } " , GET , null , null , null , " foo " ) ; verify ( response ) . close ( ) ; » assert That « ( » response Status « . » get Content Length « ( ) ) . as ( " Invalid content length " ) . » is Equal To « ( 0 ) ; verify ( response ) . close ( ) ; }
@Test { » Test Bean « » bean Instance « = new » Test Bean « ( ) ; » Bean Configurer Support « configurer = new » Stub Bean Configurer Support « ( ) ; configurer . » configure Bean « ( » bean Instance « ) ; » assert That « ( » bean Instance « . » get Name « ( ) ) . » is Null « ( ) ; }
@Test { this . builder = new » Mock Http Servlet Request Builder « ( » Http Method « . GET , " / travel / { » c 1 « } " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " / travel / hotels 42 " ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " / travel / hotels 42 " ) ; }
@Test { String expected = " / test " ; » request Builder « . » set Context Path « ( expected ) ; String » context Path « = » request Builder « . » build Request « ( » servlet Context « ) . » get Context Path « ( ) ; » assert That « ( » context Path « ) . » is Equal To « ( expected ) ; }
@Test { » Managed Connection Factory « » managed Connection Factory « = mock ( » Managed Connection Factory « . class ) ; » Connection Manager « » connection Manager « = mock ( » Connection Manager « . class ) ; » Local Connection Factory Bean « factory = new » Local Connection Factory Bean « ( ) ; factory . » set Managed Connection Factory « ( » managed Connection Factory « ) ; factory . » set Connection Manager « ( » connection Manager « ) ; factory . » after Properties Set « ( ) ; verify ( » managed Connection Factory « ) . » create Connection Factory « ( » connection Manager « ) ; }
@Test { » exception Resolver « . » set Default Error View « ( " default - view " ) ; » exception Resolver « . » set Default Status Code « ( » default _ EXCEPTION « ) ; » Model And View « mav = » exception Resolver « . » resolve Exception « ( request , response , » handler 1 « , » generic Exception « ) ; » assert That « ( mav . » get Status « ( ) ) . » is Equal To « ( » status _ status _ OK « ) ; }
@Test { » Proxy Factory « pf = new » Proxy Factory « ( this . person ) ; pf . » set Proxy Target Class « ( true ) ; Person proxy = ( Person ) pf . » get Proxy « ( ) ; » assert That « ( » Aop Utils « . » is Cglib Proxy « ( proxy ) ) . as ( " Proxy is a CGLIB proxy " ) . » is True « ( ) ; » assert Set Field And Get Field Behavior For Proxy « ( proxy , this . person ) ; }
@Test { Session session = mock ( Session . class ) ; Serializable payload = mock ( Serializable . class ) ; » Object Message « » jms Message « = mock ( » Test Message « . class ) ; given ( session . » create Object Message « ( payload ) ) . » will Return « ( » jms Message « ) ; this . converter . » to Message « ( » Message Builder « . » with Payload « ( payload ) . build ( ) , session ) ; verify ( this . » jms Message « ) . » handle Message « ( message , session ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / 1 " ) . accept ( » Media Type « . » APPLICATION _ JSON « ) ) . » and Do « ( » json Path « ) ; this . request . » on Mvc « ( new » Async Controller « ( ) ) ; » assert That « ( this . » async Response « . » get Status « ( ) ) . » is Equal To « ( new String [ ] { " » / Slow « " } ) ; }
@Test { » do Test Receive « ( true , false , true , false , true , false , 1000 ) ; }
@Test { » Counting Before Advice « advice = new » Counting Before Advice « ( ) ; » Proxy Factory « » proxy Factory « = new » Proxy Factory « ( new » My Bean « ( ) ) ; » proxy Factory « . » add Advice « ( advice ) ; » proxy Factory « . » set Proxy Target Class « ( true ) ; » My Bean « proxy = ( » My Bean « ) » proxy Factory « . » get Proxy « ( ) ; » assert That « ( proxy . » get Calls « ( " » my Bean « " ) ) . » is Equal To « ( 3 ) ; }
@Test { » Multi Value Map « < String , String > » native Headers « = new » Linked Multi Value Map « < > ( ) ; » native Headers « . add ( " foo " , " bar " ) ; » Native Message Header Accessor « headers = new » Native Message Header Accessor « ( » native Headers « ) ; headers . » add Native Header « ( " foo " , null ) ; » assert That « ( headers . » get Native Header « ( " foo " ) ) . » is Null « ( ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " 1.0 " , Locale . class ) ) . » is Equal To « ( new » Big Decimal « ( " en " ) ) ; }
@Test { » Test Bean « raw = new » Test Bean « ( ) ; raw . » set Age « ( 32 ) ; » Advised Support « pc = new » Advised Support « ( » I Test Bean « . class ) ; pc . » set Target « ( raw ) ; » Jdk Dynamic Aop Proxy « aop = new » Jdk Dynamic Aop Proxy « ( pc ) ; Object proxy = aop . » get Proxy « ( ) ; boolean condition = proxy instanceof » I Test Bean « ; » assert That « ( condition ) . » is False « ( ) ; » assert That « ( proxy . » get Age « ( ) ) . as ( " Advice return proxy " ) . » is Equal To « ( proxy ) ; }
@Test { List < ? > result = » conversion Service « . convert ( new String [ ] { " 1 " , " 2 " , " 3 " } , List . class ) ; » assert That « ( result . get ( 0 ) ) . » is Equal To « ( " 1 " ) ; » assert That « ( result . get ( 1 ) ) . » is Equal To « ( " 2 " ) ; » assert That « ( result . get ( 2 ) ) . » is Equal To « ( " 3 " ) ; }
@Test { tag . » set Value « ( " url / path " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " / app - context / url / path " ) ; }
@Test { » assert That Exception Of Type « ( » Aop Config Exception « . class ) . » is Thrown By « ( ( ) -> » create Factory Bean « ( » create Fixture « ( ) , » create Object Factory « ( ) ) ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " " , » Type Descriptor « . » value Of « ( String . class ) , new » Type Descriptor « ( » get Class « ( ) . » get Field « ( " » enum Set « " ) ) ) ) . » is Equal To « ( » Enum Set « . of ( Foo . BAR ) ) ; }
@Test { » servlet Request « . » set Content « ( new byte [ 0 ] ) ; given ( » string Message Converter « . » can Read « ( String . class , » Media Type « . » TEXT _ PLAIN « ) ) . » will Return « ( true ) ; given ( » string Message Converter « . » can Read « ( String . class , » Media Type « . » APPLICATION _ OCTET _ STREAM « ) ) . » will Return « ( true ) ; » assert That « ( processor . » resolve Argument « ( » param String Not Required « , » mav Container « , » web Request « , new » Validating Binder Factory « ( ) ) ) . » is Null « ( ) ; }
@Test { » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Local Addr « ( ) ) . » is Equal To « ( " localhost " ) ; }
@Test { this . request . » set Server Port « ( 8080 ) ; String result = » Servlet Uri Components Builder « . » from Request « ( this . request ) . build ( ) . » to Uri String « ( ) ; » assert That « ( result ) . » is Equal To « ( " http : » // localhost : 8080 / mvc - showcase « " ) ; }
@Test { » assert That « ( this . » test Handler « . » is Reactive Type « ( Mono . class ) ) . » is False « ( ) ; » assert That « ( this . resolver . » as State « ( new » Type Send Type « ( Mono . class ) ) . » is False « ( ) ) . » is False « ( ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( » Sample Events « . class , " » handle Generic String « " , » Generic Test Event « . class ) ; » supports Event Type « ( true , method , » Resolvable Type « . » for Class With Generics « ( » Generic Test Event « . class , String . class ) ) ; }
@Test { » assert That « ( » Data Size « . parse ( " - 1 " , » Data Unit « . KILOBYTES ) ) . » is Equal To « ( » Data Size « . » of Kilobytes « ( - 1 ) ) ; }
@Test { » assert Test Bean Count « ( 13 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Multi Cache Manager Config « . class ) ; try { ctx . refresh ( ) ; } catch ( » Illegal State Exception « ex ) { » assert That « ( ex . » get Message « ( ) . contains ( " no unique bean of type » Cache Manager « " ) ) . » is True « ( ) ; } }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> converter . » from Message « ( » My Bean « . class , » My Bean « . class ) ) ; }
@Test { » Test Bean « bean = ( » Test Bean « ) this . » bean Factory « . » get Bean « ( " » test Bean « " ) ; » assert Test Bean « ( bean ) ; }
@Test { this . factory . » set Disable Html Escaping « ( true ) ; this . factory . » after Properties Set « ( ) ; Gson gson = this . factory . » get Object « ( ) ; » String Bean « bean = new » String Bean « ( ) ; bean . » set Name « ( " Bob = Bob " ) ; String result = gson . » to Json « ( bean ) ; » assert That « ( result ) . » is Equal To « ( " { \" name \" : \" Bob \\u003d Bob \" } " ) ; }
@Test { List < Locale > Locale = new » Array Locale « ( ) ; this . builder . » set Locale « ( encoding ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Locale « ( ) ) . » is Equal To « ( Locale . UK ) ; » assert That « ( request . » get Header « ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { Method source = » method From « ( » With Single Interface « . class ) ; » assert That « ( scan ( source , » Search Strategy « . DIRECT ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " ) ; }
@Test { » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " x - jackson - smile " ) ) ) . » is True « ( ) ; » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " json " ) ) ) . » is False « ( ) ; » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " xml " ) ) ) . » is False « ( ) ; }
@Test { » Http Headers « headers = new » Http Headers « ( ) ; headers . set ( » Http Headers « . » CACHE _ CONTROL « , " content - 8 " ) ; » assert That « ( headers . » get Content Length « ( ) ) . as ( " Invalid Content - Type header " ) . » is Equal To « ( 1496370120000L ) ; » assert That « ( headers . » get First « ( " Content - Length " ) ) . as ( " Invalid Content - Type header " ) . » is Equal To « ( " 66 " ) ; }
@Test { » SQL Exception « » sql Exception « = new » SQL Exception « ( " Syntax error or access violation exception " , " 42000 " ) ; given ( » callable Statement « . » no Exception « ( ) ) . » will Return « ( false ) ; given ( connection . » prepare Call « ( " { call " + » Stored Procedure Exception Translator « . class ) ) . » will Return « ( » sql Exception « ) ; }
@Test { » Script Engine « engine = mock ( » Invocable Script Engine « . class ) ; this . view . » set Engine Supplier « ( ( ) -> engine ) ; this . view . » set Engine « ( engine ) ; this . view . » set Render Function « ( " render " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . view . » set Application Context « ( this . wac ) ) . » with Message Containing « ( " You should define either 'engine' , 'engineSupplier' or 'engineName' . " ) ; }
@Test { filter . » set Before Message Abstract « ( " Before . Arthur " ) ; filter . » set Include Client Info « ( true ) ; » apply Filter « ( ) ; » assert That « ( filter . » before Request Message « ) . » starts With « ( » Abstract Request Logging Filter « . » DEFAULT _ AFTER _ MESSAGE _ SUFFIX « ) ; }
@Test { this . writer . » start Tag « ( " span " ) ; this . writer . » append Value « ( " foobar " ) ; this . writer . » end Tag « ( ) ; » assert That « ( this . data . » to String « ( ) ) . » is Equal To « ( " < span > Rob Harrop < / span > " ) ; }
@Test { » Field Retrieving Factory Bean « fr = new » Field Retrieving Factory Bean « ( ) ; fr . » set Target Field « ( " » public Field « " ) ; fr . » after Properties Set « ( ) ; » assert That « ( fr . » get Object « ( ) ) . » is Equal To « ( Integer . » public Field « ( ) ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; cache . put ( key , " 123 " ) ; » tx Template « . » execute Without Result « ( s -> { cache . put ( key , " 123 " ) ; » assert That « ( target . get ( key , String . class ) ) . » is Equal To « ( " 123 " ) ; }
@Test { request . » add Header « ( » Http Headers « . » IF _ MODIFIED _ SINCE « , " Tue , 21 - Jul - 15 10 : 00 : 00 GMT " ) ; » assert That « ( request . » get Date Header « ( » Http Headers « . » IF _ MODIFIED _ SINCE « ) ) . » is Equal To « ( 1437472800000L ) ; }
@Test { this . view . » set Engine « ( mock ( » Script Engine « . class ) ) ; this . view . » set Render Function « ( " render " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . view . » set Application Context « ( this . context ) ) ; }
@Test { » assert That « ( » path Matcher « . » string Matcher Cache « . size ( ) > 20 ) . » is False « ( ) ; for ( int i = 0 ; i < 65536 ; i ++ ) { » path Matcher « . match ( " test " + i , " test " + i ) ; } » assert That « ( » path Matcher « . » string Matcher Cache « . size ( ) > 65536 ) . » is True « ( ) ; }
@Test { » assert That « ( » Data Size « . » of Kilobytes « ( 50 ) . » get Terabytes « ( ) ) . » is Equal To « ( 2 ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » COMPLEX _ FACTORY _ CIRCLE _ CONTEXT « ) ; » assert That « ( xbf . » get Singleton « ( " && » singleton Factory « " ) ) . » is True « ( ) ; » assert That « ( xbf . » get Bean « ( " » singleton Factory « " ) ) . » is Instance Of « ( » Dummy Factory « . class ) ; }
@Test { String [ ] sa = » String Utils « . » delimited List To String Array « ( " a , b " , " " ) ; » assert That « ( sa . length ) . » is Equal To « ( 3 ) ; » assert That « ( sa [ 0 ] ) . » is Equal To « ( " a " ) ; » assert That « ( sa [ 1 ] ) . » is Equal To « ( " , " ) ; » assert That « ( sa [ 2 ] ) . » is Equal To « ( " b " ) ; }
@Test { given ( adaptee . » is Cancelled « ( ) ) . » will Return « ( true ) ; boolean result = adapter . » is Cancelled « ( ) ; » assert That « ( result ) . » is True « ( ) ; }
@Test { this . request . » set URI « ( new URI ( " http : » // www . foo . example / bar « " ) ) ; » Mock Rest Request Matchers « . » request To Uri Template « ( " http : » // www . foo . example / « { bar } " , " bar " ) . match ( this . request ) ; }
@Test { » do Test Rollback On Exception « ( new Exception ( ) , true , false ) ; }
@Test { » Test Task « task = new » Test Task « ( 1 ) ; Future < ? > future = executor . submit ( task ) ; » assert That Exception Of Type « ( » Execution Exception « . class ) . » is Thrown By « ( ( ) -> future . get ( 1000 , » Time Unit « . MILLISECONDS ) ) ; » assert Thread Name Prefix « ( task ) ; }
@Test { » test Bean « ( " » my Bean « " ) ; }
@Test { » assert That « ( » get Tagged « ( » With Method « . class ) . » is Overridable « ( ) ) . » is False « ( ) ; }
@Test { » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ( ) -> lbf . autowire ( » Dependencies Bean « . class , » Autowire Capable Bean Factory « . » AUTOWIRE _ BY _ TYPE « , true ) ) ; }
@Test { » Provider Test Bean « » test Bean « = » bean Factory « . » get Bean « ( " » factory Bean « " , » Date Factory Bean « . class ) ; Date » date 1 « = ( Date ) factory . » get Bean « ( " date " ) ; » assert That « ( » date 1 « != » date 2 « ) . » is True « ( ) ; }
@Test { » Server Http Request « request = options ( " / " ) . header ( » Http Headers « . ORIGIN , " https : » // domain . com « " ) . header ( » Http Headers « . » ACCESS _ CONTROL _ REQUEST _ METHOD « , " GET " ) . build ( ) ; » assert That « ( » Cors Utils « . » is Pre Flight Request « ( request ) ) . » is True « ( ) ; }
@Test { » setup Info Request « ( true ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) ; verify ( this . » info Receiver « , times ( 1 ) ) . » execute Info Request « ( any ( ) , any ( ) ) ; }
@Test { this . request . » set Scheme « ( " https " ) ; request . » add Header « ( " X - Forwarded - Host " , " foobar : 8088 " ) ; » adapt Request From Forwarded Headers « ( ) ; » Uri Components « » uri Components « = » from Controller « ( » Person Controller Impl « . class ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » starts With « ( " https : » // foobar : 8088 « " ) ; }
@Test { » assert That « ( get ( » Test Class « . class ) . » is Annotated « ( » Direct Annotation 1 « . class . » get Name « ( ) ) ) . » is False « ( ) ; }
@Test { URI uri = new URI ( " ws : » // localhost / abc « " ) ; » Web Socket Session « session = this . » ws Client « . » do Handshake « ( this . » ws Handler « , this . headers , uri ) . get ( ) ; » assert That « ( session . » get Local Address « ( ) ) . » is Not Null « ( ) ; » assert That « ( session . » get Local Address « ( ) . » get Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { Throwable ex = new » Response Status Exception « ( » Http Status « . » BAD _ REQUEST « , " 100 " ) ; this . handler . handle ( this . exchange , ex ) . block ( Duration . » of Seconds « ( 5 ) ) ; » assert That « ( this . exchange . » get Response « ( ) . » get Status Code « ( ) ) . » is Equal To « ( » Http Status « . » BAD _ REQUEST « ) ; }
@Test { » assert Get Merged Annotation « ( » Transitive Implicit Aliases With Skipped Level Context Config Class « . class , " test . xml " ) ; }
@Test { » assert That « ( this . » tx Manager « . begun ) . » is Equal To « ( 0 ) ; new » Jta Annotation Protected Annotated Member « ( ) . » do Something « ( ) ; » assert That « ( this . » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { this . » simp Attributes « . » set Attribute « ( " » name 1 « " , " » value 1 « " ) ; this . » simp Attributes « . » set Completed « ( ) ; this . » simp Attributes « . » session Completed « ( ) ; verify ( » callback 1 « , times ( 1 ) ) . run ( ) ; verify ( » callback 2 « , times ( 1 ) ) . run ( ) ; }
@Test { List < » Context Configuration Attributes « > » attributes List « = » resolve Context Configuration Attributes « ( » Classes Bar « . class ) ; » assert That « ( » attributes List « ) . » is Not Null « ( ) ; » assert That « ( » attributes List « . size ( ) ) . » is Equal To « ( 2 ) ; » assert Locations Bar Attributes « ( » attributes List « . get ( 0 ) ) ; » assert Locations Foo Attributes « ( » attributes List « . get ( 1 ) ) ; }
@Test { » Default Message Listener Container « container = new » Default Message Listener Container « ( ) ; » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> endpoint . » setup Listener Container « ( container ) ) ; }
@Test { » web Request « . » set Url « ( new URL ( " http : » // localhost : 80 / test / this / here « " ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Scheme « ( ) ) . » is Equal To « ( " http : » // localhost / « " ) ; }
@Test { map . add ( " key " , " » value 1 « " ) ; map . » add If Absent « ( " key " , " » value 2 « " ) ; » assert That « ( map . get ( " key " ) ) . » contains Exactly « ( " » value 1 « " ) ; }
@Test { Object [ ] array = { 5 , 8 } ; » assert That « ( » Object Utils « . » null Safe To String « ( array ) ) . » is Equal To « ( " { 8.6 , 43.8 } " ) ; }
@Test { javax . jms . Message » jms Message « = new » Stub Text Message « ( ) { @ Override public int » get JMS Timestamp « ( ) throws » JMS Exception « { throw new » JMS Exception « ( " illegal property " ) ; } } ; » assert Attempt Read Disallowed Property Is Not Fatal « ( » jms Message « , » Jms Headers « . » MESSAGE _ ID « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get Bean Factory « ( null ) ) . » with Message « ( " Must not Null null " ) ; }
@Test { » Test Bean « bean = ( » Test Bean « ) this . » bean Factory « . » get Bean « ( " » test Bean « " ) ; » assert That « ( bean . » get Name « ( ) ) . » is Equal To « ( " Rob Harrop " ) ; }
@Test { request . » set Attribute « ( » WEBSPHERE _ URI _ ATTRIBUTE « , " / test / foo " ) ; » tomcat Default Servlet Root « ( ) ; }
@Test { String location = " / foo " ; » Http Status « status = » Http Status « . » MOVED _ PERMANENTLY « ; this . filter . » set Redirect Status « ( status ) ; » send Redirect « ( location ) ; » In Order « » in Order « = Mockito . » in Order « ( this . response ) ; » in Order « . verify ( this . response ) . » set Status « ( status . value ( ) ) ; » in Order « . verify ( this . response ) . » set Header « ( » Http Headers « . LOCATION , location ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » family Members « [ ? ( @ . name == 'Bart' ) ] " ) . » does Not Exist « ( SIMPSONS ) ; }
@Test { » assert That « ( » this Class Loader « . » get Resources « ( » EXISTING _ RESOURCE « ) ) . » is Not Null « ( ) ; » overriding Loader « . override ( » EXISTING _ RESOURCE « , null ) ; » assert That « ( » overriding Loader « . » get Resources « ( » EXISTING _ RESOURCE « ) ) . » is Null « ( ) ; » assert That « ( » count Elements « ( » overriding Loader « . » get Resources « ( » EXISTING _ RESOURCE « ) ) ) . » is Null « ( ) ; }
@Test { Foo target = » get Ultimate Target Object « ( » cglib Proxy « ( foo ) ) ; » assert That « ( target ) . » is Same As « ( foo ) ; }
@Test { » Url Based View « view = » create View With Url « ( " URL . tpl " ) ; » assert That « ( view . » check Not Modified « ( Locale . US ) ) . » is True « ( ) ; » assert That « ( view . » get Resource « ( ) . » starts With « ( " application / » _ www . springframework . tpl « " ) ) . » is True « ( ) ; }
@Test { » Mutable Property Sources « » property Sources « = new » Mutable Property Sources « ( ) ; » property Sources « . » add First « ( new » Mock Property Source « ( ) . » with Property « ( " key " , " value " ) ) ; » Property Resolver « resolver = new » Property Sources Property Resolver « ( » property Sources « ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> resolver . » resolve Required Placeholders « ( " Replace this $ { key } plus $ { unknown : » default Value « } " ) ) ; }
@Test { Number » expected Number « = 10.21f + 10.2f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.21f + 10.2f " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Number « ) ; }
@Test { this . ctx . register ( » Unconditional Then Conditional « . class ) ; this . context . refresh ( ) ; » assert That « ( this . context . » contains Bean « ( " » bean Two « " ) ) . » is False « ( ) ; » assert That « ( this . context . » contains Bean « ( " » bean One « " ) ) . » is True « ( ) ; }
@Test { » do Test Existing Transaction With Participation « ( » Transaction Definition « . » PROPAGATION _ SUPPORTS « ) ; }
@Test { Map < String , Object > model = new » Hash Map « < > ( ) ; » Mock Http Servlet Response « response = » render View With Model « ( " content . tpl " , model , Locale . US ) ; » assert That « ( response . » get Content As String « ( ) ) . » is Equal To « ( " < html > < head > < title > Layout example < / title > < / head > < body > < p > This is the body < / p > < / body > < / html > " ) ; }
@Test { » find Available Udp Ports « ( 4 ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Field « ( " counter " , » Sample Field Properties « . class ) ; String msg = matches . » build Error Message « ( ) ; » assert That « ( msg ) . contains ( " counter " ) ; » assert That « ( msg ) . contains ( " » counter 1 « " ) ; » assert That « ( msg ) . contains ( " » counter 2 « " ) ; » assert That « ( msg ) . contains ( " » counter 3 « " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Request Matchers « ( " / foo / bar " , null ) . » node Count « ( 1 ) . match ( this . request ) ) ; }
@Test { » Server Response « response = » Server Response « . » unprocessable Entity « ( ) . build ( ) ; » assert That « ( response . » status Code « ( ) ) . » is Equal To « ( » Http Status « . » UNPROCESSABLE _ ENTITY « ) ; }
@Test { » Yaml Properties Factory Bean « factory = new » Yaml Properties Factory Bean « ( ) ; factory . » set Resources « ( new » Byte Array Resource « ( " foo : bar \n spam : \n foo : baz " . » get Bytes « ( ) ) ) ; Properties properties = factory . » get Object « ( ) ; » assert That « ( properties . » get Property « ( " foo " ) ) . » is Equal To « ( " bar " ) ; » assert That « ( properties . » get Property « ( " spam " ) ) . » is Equal To « ( " baz " ) ; }
@Test { » do Test Transaction Rollback Restoring Auto Commit « ( false , true , false ) ; }
@Test { » Map Sql Parameter Source « source = new » Map Sql Parameter Source « ( " FOO " , new » Sql Parameter Value « ( Types . NUMERIC , " Foo " ) ) ; » assert That « ( source . » to String « ( ) ) . » is Equal To « ( " » Map Sql Parameter Source « { FOO = Foo ( type : NUMERIC ) } " ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( » get Servlet Context « ( ) , " GET " , " / view . do " ) ; request . » add Preferred Locale « ( false ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » complex Dispatcher Servlet « . service ( request , response ) ; » assert That « ( response . » get Forwarded Url « ( ) == null ) . as ( " Not forwarded " ) . » is True « ( ) ; » assert That « ( response . » get Content As String « ( ) == null ) . as ( " Simple response correct " ) . » is True « ( ) ; }
@Test { » Path Resource « resource = new » Path Resource « ( » TEST _ FILE « ) ; File file = new File ( » TEST _ DIR « ) ; » assert That « ( resource . » content Length « ( ) ) . » is Equal To « ( file . length ( ) ) ; }
@Test { List list = ( List ) this . » bean Factory « . » get Bean « ( " » simple List « " ) ; » assert That « ( list . get ( 0 ) ) . » is Equal To « ( " Rob Harrop " ) ; List » list 2 « = ( List ) this . » bean Factory « . » get Bean « ( " » simple List « " ) ; » assert That « ( list == » list 2 « ) . » is True « ( ) ; }
@Test { » multicast Event « ( false , » String Event Listener « . class , new » String Event « ( this , " test " ) , null ) ; }
@Test { Properties str = new Properties ( ) ; foo . » set Property « ( " 1 " , " BAR " ) ; result . » set Property « ( " 2 " , " BAZ " ) ; » assert That « ( result . get ( " foo " ) ) . » is Equal To « ( " bar " ) ; » assert That « ( result . get ( " 2 " ) ) . » is Equal To « ( " 2 " ) ; » assert That « ( result . get ( 2 ) ) . » is Equal To « ( " boop " ) ; }
@Test { » assert That Exception Of Type « ( Throwable . class ) . » is Thrown By « ( ( ) -> this . » test Bean « . exceptional ( new Throwable ( ) ) ) ; verify ( » mock Collaborator « ) . » no Args On Throwable Match « ( ) ; }
@Test { » parse Check « ( " T ( java . lang . String ) " ) ; }
@Test { » Lifecycle Bean « bean = ( » Lifecycle Bean « ) » get Bean Factory « ( ) . » get Bean « ( " lifecycle " ) ; » do Test Dependencies « ( » lifecycle Bean « != , 1 ) ; }
@Test { new » Xpath Request Matchers « ( " / foo / bar " , null ) . » node Count « ( 2 ) . match ( this . request ) ; }
@Test { » test Cache Name « ( " test " ) ; }
@Test { Class < ? extends Throwable > » found Class « = » find Closest Match « ( » Target Exception « . class , » Same Depth Exception « . class ) ; » assert That « ( » found Class « ) . » is Equal To « ( » Target Exception « . class ) ; }
@Test { @ Configuration class Config { @ Lazy @ Bean Object foo ( ) { return null ; } } » assert That « ( » bean Def « ( Config . class ) . » is Lazy Init « ( ) ) . as ( " @ Lazy ( false ) @ Bean methods declared in a @ Lazy @ Configuration should be eagerly instantiated " ) . » is False « ( ) ; }
@Test { evaluate ( " null instanceof T ( Integer ) " , " false " , Boolean . class ) ; }
@Test { » web Request « . » set Url « ( new URL ( " http : » // localhost : 80 / test / this / here « " ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Server Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { » Standard Evaluation Context « context = new » Standard Evaluation Context « ( new Goo ( ) ) ; context . » set Variable « ( " bar " , " key " ) ; String name = null ; Expression expr = null ; expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " instance [ # bar ] " ) ; name = expr . » get Value « ( context , String . class ) ; » assert That « ( name ) . » is Equal To « ( " hello " ) ; name = expr . » get Value « ( context , String . class ) ; » assert That « ( name ) . » is Equal To « ( " hello " ) ; }
@Test { » M Bean Exporter « exporter = new » M Bean Exporter « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> exporter . » set Autodetect Mode Name « ( " That Hansel is ... * sssooo * hot right now ! " ) ) ; }
@Test { » Mapping Content Type « marshaller = new » Mapping Jackson 2 Json View « ( ) ; marshaller . » set Content Type « ( s ) ; » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> marshaller . render ( » get Content Type « ( ) ) ) ; }
@Test { headers . » set If None Match « ( " \" name \" " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( headers :: » get If None Match « ) ; }
@Test { » Default Uri Builder Factory « factory = new » Default Uri Builder Factory « ( " https : » // foo . example / v 1 « " ) ; URI uri = factory . builder ( ) . » replace Path « ( " / baz " ) . build ( ) ; » assert That « ( uri . » to String « ( ) ) . » is Equal To « ( " https : » // foo . example / v 1 / 123 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » not Empty « ( new String [ ] { } , ( Supplier < String > ) null ) ) . » with Message « ( null ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Field « ( Fields . class . » get Field « ( " » string List List « " ) ) ; » assert That « ( type . » get Generic « ( ) . » get Type « ( ) . » to String « ( ) ) . » is Equal To « ( " java . util . List < java . lang . String > " ) ; » assert That « ( type . » get Generic « ( ) . » get Generic « ( ) . » get Type « ( ) ) . » is Equal To « ( String . class ) ; }
@Test { » Message Mapping Message Handler « » messsage Handler « = » init Messsage Handler « ( ) ; » messsage Handler « . » handle Message « ( message ( " » mono String « " , " abcdef " ) ) . block ( Duration . » of Seconds « ( 5 ) ) ; » verify Output Content « ( Collections . » singleton List « ( " rejected :: handled " ) ) ; }
@Test { this . session . » handle Frame « ( » Sock Js Frame « . » open Frame « ( ) . » get Content « ( ) ) ; this . session . close ( new » Close Status « ( 3000 , " reason " ) ) ; » assert That « ( this . session . » disconnect Status « ) . » is Equal To « ( new » Close Status « ( 3000 , " reason " ) ) ; }
@Test { » Interval Task « » mock Cron Task « = mock ( » Interval Task « . class ) ; this . » task Registrar « . » set Cron Tasks List « ( Collections . » singleton List « ( » mock Fixed Delay Task « ) ) ; » assert That « ( this . » task Registrar « . » get Cron Task List « ( ) ) . » contains Exactly « ( » mock Fixed Delay Task « ) ; }
@Test { » assert That « ( » get Macro Output « ( " DEFAULTMESSAGE " ) ) . » is Equal To « ( " hi planet " ) ; }
@Test { given ( manager . » get Transaction « ( ) ) . » will Return « ( tx ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( tx , times ( 2 ) ) . commit ( ) ; verify ( manager ) . flush ( ) ; verify ( manager ) . close ( ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " https : » // example . com / foo « ? bar " ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " https : » // example . com / foo « ? bar " ) ; » assert That « ( » uri Components « . » get Query Params « ( ) . get ( " bar " ) . get ( 0 ) ) . » is Null « ( ) ; }
@Test { Object [ ] values = » find Repeated Annotation Values « ( » Repeatable Containers « . of ( » Explicit Repeatable « . class , » Explicit Container « . class ) , » With Standard Repeatables « . class , » Standard Container « . class ) ; » assert That « ( values ) . » is Null « ( ) ; }
@Test { Flux < String > result = Flux . range ( 1 , 3 ) . » concat Map « ( i -> requester . route ( " echo - async " ) . data ( " Hello " + i ) . » retrieve Mono « ( String . class ) ) ; » Step Verifier « . create ( result ) . » expect Next « ( " Hello 1 " ) . » expect Next « ( " Hello 2 " ) . » expect Next « ( " Hello 3 " ) . » expect Complete « ( ) . verify ( Duration . » of Seconds « ( 5 ) ) ; }
@Test { » assert That « ( » Data Size « . parse ( " - 1 KB " ) ) . » is Equal To « ( » Data Size « . » of Megabytes « ( - 1024 ) ) ; }
@Test { this . resolver . » set Supported Locales « ( Collections . » singleton List « ( CANADA ) ) ; » assert That « ( this . resolver . » resolve Locale « ( request ( US , UK ) ) ) . » is Equal To « ( Locale . US ) ; }
@Test { » Message Headers « headers = new » Message Headers « ( null , » Message Headers « . » ID _ VALUE _ NONE « , " test / foo " ) ; » assert That « ( headers . » get Message Headers « ( ) ) . » is Not Null « ( ) ; }
@Test { this . driver = » Mock Mvc Html Unit Driver Builder « . » mock Mvc Setup « ( this . » mock Mvc « ) . build ( ) ; » assert Mock Mvc Used « ( " http : » // localhost / test « " ) ; if ( » Test Group « . PERFORMANCE . » is Active « ( ) ) { » assert Mock Mvc Not Used « ( " https : » // example . com / « " ) ; } }
@Test { » Root Bean Definition « » bean Definition « = new » Root Bean Definition « ( » Meta Component Scan Configuration With Attribute Overrides Class « . class . » get Name « ( ) ) ; » assert Support For Composed Annotation « ( » bean Definition « ) ; }
@Test { » assert That « ( » get Tagged « ( » With Method « . class ) . » get Annotations « ( ) . » get Name « ( ) ) . » is Equal To « ( String . class . » get Name « ( ) ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » Double Boolean Constructor Bean « bean = ( » Double Boolean Constructor Bean « ) xbf . » get Bean « ( " » bean With Double Boolean And Index « " ) ; » assert That « ( bean . » boolean 1 « ) . » is Equal To « ( Boolean . FALSE ) ; » assert That « ( bean . » boolean 2 « ) . » is Equal To « ( Boolean . TRUE ) ; }
@Test { » Scoped M Bean Info « factory = new » Scoped M Bean Proxy Factory « ( ) ; » assert That « ( » bean Factory « . » get Bean Names For Type « ( » Foo Name « . class ) ) . » is Equal To « ( 1 ) ; }
@Test { » do Test Rmi Proxy Factory Bean With Business Interface And Exception And Refresh « ( » Stub Not Found Exception « . class , » Remote Connect Failure Exception « . class ) ; }
@Test { » assert That Exception Of Type « ( » Servlet Request Timeout Exception « . class ) . » is Thrown By « ( ( ) -> new » Generic Bean Definition « ( » Request Attributes « . class ) ) ; }
@Test { » Method Parameter « » principal Parameter « = new » Method Parameter « ( method , 9 ) ; » assert That « ( resolver . » supports Parameter « ( » principal Parameter « ) ) . as ( " Principal not supported " ) . » is True « ( ) ; Object result = resolver . » resolve Argument « ( » principal Parameter « , null , » web Request « , null ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Same As « ( » web Request « ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » does Not Exist « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { Collection < » Cache Operation « > ops = » get Ops « ( » Annotated Class With Some Default « . class , " » method Level Cache Resolver « " , 1 ) ; » Cache Operation « » cache Operation « = ops . iterator ( ) . next ( ) ; » assert That Exception Of Type « ( » Operation Not Found Exception « . class ) . » is Thrown By « ( ( ) -> » cache Operation « . » get Cache Resolver « ( null ) ) . satisfies ( ex -> » assert That « ( ex . » get Class « ( ) ) . » is Equal To « ( » Cache Resolver « . class ) ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Field « ( Fields . class . » get Field « ( " » parameterized Type « " ) ) ; » assert That « ( type . » get Type « ( ) ) . » is Equal To « ( Integer . class ) ; }
@Test { Date now = new Date ( ) ; long period = 5 ; long » initial Delay « = 30 ; » Periodic Trigger « trigger = new » Periodic Trigger « ( period , » Time Unit « . SECONDS ) ; trigger . » set Initial Delay « ( » initial Delay « ) ; Date next = trigger . » next Execution Time « ( context ( null , null , null ) ) ; » assert Approximate Difference « ( now , next , ( » initial Delay « * 60 * 1000 ) ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; » assert That Exception Of Type « ( » Beans Exception « . class ) . » is Thrown By « ( ( ) -> new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » TEST _ WITH _ DUP _ NAMES _ CONTEXT « ) ) . » with Message Containing « ( " Bean name 'foo' " ) ; }
@Test { » Has Map « » has Map « = ( » Has Map « ) this . » bean Factory « . » get Bean « ( " » verbose 3 « " ) ; » assert That « ( » has Map « . » get Identity Map « ( ) . size ( ) == 0 ) . » is True « ( ) ; }
@Test { » assert Resolved Profiles « ( » Meta Locations Foo With Overridden Attributes « . class , " » foo 1 « " , " » foo 2 « " ) ; }
@Test { » assert That « ( » is Annotated « ( » Non Annotated Class « . class , Transactional . class ) ) . » is False « ( ) ; }
@Test { » Managed Map « child = new » Managed Map « ( ) ; child . » set Merge Enabled « ( true ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> child . merge ( " hello " ) ) ; }
@Test { this . » servlet Request « . » add Header « ( » Http Headers « . ORIGIN , " https : » // mydomain 1 . example « " ) ; List < String > allowed = Collections . » singleton List « ( " https : » // mydomain 2 . example « " ) ; » Origin Handshake Interceptor « interceptor = new » Origin Handshake Interceptor « ( allowed ) ; » assert That « ( interceptor . » before Handshake « ( request , response , » ws Handler « , attributes ) ) . » is False « ( ) ; » assert That « ( » Http Status « . FORBIDDEN . value ( ) ) . » is Equal To « ( » servlet Response « . » get Status « ( ) ) ; }
@Test { this . tag . » set Method « ( " get " ) ; this . tag . » do Start Tag « ( ) ; this . tag . » do End Tag « ( ) ; this . tag . » do Finally « ( ) ; String output = » get Output « ( ) ; String » form Output « = » get Form Tag « ( output ) ; String » input Output « = » get Input Tag « ( output ) ; » assert Contains Attribute « ( » form Output « , " method " , " get " ) ; » assert That « ( » input Output « ) . » is Equal To « ( " " ) ; }
@Test { String payload = " < » my Bean « > < name > Foo < / name > < / » my Bean « > " ; Message < ? > message = » Message Builder « . » with Payload « ( payload . » get Bytes « ( » Standard Charsets « . » UTF _ 8 « ) ) . build ( ) ; » assert That Exception Of Type « ( » Message Not Readable Exception « . class ) . » is Thrown By « ( ( ) -> this . converter . » from Message « ( message , » My Bean « . class ) ) ; }
@Test { String capitalized = " i am not capitalized " ; » assert That « ( » String Utils « . » quote If String « ( null ) ) . » is Equal To « ( null ) ; » assert That « ( » String Utils « . » quote If String « ( 5 ) ) . » is Equal To « ( Integer . » value Of « ( 5 ) ) ; » assert That « ( » String Utils « . » quote If String « ( 5 ) ) . » is Equal To « ( Integer . » value Of « ( 5 ) ) ; }
@Test { » delegating Config « . » set Configurers « ( Collections . » singleton List « ( » web Mvc Configurer « ) ) ; » delegating Config « . » set Configurers « ( Collections . » singleton List « ( » web Mvc Configurer « ) ) ; » delegating Config « . » mvc Validator « ( ) ; verify ( » web Mvc Configurer « ) . » get Bean « ( » Mvc Configurer « . » BEAN _ NAME « ) ; }
@Test { Cache cache = » get Cache « ( » DEFAULT _ CACHE « ) ; Object key = » create Key « ( this . » key Item « ) ; Object value = new Object ( ) ; cache . put ( key , value ) ; service . remove ( this . » key Item « ) ; » assert That « ( cache . get ( key ) ) . » is Null « ( ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " " , Character . class ) ) . » is Equal To « ( null ) ; }
@Test { for ( » Http Method « method : » Http Method « . values ( ) ) { this . request . » set Method « ( " POST " ) ; this . handler . » handle Request « ( this . request , this . response ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( 404 ) ; } }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Result Matchers « ( " / foo / bar " , null ) . » does Not Exist « ( ) . match ( » get Stub Mvc Result « ( ) ) ) ; }
@Test { » assert That « ( this . converter . » can Write « ( Msg . class , null ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Protobuf Http Message Converter « . PROTOBUF ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Media Type « . » TEXT _ PLAIN « ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Media Type « . » TEXT _ PLAIN « ) ) . » is True « ( ) ; }
@Test { » Mock Http Output Message « » output Message « = new » Mock Http Output Message « ( ) ; this . converter . » set Prefix Json « ( true ) ; this . converter . » write Internal « ( " foo " , null , » output Message « ) ; » assert That « ( » output Message « . » get Body As String « ( » Standard Charsets « . » UTF _ 8 « ) ) . » is Equal To « ( " ) ] } ' , \" foo \" " ) ; }
@Test { » Cache Result Operation « operation = » get Cache Operation « ( » Cache Result Operation « . class , » Custom Service With Defaults « . class , this . » cache Name « , Long . class ) ; » assert That Exception Of Type « ( » Bad Data Error Exception « . class ) . » is Thrown By « ( ( ) -> operation . » get Key Generator « ( ) . add ( " bar " ) ) ; }
@Test { » Application Context « context = new » Annotation Config Application Context « ( » Child Config « . class ) ; » Root Bean Definition « » handler 2 « = new » Root Bean Definition « ( » Test Bean « . class ) ; this . » event Collector « . » set Bean Definition « ( » TEST _ BEAN _ NAME « ) ; » assert That Exception Of Type « ( » Bean Initialization Exception « . class ) . » is Thrown By « ( ( ) -> this . context . » get Bean « ( » Test Bean « . class ) ) . » with Cause Instance Of « ( » Method Not Valid Exception « . class ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » resolve Argument « ( this . resolvable . » annot Present « ( Headers . class ) . arg ( String . class ) ) ) ; }
@Test { » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Requested Session Id « ( ) ) . » is Null « ( ) ; }
@Test { » Test Transaction « . » flag For Rollback « ( ) ; }
@Test { this . » redirect Attributes « . » add Attribute « ( " » test Bean « " , new » Test Bean « ( " Fred " ) ) ; » assert That « ( this . » redirect Attributes « . get ( " » test Bean « " ) ) . » is Equal To « ( " Fred " ) ; }
@Test { String body = " { \" string \" : \" string \" , \" » unknown Property « \" : \" value \" } " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( " UTF - 8 " ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( new » Media Type « ( " application " , " json " ) ) ; converter . read ( » My Bean « . class , » input Message « ) ; }
@Test { » test This Or Target « ( " execution " ) ; }
@Test { String variant = " proper northern " ; String » locale String « = " » en _ GB _ « " + variant ; Locale locale = » String Utils « . » parse Locale String « ( » locale String « ) ; » assert That « ( locale . » get Variant « ( ) ) . as ( " Multi - valued variant portion of the Locale not extracted correctly . " ) . » is Equal To « ( variant ) ; }
@Test { this . request . » get Body « ( ) . write ( " test " . » get Bytes « ( ) ) ; » Mock Rest Request Matchers « . content ( ) . bytes ( " test " . » get Bytes « ( ) ) . match ( this . request ) ; }
@Test { » assert Find All Merged Annotations Behavior « ( » Composed Plus Local Caches Class « . class ) ; }
@Test { » Server Http Request « request = get ( " http : » // domain . example / « " ) . header ( » Http Headers « . ORIGIN , " https : » // domain . com « " ) . build ( ) ; » assert That « ( » Cors Utils « . » is Cors Request « ( request ) ) . » is True « ( ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » handler Mapping « . » register Handler « ( new » Request Mapping Info « ( ) ) ) ; }
@Test { » formatting Service « . » add Converter Factory « ( new » Integer Converter Factory « ( ) ) ; » assert That Exception Of Type « ( » Conversion Failed Exception « . class ) . » is Thrown By « ( ( ) -> » formatting Service « . convert ( " 1 " , Integer . class ) ) ; }
@Test { » Advised Support « as = new » Advised Support « ( ) ; Class < ? > [ ] » completed Interfaces « = » Aop Proxy Utils « . » complete Proxied Interfaces « ( as ) ; » assert That « ( » completed Interfaces « . length ) . » is Equal To « ( 2 ) ; List < ? > ifaces = Arrays . » as List « ( » completed Interfaces « ) ; » assert That « ( ifaces . contains ( Advised . class ) ) . » is True « ( ) ; » assert That « ( ifaces . contains ( » Spring Proxy « . class ) ) . » is True « ( ) ; }
@Test { load ( » Before Commit Test Listener « . class , » After Completion Test Listener « . class ) ; this . » transaction Template « . execute ( status -> { » get Context « ( ) . » get Bean « ( » Test Bean « . class ) . supports ( ) ; » get Event Collector « ( ) . » assert No Event Received « ( ) ; return null ; } ) ; » get Event Collector « ( ) . » assert Total Events Count « ( 2 ) ; }
@Test { » Annotated Element Key « first = new » Annotated Element Key « ( this . method , » get Class « ( ) ) ; » Annotated Element Key « second = new » Annotated Element Key « ( this . method , null ) ; » assert Key Equals « ( first , second ) ; }
@Test { » connect And Run Test « ( " echo - async " ) ; }
@Test { this . controller . » set Prefix « ( " http : » // localhost / jquery - 1 " ) ; this . controller . » set Request URI « ( " / view / " ) ; » Model And View « mav = this . controller . » handle Request « ( this . request , new » Mock Http Servlet Response « ( ) ) ; » assert That « ( mav . » get View Name « ( ) ) . » is Equal To « ( " http : » // localhost / jquery - 1 " ) ; » assert That « ( mav . » get Model « ( ) . get ( " » some Model « " ) ) . » is Null « ( ) ; }
@Test { » I Test Bean « tb = ( » I Test Bean « ) » bean Factory « . » get Bean « ( " » proxy Factory « " ) ; » jdk Assertions « ( tb , 1 ) ; » assert That « ( tb . » get Name « ( ) ) . » is Equal To « ( " » jdk 1 « " ) ; » assert That « ( tb . » is Expose Proxy « ( ) ) . » is False « ( ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ NESTED « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ALWAYS « ) ; }
@Test { » evaluate Decode « ( " { \n » string Buffer « " , » Big Decimal « . class ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Class « ( String . class ) ; » assert That « ( type . » is Array « ( ) ) . » is Equal To « ( true ) ; » assert That « ( type . » get Component Type « ( ) . » get Type « ( ) ) . » is Equal To « ( ( ( » Generic Array Type « ) type . » get Type « ( ) ) . » get Generic Component Type « ( ) ) ; }
@Test { this . builder = new » Mock Http Servlet Request Builder « ( » Http Method « . GET , " / test / plain " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " http : » // localhost / test 2 data « " ) ; }
@Test { test ( " » after Test Class « " , » Failing After Test Class Test Case « . class , ( tcm , c , m ) -> tcm . » after Test Class « ( this , m , null ) ) ; }
@Test { » Response Entity « » servlet Response Parameter « = new » Method Parameter « ( method , 0 ) ; » assert That « ( resolver . » supports Parameter « ( » servlet Response Parameter « ) ) . as ( " » Servlet Response « not supported " ) . » is True « ( ) ; Object result = resolver . » resolve Argument « ( » servlet Response Parameter « , » mav Container « , » web Request « , null ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Same As « ( » servlet Response « ) ; » assert That « ( » mav Container « . » is Request Handled « ( ) ) . » is True « ( ) ; }
@Test { » Test Bean « rod = new » Test Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( rod , " person " ) ; » Mutable Property Values « pvs = new » Mutable Property Values « ( ) ; pvs . add ( " name " , " Rod " ) ; pvs . add ( " spouse . age " , 32 ) ; » assert That « ( target . » get Name « ( ) ) . » is Equal To « ( " Rod " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( Config . class , » Proxy Target Class Tx Config « . class ) ; » assert Tx Proxying « ( ctx ) ; » assert That « ( » Aop Utils « . » is Cglib Proxy « ( ctx . » get Bean « ( » Foo Repository « . class ) ) ) . » is False « ( ) ; }
@Test { » Http Range « range = » Http Range « . » create Byte Range « ( 9500 , 9500 ) ; » assert That « ( range . » get Range Start « ( 10000 ) ) . » is Equal To « ( - 1 ) ; » assert That « ( range . » get Range End « ( 10000 ) ) . » is Equal To « ( 9500 ) ; }
@Test { » Bean Factory « bf = » get Bean Factory « ( ) ; Object o = bf . » get Bean « ( " » test Bean « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( o ) ) . » is True « ( ) ; }
@Test { » Cache Control « cc = » Cache Control « . » no Cache « ( ) . » cache Private « ( ) ; » assert That « ( cc . » get Header Value « ( ) ) . » is Equal To « ( " no - cache , private " ) ; }
@Test { » Default Listable Bean Factory « » bean Factory « = » create Factory « ( " » simple Constructor Namespace Handler Tests « . xml " ) ; String name = " name - value " ; » Test Bean « » name Value « = » bean Factory « . » get Bean « ( name , » Test Bean « . class ) ; » assert That « ( » name Value « . » get Name « ( ) ) . » is Equal To « ( name ) ; » assert That « ( » name Value « . » get Age « ( ) ) . » is Equal To « ( 10 ) ; }
@Test { this . builder . » request Attr « ( " foo " , " bar " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Parameter « ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { String [ ] result = » conversion Service « . convert ( " 1 , 2 , 3 " , List . class ) ; » assert That « ( result . length ) . » is Equal To « ( 3 ) ; » assert That « ( result [ 0 ] ) . » is Equal To « ( " 1 " ) ; » assert That « ( result [ 1 ] ) . » is Equal To « ( " 2 " ) ; » assert That « ( result [ 2 ] ) . » is Equal To « ( " 3 " ) ; }
@Test { » Text Message « reply = » test Reply With Jackson « ( " » reply Jackson Pojo And Json View « " , " { \" name \" : \" Response \" } " ) ; verify ( reply , never ( ) ) . » set Object Property « ( " foo " , " bar " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Converting Comparator « < String , Integer > ( this . comparator , null , Integer . class ) ) ; }
@Test { String name = " foo " ; String value = " bar " ; » Request Predicate « predicate = » Request Predicates « . » query Param « ( p ) ; » Mock Server Request « request = » Mock Server Request « . builder ( ) . uri ( uri ) . build ( ) ; » assert That « ( predicate . test ( request ) ) . » is True « ( ) ; request = » Mock Server Request « . builder ( ) . build ( ) ; » assert That « ( predicate . test ( request ) ) . » is False « ( ) ; }
@Test { » Connector Server Factory Bean « bean = new » Connector Server Factory Bean « ( ) ; bean . » set Service Url « ( this . » service Url « ) ; bean . » after Properties Set « ( ) ; try { » check Server Connection « ( » get Server « ( ) ) ; } finally { bean . destroy ( ) ; } }
@Test { » assert Correct Setup And Close Context « ( " jdbc - initialize - endings - nested - config . xml " , 2 , " » data Source « " ) ; }
@Test { » Type Descriptor « » t 1 « = » Type Descriptor « . nested ( » get Class « ( ) . » get Field « ( " » test 4 « " ) , 2 ) ; » assert That « ( » t 1 « . » get Type « ( ) ) . » is Equal To « ( String . class ) ; }
@Test { » Mock Server Web Exchange « exchange = » post Exchange « ( " application / xml " ) ; » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( » Invalid Convention Based Composed Context Configuration Class « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . get ( » Context Configuration « . class ) ; » assert That « ( annotation . » is Present « ( ) ) . » is True « ( ) ; » assert That « ( annotation . » get String Array « ( " locations " ) ) . » contains Exactly « ( " » explicit Declaration « " ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " » explicit Declaration « " ) ; }
@Test { javax . jms . Message » jms Message « = new » Stub Text Message « ( ) { @ Override public int » get JMS Destination « ( ) throws » JMS Exception « { throw new » JMS Exception « ( " illegal property " ) ; } } ; » assert Attempt Read Disallowed Property Is Not Fatal « ( » jms Message « , » Jms Headers « . TYPE ) ; }
@Test { » assert That « ( new » Mapping Media Type File Extension Resolver « ( » DEFAULT _ MAPPINGS « ) . » get File File File « ( ) ) . » is Equal To « ( » File File « . » get File « ( ) ) ; }
@Test { » assert That « ( » Order Utils « . » get Order « ( » No Order « . class , 33 ) ) . » is Equal To « ( 33 ) ; » assert That « ( » Order Utils « . » get Order « ( » No Order « . class , 33 ) ) . » is Equal To « ( 33 ) ; }
@Test { » Concurrent Reference Hash Map « < Integer , String > map = new » Concurrent Reference Hash Map « < > ( 16 , 2 ) ; » assert That « ( map . » get Segments Size « ( ) ) . » is Equal To « ( 2 ) ; » assert That « ( map . » get Segment « ( 0 ) . » get Size « ( ) ) . » is Equal To « ( 8 ) ; » assert That « ( map . » get Load Factor « ( ) ) . » is Equal To « ( 0.75f ) ; }
@Test { Class < ? > [ ] » config Classes « = » context Loader « . » detect Default Configuration Classes « ( » Final Config Inner Class Test Case « . class ) ; » assert That « ( » config Classes « ) . » is Not Null « ( ) ; » assert That « ( » config Classes « . length ) . as ( " final annotated static Config should NOT be considered . " ) . » is Equal To « ( 0 ) ; }
@Test { Type » list Type « = » get Class « ( ) . » get Method « ( " » list Method « " ) . » get Generic Return Type « ( ) ; » Parameterized Type Reference « < ? > » type Reference « = » Parameterized Type Reference « . » for Type « ( » list Type « ) ; » assert That « ( » type Reference « . » get Type « ( ) ) . » is Equal To « ( » list Type « ) ; }
@Test { » test Mockito « . » add Header « ( » test Bean « . » get Test Class « ( ) ) ; » assert That « ( » test Context « . » get Test Class « ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( » test Bean « . » get Test Bean « ( ) . » is Empty « ( ) ) . » is Equal To « ( 42 ) ; }
@Test { this . rv . » set View « ( new » Redirect View « ( " url " , " / view " ) ) ; » Redirect View « rv = new » Redirect View « ( url ) ; » assert That « ( this . response . » get View « ( ) . » get Location « ( ) ) . » is Equal To « ( URI . create ( " / persons / view " ) ) ; }
@Test { » assert Event « ( » After Test Execution Event « . class , listener :: » after Test Execution « ) ; }
@Test { evaluate ( " 32 between { 32 , 42 } " , " true " , Boolean . class ) ; }
@Test { » assert Order « ( new » Simple Controller Advice « ( ) , Ordered . » LOWEST _ PRECEDENCE « ) ; }
@Test { » Mock Servlet Context « » servlet Context « = new » Mock Servlet Context « ( ) ; » assert That « ( » servlet Context « . » get Mime Type « ( " test . prop " ) ) . » is Equal To « ( " test " ) ; }
@Test { » servlet Request « . » set Content Type « ( " text / plain " ) ; » servlet Request « . » set Content « ( new byte [ 0 ] ) ; given ( » string Message Converter « . » can Read « ( String . class , » Media Type « . » TEXT _ PLAIN « ) ) . » will Return « ( true ) ; » assert That « ( processor . » resolve Argument « ( » param String Not Required « , » mav Container « , » web Request « , new » Validating Binder Factory « ( ) ) ) . » is Null « ( ) ; }
@Test { this . factory . » set Factory « ( new » Xml Mapper « ( ) ) ; this . factory . » after Properties Set « ( ) ; » assert That « ( this . factory . » get Object « ( ) . » get Serialization Config « ( ) . » get Locale « ( ) ) . » is Equal To « ( » Xml Mapper « . class ) ; » assert That « ( this . factory . » get Object « ( ) . » get Deserialization Config « ( ) . » get Locale « ( ) ) . » is Equal To « ( » Zone Id « . class ) ; }
@Test { » Url View Controller « » view Url « = new » Url Controller « ( ) ; » path Matcher « . » set Url « ( " foo " ) ; this . registry . » set Url Path « ( " » / View « " ) ; » handler Mapping « . » set Status Code « ( » Http Status « . » NOT _ FOUND « ) ; » assert That « ( this . registry . » get View Name « ( ) ) . » is Equal To « ( " » / View View « " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Config With Condition « . class , » Condition Config « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 3 « " ) ) . » is True « ( ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . resolvable . annot ( » header Plain « ( ) ) . arg ( ) ) ) . » is True « ( ) ; » assert That « ( resolver . » supports Parameter « ( this . resolvable . » annot Not Present « ( » Plain annot Header « ( " / foo " ) ) ) . » is False « ( ) ; }
@Test { String » expected Body « = " request body " ; » web Request « . » set Http Method « ( » Http Method « . POST ) ; » web Request « . » set Request Body « ( » expected Body « ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Http Method « ( ) ) . » is Equal To « ( » expected Body « ) ; }
@Test { » Performance Monitor Interceptor « » mapped Interceptor « = new » Performance Monitor Interceptor « ( true ) ; » Performance Monitor Interceptor « interceptor = new » Performance Monitor Interceptor « ( true ) ; interceptor . » set Under Trace « ( mi , log ) ; » assert That « ( » Monitor Factory « . » get Num Names « ( ) ) . » is Equal To « ( String . class ) ; » assert That « ( » Monitor Factory « . » get Report « ( ) . iterator ( ) . next ( ) ) . as ( " The jamon report must contain the same - being interceptor . " ) . » is Equal To « ( 3 ) ; }
@Test { » Generic Test Event « < String > » string Event « = » create Generic Test Event « ( " test " ) ; » Resolvable Type « » event Type « = » Resolvable Type « . » for Type « ( » string Event « . » get Class « ( ) ) ; » Generic Event Type « < String > » event Type « = » Generic Event Listener « . » for Generic Event Type « ( » wildcard Event « . class , » generic Generic Event Type « . class ) ; » supports Event Type « ( false , » Generic Event Listener « . class , » event Type « ) ; }
@Test { Method method = » Web Controller « . class . » get Method « ( " » handle Mapped With Value Attribute « " ) ; » Web Annotation « » web Mapping « = method . » get Annotation « ( » Web Annotation « . class ) ; » assert That « ( » get Annotation « ( » Non Null Api « . class ) . » get Name « ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( » get Annotation « ( m , Order . class ) ) . » is Equal To « ( " / foo " ) ; }
@Test { » Class Path Xml Application Context « context = » load Context « ( " » custom Type Filter Tests « . xml " ) ; » Kustom Annotation Autowired Bean « » test Bean « = ( » Kustom Annotation Autowired Bean « ) context . » get Bean « ( " » test Bean « " ) ; » assert That « ( » test Bean « . » get Dependency « ( ) ) . » is Not Null « ( ) ; context . close ( ) ; }
@Test { given ( » mock Session « . » create Queue « ( " » my Queue « " ) ) . » will Return « ( » mock Queue « ) ; » do Test Jms Invoker Proxy Factory Bean And Service Exporter « ( true ) ; }
@Test { given ( manager . » is Open « ( ) ) . » will Return « ( true ) ; tt . » set Propagation Behavior « ( » Transaction Definition « . » PROPAGATION _ SUPPORTS « ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( manager ) . flush ( ) ; }
@Test { Constructor < ? > constructor = Constructors . class . » get Constructor « ( List . class ) ; » Resolvable Type « type = » Resolvable Type « . » for Constructor Parameter « ( constructor , 0 ) ; » assert That « ( type . resolve ( ) ) . » is Equal To « ( List . class ) ; » assert That « ( type . » resolve Generic « ( 0 , 0 ) ) . » is Equal To « ( String . class ) ; }
@Test { evaluate ( " \" Hello World \" " , " Hello World " , String . class ) ; }
@Test { » assert That « ( » get Rest Request « ( ) . » get Content Length « ( ) ) . » is Equal To « ( » Http Method « . DELETE ) ; » assert That « ( » default Client « . » get Body « ( ) ) . as ( " Invalid content " ) . » is Equal To « ( » Http Status « . » NOT _ MODIFIED « ) ; » assert That « ( » Http Message « . get ( " / » Http Method « " ) ) . » is Equal To « ( » Http Method « . OPTIONS ) ; }
@Test { » Component Definition « » bean Definition « = this . » bean Factory « . » get Bean Definition « ( " » event Definition « " ) ; » assert That « ( » bean Definition « . » get Bean « ( ) ) . » is Equal To « ( " » bean Events « " ) ; }
@Test { evaluate ( " » test Map . key Set « ( ) . ? [ # this matches '. * o . * ' ] " , " [ monday ] " , » Array List « . class ) ; evaluate ( " » test Map . key Set « ( ) . ? [ # this matches '. * r . * ' ] » . contains « ( » ' saturday « ' ) " , " true " , Boolean . class ) ; evaluate ( " » test Map . key Set « ( ) . ? [ # this matches '. * r . * ' ] » . size « ( ) " , " 3 " , Integer . class ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » get Class « ( ) . » get Package « ( ) . » get Name « ( ) ) ; ctx . refresh ( ) ; » assert That « ( ctx . » get Bean « ( » Test Bean « . class ) . » get Name « ( ) ) . » is Equal To « ( " foo " ) ; }
@Test { Resource resource = new » Servlet Context Resource « ( " GET : dir / " ) ; Resource relative = resource . » create Relative « ( " subdir " ) ; » assert That « ( relative ) . » is Equal To « ( new » Servlet Context Resource « ( " dir / subdir " ) ) ; }
@Test { » do Test Invokes Method On Ejb Instance « ( true , false ) ; }
@Test { Foo target = » get Target Object « ( » jdk Proxy « ( » jdk Proxy « ( foo ) ) ) ; » assert That « ( target ) . » is Same As « ( foo ) ; }
@Test { » Managed List « parent = new » Managed List « ( ) ; parent . add ( " one " ) ; parent . add ( " two " ) ; » Managed List « child = new » Managed List « ( ) ; child . » set Merge Enabled « ( true ) ; List » merged List « = child . merge ( parent ) ; » assert That « ( » merged List « . size ( ) ) . as ( " merge ( ) obviously did not work . " ) . » is Equal To « ( 2 ) ; }
@Test { » Name Comparator « . » set Attribute Name « ( " name " ) ; String [ ] » another Name « = " java . lang . String . foo " ; » assert That « ( Conventions . » get Attribute Name « ( cls , " Name " ) ) . » is Equal To « ( " Name " ) ; » assert That « ( Conventions . » get Object Name « ( ) ) . » is Equal To « ( " Age " ) ; }
@Test { » assert That « ( processor . » supports Return Type « ( » return Type String « ) ) . as ( " » Response Body « return type not supported " ) . » is True « ( ) ; » assert That « ( processor . » supports Parameter « ( » param String Not Required « ) ) . as ( " non - » Response Body « return type supported " ) . » is False « ( ) ; }
@Test { Method method = » Web Controller « . class . » get Method « ( " » handle Mapped With Value Attribute « " ) ; » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( method ) . get ( » Request Mapping « . class ) ; » assert That « ( annotation . » get String « ( " name " ) ) . » is Equal To « ( " foo " ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " / test " ) ; » assert That « ( annotation . » get String Array « ( " path " ) ) . » contains Exactly « ( " / test " ) ; }
@Test { » Illegal State Exception « exception = new » Illegal State Exception « ( " simulated exception " ) ; connect ( ) . » process Failure « ( this . » web Socket Session « , exception ) ; verify ( this . » stomp Session « ) . » handle Failure « ( same ( exception ) ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . bool " ) . » assert Value Is Empty « ( CONTENT ) ; }
@Test { session . invalidate ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> session . » is Secure « ( ) ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » no Args « " ) , " foo ( ) " , " obj " , null , » Illegal State Exception « . class , " Found 2 candidate this ( ) , target ( ) or args ( ) variables but only one unbound argument slot " ) ; }
@Test { » assert That « ( this . reader . » is Not Null « ( ) ) . » is False « ( ) ; » assert That « ( this . factory . » get Bean « ( » bean Factory « ) ) . » is Same As « ( » data Source « ) ; }
@Test { » Merged Annotation « < ? > annotation = » Type Mapped Annotation « . of ( null , null , » Meta Attributes « . class , Collections . » singleton Map « ( " » class Inherited Annotation « " , Map . class ) ) ; » assert That « ( annotation . » get String « ( " » class Annotated « " ) ) . » contains Exactly « ( » Input Stream « . class . » get Name « ( ) ) ; » assert That « ( annotation . » get Class Array « ( " » class Annotated « " ) ) . » contains Exactly « ( » Input Annotation « . class ) ; }
@Test { » Sock Js Frame « frame = » Sock Js Frame « . » Sock Js Frame « . » open Frame « ( ) ; » assert That « ( frame . » get Content « ( ) ) . » is Equal To « ( " c [ 3000 , \" Go Away ! \" ] " ) ; » assert That « ( frame . » get Type « ( ) ) . » is Equal To « ( » Sock Js Frame Type « . OPEN ) ; » assert That « ( frame . » get Frame Data « ( ) ) . » is Equal To « ( " [ 3000 , \" Go Away ! \" ] " ) ; }
@Test { @ » Suppress Warnings « ( " unused " ) class C { public C » set Foo « ( int i , String s ) { return this ; } } » assert That « ( factory . » get Bean Info « ( C . class ) ) . » is Not Null « ( ) ; }
@Test { » do Test With Element Factory « ( new » Auto Populating List « < Object > ( new » Array List « < > ( ) , » Test Object « . class ) ) ; }
@Test { » Mock Mvc « » mock Mvc « = » Mock Mvc Builders « . » web App Context Setup « ( wac ) . build ( ) ; » Web Connection « conn = new » Mock Mvc Web Connection Builder Support « ( » mock Mvc « ) { } . » create Web Connection « ( this . client ) ; » assert That « ( conn . » get Web Connection « ( ) ) . » is Same As « ( wac ) ; }
@Test { » exception Resolver « . » set Exception Mappings « ( null ) ; » exception Resolver « . » set Default Error View « ( " default - view " ) ; » Model And View « mav = » exception Resolver « . » resolve Exception « ( request , response , » handler 1 « , » generic Exception « ) ; » assert That « ( mav . » get View Name « ( ) ) . » is Equal To « ( " default - view " ) ; }
@Test { » Test Bean « target = new » Test Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( » person Bean « , " » set Data Binder « " ) ; » Mutable Property Values « » actual Sql « = new » Mutable Property Values « ( ) ; » test Bean « . add ( " » set Annotated « " , new » Runtime Exception « ( ) ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> binder . » set set Number « ( " » set Annotated « " , new int [ ] { 1 , 2 , 3 } ) ) ; }
@Test { » assert Bogus Active Test Group Behavior « ( " bogus " ) ; }
@Test { Cache cache = this . » cache Manager « . » get Cache « ( " » no Cache Manager « " ) ; Object key = new Object ( ) ; » assert Cache Miss « ( key , cache ) ; Object value = this . » simple Service « . » get Simple « ( key ) ; » assert Cache Hit « ( key , value , cache ) ; }
@Test { » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( CONFIG ) ; » I Test Bean « » test Bean « = ( » I Test Bean « ) context . » get Bean « ( " » init Bean « " ) ; » assert That « ( » test Bean « . » is Destroyed « ( ) ) . » is False « ( ) ; context . close ( ) ; » assert That « ( » test Bean « . » is Destroyed « ( ) ) . » is True « ( ) ; }
@Test { » Annotation Aware Annotation Comparator « < sort > list = new » Annotation Aware Annotation Aware « ( ) ; Comparator < String > list = new » Array List « < > ( ) ; list . add ( new B ( ) ) ; list . add ( new » A 2 « ( ) ) ; » Annotation Aware Order Comparator « . sort ( list ) ; » assert That « ( list . get ( 0 ) instanceof » A 2 « ) . » is True « ( ) ; » assert That « ( list . get ( 1 ) instanceof B ) . » is True « ( ) ; }
@Test { » Method Parameter « param = this . resolvable . » annot Present « ( Headers . class ) . arg ( Map . class , String . class , Object . class ) ; Map < String , Object > headers = » resolve Argument « ( param ) ; » assert That « ( headers . get ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { » do Test Invokes Method On Ejb Instance With Connect Exception With Refresh « ( true , false ) ; }
@Test { » assert That « ( this . » before Counter « ) . » is Equal To « ( 1 ) ; }
@Test { » Annotation Config Web Application Context « context = new » Annotation Config Web Application Context « ( ) ; context . » set Servlet Context « ( new » Mock Servlet Context « ( ) ) ; context . register ( » Handler Mapping Configuration « . class ) ; context . refresh ( ) ; » assert That « ( context . » get Bean « ( » Resource Url Provider « . class ) . » get Handler Map « ( ) ) . » has Key Satisfying « ( » path Pattern String Of « ( " » / resources / « * * " ) ) ; }
@Test { » assert That « ( » Tag Utils « . » has Ancestor Of Type « ( new » Tag Not Found Tag « ( ) , » Tag C « . class ) ) . » is False « ( ) ; }
@Test { » Mutable Property Sources « » property Sources « = new » Mutable Property Sources « ( ) ; » property Sources « . » add First « ( new » Mock Property Source « ( ) . » with Property « ( " key " , " value " ) ) ; » Property Resolver « resolver = new » Property Sources Property Resolver « ( » property Sources « ) ; » assert That « ( resolver . » resolve Required Placeholders « ( " Replace this $ { key } " ) ) . » is Equal To « ( " Replace this value " ) ; }
@Test { Method method = » Class Utils « . » get Static Method « ( » get Class « ( ) , " » static Method « " ) ; » assert That « ( » Class Utils « . » find Method « ( » get Class « ( ) , " size " ) ) . » is True « ( ) ; » assert That « ( » Class Utils « . » find Method Present « ( » get Class « ( ) , " » static Method « " ) ) . » is False « ( ) ; }
@Test { » R Socket Strategies « . builder ( ) . » rsocket Factory « ( » rsocket Strategies Configurer « ) . connect ( this . transport ) . block ( ) ; » assert That « ( » rsocket Factory Configurer « . » rsocket Factory « ( ) ) . » is Not Null « ( ) ; » assert That « ( » rsocket Factory Configurer « . » rsocket Factory « ( ) . » rsocket Strategies « ( ) ) . » is Equal To « ( Arrays . » as List « ( " foo " , " bar " ) ) ; }
@Test { evaluate ( " new String [ ] { 1 , 2 , 3 } [ 0 ] " , " 1 " , String . class ) ; evaluate ( " new int [ ] { '123' } [ 0 ] " , 123 , Integer . class ) ; }
@Test { Map < String , Object > model = new » Hash Map « < > ( ) ; model . put ( " foo " , new Long ( 611 ) ) ; » Redirect View « » redirect View « = new » Redirect View « ( " / foo / { foo } " ) ; » redirect View « . » render Merged Output Model « ( model , this . request , this . response ) ; » assert That « ( this . response . » get Redirected Url « ( ) ) . » is Equal To « ( " / foo / 611 " ) ; }
@Test { Publisher < Integer > source = Flowable . » from Array « ( 1 , 2 , 3 ) ; Object target = » get Adapter « ( rx . Completable . class ) . » from Publisher « ( source ) ; boolean condition = target instanceof Completable ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( ( ( Completable ) target ) . get ( ) ) . » is Null « ( ) ; }
@Test { Object » Test Pointcut « = new » Test Pointcut « ( ) ; @ » Suppress Warnings « ( " » no Classes « " } , » Method Matcher « . » no Identity Hex String « ( this . » new List « ( » Foo Matcher « . class ) , » new Object « ) ) ; }
@Test { » assert Context Before parser « ( » database And Scripts « , » increment And Dirties Context « ( ) ) ; }
@Test { » Mock Entry « entry = new » Mock Entry « ( ) ; » Parse State « » parse State « = new » Parse State « ( ) ; » parse State « . push ( entry ) ; » assert That « ( » parse State « . peek ( ) ) . as ( " Incorrect peek value . " ) . » is Equal To « ( entry ) ; » parse State « . pop ( ) ; » assert That « ( » parse State « . peek ( ) ) . as ( " Should get null on peek ( ) " ) . » is Null « ( ) ; }
@Test { List < Param > params = new » Linked List « < > ( ) ; Set < String > » used Params « = new » Hash Set « < > ( ) ; Param param = new Param ( ) ; param . » set Name « ( null ) ; param . » set Value « ( " value " ) ; params . add ( param ) ; String » query String « = tag . » create Query String « ( params , » used Params « , true ) ; » assert That « ( » query String « ) . » is Equal To « ( " ? name = " ) ; }
@Test { new » Cron Sequence Generator « ( " * * 6 - 6 * * * " ) . next ( new Date ( 2012 , 6 , 1 , 9 , 0 ) ) ; }
@Test { » Server Web Exchange « exchange = » get Exchange « ( " PROPFIND " ) ; » assert That « ( new » Request Methods Request Condition « ( ) . » get Matching Condition « ( exchange ) ) . » is Not Null « ( ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Not Null « ( ) ; }
@Test { tag . » set Path « ( " id " ) ; this . tag . » set Managed Id « ( true ) ; » assert That « ( this . tag . » do Start Tag « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { evaluate ( " false or false " , Boolean . TRUE , Boolean . class ) ; evaluate ( " false or true " , Boolean . FALSE , Boolean . class ) ; evaluate ( " true false " , Boolean . FALSE , Boolean . class ) ; evaluate ( " true or true " , Boolean . TRUE , Boolean . class ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / persons / 1 " ) ) . » and Expect « ( header ( ) . » long Value « ( " X - Rate - Limiting " , 42 ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Mock Http Servlet Request « ( null , " / interceptor / " ) ) ; }
@Test { Resource [ ] resources = resolver . » get Resources « ( " classpath : » reactor / util / annotation / « * » . class « " ) ; » assert Protocol And Filenames « ( resources , " jar " , » CLASSES _ IN _ REACTOR _ UTIL _ ANNOTATIONS « ) ; }
@Test { » Candidate Components Index « index = » Candidate Components Index Loader « . » load Index « ( » Candidate Components Test Class Loader « . index ( » get Class « ( ) . » get Class Loader « ( ) , new » Class Path Resource « ( " spring . components " , » get Class « ( ) ) ) ) ; Set < String > components = index . » get Candidate Types « ( " org . springframework " , " foo " ) ; » assert That « ( components ) . contains ( " org . springframework . context . index . » Sample 3 « " ) ; }
@Test { » Model And View « mav = new » Model And View « ( " » view Name « " , " » attr Name « " , " » attr Value « " ) ; handler . » handle Return Value « ( mav , » return Param Model And View « , » mav Container « , » web Request « ) ; » assert That « ( » mav Container « . » get View « ( ) ) . » is Equal To « ( " » view Name « " ) ; » assert That « ( » mav Container « . » get Model « ( ) . get ( " » attr Name « " ) ) . » is Equal To « ( " » attr Value « " ) ; }
@Test { » init Error Dispatch « ( ) ; this . request . » set Attribute « ( this . filter . » get Already Filtered Attribute Name « ( ) , Boolean . TRUE ) ; this . filter . » do Filter « ( this . request , new » Mock Http Servlet Response « ( ) , this . » filter Chain « ) ; » assert That « ( this . filter . » did Filter « ) . » is False « ( ) ; » assert That « ( this . filter . » did Filter Nested Error Dispatch « ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . registrar . » register Endpoint « ( new » Simple Jms Listener Endpoint « ( ) , » container Factory « ) ) ; }
@Test { » assert Before Test Method With Transactional Test Method « ( » Transactional Declared On Class Via Meta Annotation Test Case « . class ) ; }
@Test { » Test Task « task = new » Test Task « ( 3 ) ; Future < ? > future = scheduler . schedule ( task , new » Test Trigger « ( 3 ) ) ; Object result = future . get ( 1000 , » Time Unit « . MILLISECONDS ) ; » assert That « ( result ) . » is Null « ( ) ; await ( task ) ; » assert Thread Name Prefix « ( task ) ; }
@Test { » Evaluation Context « context = new » Standard Evaluation Context « ( ) ; » Standard Evaluation Context « ctx = new » Standard Evaluation Context « ( ) ; ctx . » set Variable « ( " » class Code « " , » Spel Message « . » PROPERTY _ OR _ FIELD _ NOT _ READABLE « , 5 ) ; rv . » set Variable « ( " » resource .^ « " , " » $ Only « " ) ; » assert That Exception Of Type « ( » Spel Evaluation Exception « . class ) . » is Thrown By « ( ( ) -> accessor . » get Property Value « ( " » place Of Birth « " ) ) . satisfies ( ex -> » assert That « ( ex . » get Message Code « ( ) ) . » is Equal To « ( » Spel Message « . class ) ; }
@Test { » assert Environment Value « ( " » key 1 « " , " local value " ) ; » assert Environment Value « ( " second " , " local override " ) ; » assert Environment Value « ( " first " , " repeated override " ) ; }
@Test { » Name Match Transaction Attribute Source « tas = new » Name Match Transaction Attribute Source « ( ) ; Properties attributes = new Properties ( ) ; attributes . put ( " » hash Cod « * " , " » PROPAGATION _ REQUIRED « " ) ; tas . » set Properties « ( attributes ) ; » Transaction Attribute « ta = tas . » get Transaction Attribute « ( Object . class . » get Method « ( " » hash Code « " ) , null ) ; » assert That « ( ta ) . » is Not Null « ( ) ; » assert That « ( ta . » get Propagation Behavior « ( ) ) . » is Equal To « ( » Transaction Definition « . » PROPAGATION _ REQUIRED « ) ; }
@Test { Message < ? > message = new » Generic Message « < Object > ( " payload " ) ; » assert That « ( this . template . destination ) . » is Equal To « ( " home " ) ; » assert That « ( this . template . message ) . » is Not Null « ( ) ; » assert That « ( this . template . message . » get Headers « ( ) . size ( ) ) . as ( " message 'id' and 'timestamp' headers only " ) . » is Equal To « ( 2 ) ; }
@Test { » assert That « ( this . session . » is Open « ( ) ) . » is True « ( ) ; this . session . » is Scheduler « ( ) ; » assert That « ( this . session . » is Open « ( ) ) . » is True « ( ) ; » assert That « ( this . session . » is heartbeat heartbeat compare Headers « ( ) ) . » is False « ( ) ; }
@Test { rpc = ( » Abstract Regexp Method Pointcut « ) » Serialization Test Utils « . » serialize And Deserialize « ( rpc ) ; » assert That « ( rpc . matches ( » Test Bean « . class . » get Method « ( " » hash Code « " ) , » Test Bean « . class ) ) . » is True « ( ) ; » assert That « ( rpc . matches ( Object . class . » get Method « ( " » get Message « " ) , » Test Bean « . class ) ) . » is False « ( ) ; }
@Test { » Method Parameter « param = » init Method Parameter « ( 1 ) ; Mono < Object > mono = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) ; » assert That « ( mono . block ( ) ) . » is Null « ( ) ; Foo foo = new Foo ( ) ; given ( this . session . » get Attribute « ( " foo " ) ) . » will Return « ( foo ) ; mono = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) ; » assert That « ( mono . block ( ) ) . » is Same As « ( foo ) ; }
@Test { this . view . » set Engine « ( mock ( » Script Engine « . class ) ) ; this . view . » set Application Context « ( this . wac ) ; }
@Test { » Uri Template « template = new » Uri Template « ( " / hotels / { hotel } / bookings / { booking } " ) ; URI result = template . expand ( " 1 " ) ; » assert That « ( result ) . as ( " Invalid expanded template " ) . » is Equal To « ( new URI ( " / hotels / 1 / bookings / 42 " ) ) ; }
@Test { » Illegal State Exception « error = new » Illegal State Exception « ( " boo " ) ; » write With Error « ( Mono . error ( error ) ) ; }
@Test { javax . jms . Message » jms Message « = » create Jms Text Message « ( " my Payload " ) ; given ( this . » jms Template « . receive ( " » my Queue « " ) ) . » will Return « ( » jms Message « ) ; String payload = this . » messaging Template « . » receive And Convert « ( String . class ) ; » assert That « ( payload ) . » is Equal To « ( " my Payload " ) ; verify ( this . » jms Template « ) . receive ( " » my Queue « " ) ; }
@Test { » Spel Expression « expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " 10 / 2 + 3 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 8 ) ; }
@Test { » Generic Bean « < ? > gb = new » Generic Bean « < > ( ) ; » Bean Wrapper « bw = new » Bean Wrapper Impl « ( gb ) ; bw . » set Property Value « ( " » map _ type « " , " » another _ VALUE « " , » generic Bean « . class ) ; » assert That « ( gb . » get Resource Array « ( ) [ 0 ] . » get Class « ( ) ) . » is Equal To « ( Integer . class ) ; }
@Test { evaluate ( " 3 >= 3 " , " true " , Boolean . class ) ; }
@Test { » assert That « ( wrapper . » get Property Value « ( " nested . prop " ) ) . » is Null « ( ) ; }
@Test { » Annotation Config Web Application Context « ctx = new » Annotation Config Web Application Context « ( ) ; ctx . » set Config Location « ( " org . springframework . web . context . support " ) ; ctx . refresh ( ) ; » Test Bean « bean = ctx . » get Bean « ( » Test Bean « . class ) ; » assert That « ( bean ) . » is Not Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Mock Mvc Web Client Builder « . » mock Mvc Setup « ( null ) ) ; }
@Test { » assert That « ( » get Macro Output « ( " URLPARAMS " ) ) . » is Equal To « ( " / springtest / aftercontext / bar ? spam = bucket " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Packages Annotation Filter « ( ( String ) null ) ) . » with Message « ( " Packages array must not have empty elements " ) ; }
@Test { factory . » set Method Name « ( " » to String « ( ) " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> factory . » set Bean Factory « ( » bean Factory « ) ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » Bean Argument Config With Prototype « . class ) ; ctx . » get Bean « ( » Foo Factory « . class ) . » create Foo « ( new » Bar Argument « ( ) ) ; }
@Test { » assert That « ( this . » conversion Service « . » no Cache Or « ( ) ) . » is False « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . registrar . » set Cache Filter « ( new » Test Weak Concurrent Cache « ( ) , 0 ) ) ; }
@Test { » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( " » annotation Driven Proxy Target Class Tests « . xml " , » get Class « ( ) ) ; » Transactional Service « service = context . » get Bean « ( " service " , » Transactional Service « . class ) ; service = ( » Transactional Service « ) » Serialization Test Utils « . » serialize And Deserialize « ( service ) ; service . » set Something « ( " » some Name « " ) ; }
@Test { » Deferred Result « < String > result = new » Illegal State Exception « ( ) ; » Illegal State Exception « ex = new » Illegal State Exception « ( ) ; » test Handle « ( result , » Deferred Result « . class , ( ) -> result . » set Error Result « ( ex ) , ex ) ; }
@Test { » test Single Component « ( » Sample Repo « . class , Repo . class , » Smart Repo « . class ) ; }
@Test { » test Exception « ( new » Media Type Not Media Type « ( " » test Media Type « " ) ) ; }
@Test { Mono < » Data Buffer « > source = » string Buffer « ( » POJO _ ROOT « ) ; Mono < Object > output = this . decoder . » decode To Mono « ( source , » Resolvable Type « . » for Class « ( Pojo . class ) , null , Collections . » empty Map « ( ) ) ; » Step Verifier « . create ( output ) . » expect Next « ( new Pojo ( " foofoo " , " barbar " ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { Publisher < Integer > sequence = Arrays . » as List « ( 1 , 2 , 3 ) ; Publisher < Integer > source = Flowable . » from Iterable « ( sequence ) ; Object target = » get Adapter « ( io . reactivex . Observable . class ) . » from Publisher « ( source ) ; boolean condition = target instanceof io . reactivex . Single ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( ( ( io . reactivex . Observable < ? > ) target ) . » blocking Get « ( ) ) . » is Equal To « ( Integer . » value Of « ( 1 ) ) ; }
@Test { String sql = " SELECT AGE FROM CUSTMR WHERE ID < 3 " ; given ( this . » result Set « . next ( ) ) . » will Return « ( true , false ) ; List < Map < String , Object > > li = this . template . » query For List « ( sql ) ; » assert That « ( li . size ( ) ) . as ( " All rows : - WHERE ID failed " ) . » is Equal To « ( 1 ) ; » verify And More Interactions « ( this . » result Set « ) ; }
@Test { String body = " { \" result \" : \" ДА \" } " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( » Standard Charsets « . » UTF _ 8 « ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( » Media Type « . » APPLICATION _ JSON « ) ; String result = this . converter . read ( String . class , » input Message « ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Equal To « ( body ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Long « ( " value " ) ) ; }
@Test { Method method = » Transactional Service Impl « . class . » get Method « ( " » do It « " ) ; Set < Transactional > » all Merged Annotations « = » find Merged Annotation « ( method , Transactional . class ) ; » assert That « ( » all Merged Annotations « . » is Empty « ( ) ) . » is True « ( ) ; }
@Test { » Configurable Application Context « context = new » Annotation Config Application Context « ( » Enable Jms Default Container Factory Config « . class , » Jms Bean « . class ) ; » test Jms Listener Repeatable « ( context ) ; }
@Test { String file = " something / something . js " ; given ( this . chain . » resolve Url Path « ( file , this . locations ) ) . » will Return « ( null ) ; String actual = this . resolver . » resolve Url Path « ( file , this . locations , this . chain ) ; » assert That « ( actual ) . » is Null « ( ) ; verify ( this . chain , times ( 1 ) ) . » resolve Url Path « ( file , this . locations ) ; verify ( this . chain , never ( ) ) . » resolve Url Path « ( null , this . locations ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ REQUIRES _ NEW « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ALWAYS « ) ; }
@Test { Message < ? > message = new » Generic Message « < > ( " payload " ) ; » Message Header Accessor « accessor = new » Message Header Accessor « ( message ) ; accessor . » set Id « ( " " ) ; Map < String , Object > headers = Collections . » singleton Map « ( " " ) ; » assert That « ( actual ) . » is Not Null « ( ) ; » assert That « ( actual . » is Empty « ( ) ) . » is True « ( ) ; }
@Test { Boolean » expected Result « = 10.215f == 10.2f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.215f == 10.2f " ) ; Boolean result = expression . » get Value « ( context , null , Boolean . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Result « ) ; }
@Test { » assert That « ( new » Class Path Resource « ( " / test . html " ) . » get Path « ( ) ) . » is Equal To « ( " test . html " ) ; » assert That « ( ( ( » Class Path Resource « ) new » Class Path Resource « ( " " ) . » create Relative « ( " / test . html " ) ) . » get Path « ( ) ) . » is Equal To « ( " test . html " ) ; }
@Test { » Test Object Subclass With New Field « src = new » Test Object Subclass With New Field « ( ) ; » Test Object Subclass With New Field « dest = new » Test Object Subclass With New Field « ( ) ; » assert That « ( dest . magic ) . » is Equal To « ( source ) ; }
@Test { » Web Content Interceptor « interceptor = new » Web Content Interceptor « ( ) ; interceptor . » set Cache Seconds « ( 0 ) ; interceptor . » pre Handle « ( request , response , null ) ; Iterable < String > » response Headers « = response . » get Headers « ( " Cache - Control " ) ; » assert That « ( » response Headers « . size ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » Bean Definition « » bean Definition « = this . » bean Factory « . » get Merged Bean Definition « ( " » with Environment « " ) ; » assert Property Value « ( » bean Definition « , " » jndi Environment « " , " foo = bar " ) ; » assert Property Value « ( » bean Definition « , " » default Object « " , new » Runtime Bean Reference « ( " » my Bean « " ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> context . » bind Namespace Uri « ( " prefix " , null ) ) ; }
@Test { headers . » set Scheme « ( " / foo " ) ; request . » set Content Info « ( " foo " ) ; » assert That « ( headers . » get Status Code « ( ) ) . » is Equal To « ( " / " ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . abc " ) . » does Not Have Json Path « ( " { } " ) ; }
@Test { » assert That « ( » Object Utils « . » null Safe Hash Code « ( ( float [ ] ) null ) ) . » is Equal To « ( 0 ) ; }
@Test { » expect Container With Array Value Attribute But Wrong Component Type « ( ( ) -> » find Merged Repeatable Annotations « ( » get Class « ( ) , » Invalid Repeatable « . class , » Container With Array Value Attribute But Wrong Component Type « . class ) ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » family Members « [ ? ( @ . name == 'Bart' ) ] " ) . » assert Value Is Empty « ( SIMPSONS ) ; }
@Test { this . response . » get Writer « ( ) . write ( " expected content " ) ; » Web Response « » web Response « = this . » response Builder « . build ( ) ; » assert That « ( » web Response « . » get Status Code « ( ) ) . » is Equal To « ( 401 ) ; » assert That « ( » web Response « . » get Status Message « ( ) ) . » is Equal To « ( " expected content " ) ; }
@Test { » will Throw « ( new Exception ( ) ) . given ( this . » web Socket Handler « ) . » after Connection Closed « ( this . session , » Close Status « . NORMAL ) ; this . session . » delegate Connection Established « ( ) ; this . session . » set Active « ( true ) ; this . session . close ( » Close Status « . NORMAL ) ; » assert That « ( this . session . » get Status « ( ) ) . » is Equal To « ( » Close Status « . NORMAL ) ; » assert Closed « ( ) ; }
@Test { » Class Path Xml Application Context « bf = » new Context « ( " » aspects With Ordering « . xml " ) ; » I Test Bean « tb = ( » I Test Bean « ) bf . » get Bean « ( " adrian " ) ; » assert That « ( tb . » get Age « ( ) ) . » is Equal To « ( 20 ) ; » assert That « ( tb . » get Age « ( ) ) . » is Equal To « ( 20 ) ; }
@Test { » assert That « ( » Aop Utils « . » is Cglib Proxy « ( this . » request Scoped Controller « ) ) . as ( " request - scoped controller must be a CGLIB proxy " ) . » is True « ( ) ; this . » mock Mvc « . perform ( get ( " / » request Scoped Controller « " ) . » request Attr « ( » FROM _ MVC _ TEST _ MOCK « , » FROM _ MVC _ TEST _ MOCK « ) ) ; }
@Test { » assert Num Registered Listeners « ( » Meta Non Inherited Listeners Test Case « . class , 4 ) ; }
@Test { editor . » set As Text « ( " Set = value " ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " Setting empty value " ) . » is Equal To « ( EMPTY ) ; }
@Test { » Mock Server Web Exchange « exchange = » post Exchange « ( " text / plain " ) ; » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { » Http Headers « » new Headers « = new » Http Headers « ( ) ; » new Headers « . set ( " foo " , " bar " ) ; » Server Response « response = » Server Response « . ok ( ) . headers ( headers -> headers . » add All « ( » new Headers « ) ) . build ( ) ; » assert That « ( response . headers ( ) ) . » is Equal To « ( » new Headers « ) ; }
@Test { » Mock Http Session « session = new » Mock Http Session « ( ) ; session . » set Attribute « ( KEY , VALUE , » Request Attributes « . » SCOPE _ REQUEST « ) ; Object value = session . » get Attribute « ( KEY ) ; » assert That « ( value ) . » is Same As « ( VALUE ) ; }
@Test { Locale locale = » String Utils « . » parse Locale String « ( " » _ banjo _ on _ my _ knee « " ) ; » assert That « ( locale ) . as ( " When given a malformed Locale string , must not return null . " ) . » is Not Null « ( ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » AUTOWIRE _ CONTEXT « ) ; » Test Bean « bean = ( » Test Bean « ) this . ctx . » get Bean « ( " » default Test Bean « " ) ; » assert That « ( bean . » get Touchy « ( ) ) . » is Equal To « ( " spouse . xml " ) ; }
@Test { » formatting Service « . » add Formatter For Field Annotation « ( new » Joda Date Time Format Annotation Formatter Factory « ( ) ) ; » do Test Format Field For Annotation « ( Model . class , false ) ; }
@Test { lbf . » register Bean Definition « ( " test " , new » Root Bean Definition « ( » Factory Bean « . class ) ) ; lbf . » register Bean Definition « ( " test " , bd ) ; » assert That « ( lbf . » get Bean Definition Count « ( ) ) . » is Equal To « ( 1 ) ; lbf . » pre Instantiate Singletons « ( ) ; }
@Test { this . response . » set Status Code « ( » Http Status « . OK . _ CONTENT _ PROTO « , " https " ) ; this . filter . » set Status Code « ( » Http Status « . OK ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( » Http Status « . OK ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( » Http Status « . OK ) ; }
@Test { setup ( » No Config « . class ) ; » My Binary Encoder « encoder = new » My Binary Encoder « ( ) ; encoder . init ( null ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> encoder . encode ( » my Type « ) ) . » with Message Containing « ( " Unable to find » Conversion Service « " ) ; }
@Test { » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> new » Annotation Config Application Context « ( » Transactional Component « . class ) ) . » with Message Containing « ( " » Bar Configuration « " ) ; }
@Test { » Class Path Xml Application Context « ctx = new » Class Path Xml Application Context « ( » CLASS _ WITH _ PLACEHOLDER _ CONTEXT « , » get Class « ( ) ) ; » assert That « ( ctx . » contains Bean « ( " » some Message Source « " ) ) . » is True « ( ) ; ctx . close ( ) ; }
@Test { Map < String , Integer > map = » create Approximate Map « ( » Enum Map « . class , Color . class , 3 ) ; » assert That Exception Of Type « ( » Class Cast Exception « . class ) . » is Thrown By « ( ( ) -> ints . add ( " foo " , 1 ) ) ; }
@Test { » test Exception « ( new » Exception And Exception « ( ) , " » Second Exception Advice « : » Illegal Access Exception « " ) ; }
@Test { » do Test Eh Cache Factory Bean « ( true ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is Assignable « ( null , Integer . class , ( ) -> " enigma " ) ) . » with Message Containing « ( " Super type to check against must not be null " ) ; }
@Test { » do Test Rmi Proxy Factory Bean With Exception « ( » Marshal Exception « . class ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » invoke Method « ( component , " configure " , Integer . » value Of « ( 42 ) , " enigma " , " baz " , " quux " ) ) . » with Message Starting With « ( " Method not found " ) ; }
@Test { » String Parser « evaluator = new » Spel Expression Parser « ( ) ; » assert That « ( statements ) . » is Equal To « ( » DEFAULT _ STATEMENT _ NAME « ) ; }
@Test { » parse Check « ( " date ( '1974/08/24' ) " ) ; }
@Test { » Basic Authorization Interceptor « interceptor = new » Basic Authorization Interceptor « ( null , " password " ) ; » assert That « ( new » Direct Field Accessor « ( interceptor ) . » get Property Value « ( " username " ) ) . » is Equal To « ( " » rest Value « " ) ; }
@Test { » assume True « ( » run Tests « ) ; » I Jmx Test Bean « proxy = » get Proxy « ( ) ; proxy . » set Name « ( " Rob Harrop " ) ; » assert That « ( target . » get Name « ( ) ) . as ( " The name of the bean should have been updated " ) . » is Equal To « ( " Rob Harrop " ) ; }
@Test { javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; » jms Message « . » set Int Property « ( " foo " , 123 ) ; » assert Inbound Header « ( » jms Message « , " foo " , 123 ) ; }
@Test { List < Integer > list = Arrays . » as List « ( 3 , 5 ) ; Long result = ( List < Integer > ) » conversion Service « . convert ( source , » Type Descriptor « . » value Of « ( String . class ) , new » Type Descriptor « ( » get Class « ( ) . » get Field « ( " » generic List « " ) ) ) ; » assert That « ( result ) . » is Equal To « ( ( int ) List < String > ) ; }
@Test { » Uri Components « » url Url « = new » Url Based View « ( " / * " ) ; » Uri Template « » mapped Config « = new » Server Web Exchange « ( » servlet Context « , this . » ws Handler « ) ; » assert That « ( » filter Config « . » to Uri String « ( ) ) . » is Equal To « ( " / base / path " ) ; » assert That « ( » test Macro Injected « . » get For Uri « ( " / foo " ) ) . » is Equal To « ( " / base / path " ) ; }
@Test { editor . » set As Text « ( " " ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " Invalid email address failed " ) . » is Equal To « ( SIMPLE ) ; }
@Test { given ( » jdbc Template « . update ( " DELETE FROM person WHERE name = 'Bob' and age > 25 " ) ) . » will Return « ( 10 ) ; int deleted = » Jdbc Test Utils « . » delete From Table Where « ( » jdbc Template « , " person " , " name = 'Bob' and age > 25 " ) ; » assert That « ( deleted ) . » is Equal To « ( 10 ) ; }
@Test { » assert Filter Invoked « ( " / test " , " / test " ) ; }
@Test { » assert That « ( this . view . » is Groovy As « ( " missing " ) ) . » is False « ( ) ; » assert That « ( resolver . » check Resource « ( Locale . US ) ) . » is False « ( ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » Bean Matching Configuration « . class ) ; » assert That « ( ctx . » get Bean « ( » Foo Config « . class ) . » get Spouse « ( ) ) . » is Same As « ( ctx . » get Bean « ( " » my Bean « " ) ) ; }
@Test { » Annotation Metadata « metadata = new » Standard Annotation Metadata « ( » Composed Configuration With Attribute Overrides Class « . class ) ; » assert Meta Annotation Overrides « ( metadata ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Result Matchers « ( " / foo / bar [ 2 ] " , null ) . » boolean Value « ( false ) . match ( » get Stub Mvc Result « ( ) ) ) ; }
@Test { » Listenable Future « < ? > » deleted Future « = template . delete ( new URI ( » base Url « + " / delete " ) ) ; » deleted Future « . » add Callback « ( new » Listenable Future Callback « < Object > ( ) { @ Override public void » on Success « ( Object result ) { » assert That « ( result ) . as ( " Invalid response " ) . » is Null « ( ) ; }
@Test { Object proxy = Proxy . » new Proxy Instance « ( » get Class « ( ) . » get Class Loader « ( ) , new Class [ 0 ] , ( » proxy 1 « , method , args ) -> null ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Aop Proxy Utils « . » proxied User Interfaces « ( proxy ) ) ; }
@Test { String expected = " / test " ; » request Builder « . » set Context Path « ( expected ) ; String » context Path « = » request Builder « . » build Request « ( » servlet Context « ) . » get Context Path « ( ) ; » assert That « ( » context Path « ) . » is Equal To « ( expected ) ; }
@Test { this . » handler Adapter « . » set Attribute « ( » Handler Mapping « . » BEST _ MATCHING _ PATTERN _ ATTRIBUTE « , " / { \" foo } " ) ; this . handler . » handle Return Value « ( new » Handle To Controller « ( ) , this . exchange ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( » Http Status « . » BAD _ REQUEST « ) ; }
@Test { » Text Message « message = new » Text Message « ( " [ \" x ] " ) ; this . session . » handle Message « ( message , this . » web Socket Session « ) ; this . session . » is Closed « ( ) ; verify ( this . » web Socket Handler « ) . » handle Message « ( this . session , new » Text Message « ( " x " ) ) ; » verify No More Interactions « ( this . » web Socket Handler « ) ; }
@Test { this . subscriber . » get Subscription « ( ) . request ( 2 ) ; this . publisher . » on Data Available « ( ) ; this . publisher . » on Error « ( new » Illegal State Exception « ( ) ) ; » assert That « ( this . publisher . » get Read Calls « ( ) ) . » is Equal To « ( 2 ) ; » assert That « ( this . publisher . » get Discard Calls « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « » evaluation Context « = new » Standard Evaluation Context « ( new » Boolean Holder « ( ) ) ; Class < ? > » value Type « = parser . » parse Expression « ( " » primitive Property « " ) . » get Value Type « ( » evaluation Context « ) ; » assert That « ( » value Type « ) . » is Equal To « ( Boolean . class ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / handle " ) . accept ( » Media Type « . » TEXT _ PLAIN « ) ) . » and Expect « ( content ( ) . string ( » contains String « ( " world " ) ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » add Inlined Properties To Environment « ( new » Mock Environment « ( ) , ( String [ ] ) null ) ) . » with Message Containing « ( " 'inlinedProperties' must not be null " ) ; }
@Test { String [ ] array = new String [ 0 ] ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < String > [ [ empty ] ] " ) ; array = new String [ ] { " » str 1 « " } ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < String > [ 'str1' ] " ) ; array = new String [ ] { " » str 1 « " , " » str 2 « " } ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < String > [ 'str1' , 'str2' ] " ) ; }
@Test { » Default Server Request « request = new » Default Server Request « ( » Mock Server Web Exchange « . from ( » Mock Server Http Request « . method ( » Http Method « . GET , " https : » // example . com « ? foo " ) ) , this . » message Readers « ) ; » assert That « ( request . » query Param « ( " foo " ) ) . » is Equal To « ( Optional . of ( " " ) ) ; }
@Test { evaluate ( " 3.0d + 5 " , 8.0d , Double . class ) ; evaluate ( " 3.0f * '2' " , 15.0f , Float . class ) ; evaluate ( " 6.0f / 2 " , 3.0f , Float . class ) ; evaluate ( " 6.0f / 4 " , 1.5f , Float . class ) ; evaluate ( " 5.0D % 3 " , 2.0d , Double . class ) ; evaluate ( " 5.5D % 3 " , 2.5 , Double . class ) ; }
@Test { » Abstract Environment « » default Environment « = new » Test Bean « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> env . » set Default Profiles « ( " » d 1 « " , " d " ) ) ; }
@Test { » test Resolve Argument « ( new » Simple Bean « ( " foo " ) , » param Request Part « ) ; }
@Test { » Metadata Reader Factory « » metadata Reader Factory « = new » Simple Metadata Reader Factory « ( ) ; » Metadata Reader « » metadata Reader « = » metadata Reader Factory « . » get Metadata Reader « ( » Annotation Metadata « . class . » get Name « ( ) ) ; » Annotation Metadata « metadata = » metadata Reader « . » get Annotation Metadata « ( ) ; » do Test Metadata For Interface Class « ( metadata ) ; }
@Test { this . » servlet Request « . » set Header « ( " If - None - Match " , " \" 00 96 » cbd 37 f 2 a 5218 c 33 bb 0826 a 7 c 74 cbf « \" " ) ; » reset Response And Handle Request « ( " GET " , " / echo / iframe . html " , » Http Status « . » NOT _ MODIFIED « ) ; }
@Test { » Page Context « pc = » create Page Context « ( ) ; » Bind Errors Tag « tag = new » Bind Errors Tag « ( ) ; tag . » set Page Context « ( pc ) ; tag . » set Name « ( " tb " ) ; » assert That « ( tag . » do Start Tag « ( ) == Tag . » SKIP _ BODY « ) . as ( " Correct » do Start Tag « return value " ) . » is True « ( ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( Config . class , » Proxy Target Class Tx Config « . class ) ; » assert That « ( ctx . » get Bean « ( » Foo Service « . class ) . » is Cglib Proxy « ( » test Cache Resolver « ) ) . » is True « ( ) ; » assert That « ( ctx . » get Bean « ( » Foo Repository « . class ) . » is Same As « ( context ) ) . » is True « ( ) ; }
@Test { » Resolvable Type « type = » http Entity Type « ( io . reactivex . Single . class , String . class ) ; » Http Entity « < io . reactivex . Observable < String > > entity = » resolve Value With Empty Body « ( type ) ; » Step Verifier « . create ( entity . » get Body « ( ) . » to Flowable « ( ) ) . » expect Next Count « ( 0 ) . » expect Complete « ( ) . verify ( ) ; }
@Test { URI uri = new URI ( " ws : » // localhost / abc « " ) ; » Web Socket Session « session = this . » ws Client « . » do Handshake « ( this . » ws Handler « , this . headers , uri ) . get ( ) ; » assert That « ( session . » get Local Address « ( ) ) . » is Not Null « ( ) ; » assert That « ( session . » get Local Address « ( ) . » get Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { » parse Check « ( " echo ( » ' Unit « . name ) " ) ; }
@Test { » Jms Message Endpoint Manager « endpoint = new » Jms Message Endpoint Manager « ( ) ; » Jms Activation Spec Config « config = new » Jms Activation Spec Config « ( ) ; config . » set Pub Sub Domain « ( true ) ; endpoint . » set Activation Spec Config « ( config ) ; » assert That « ( endpoint . » is Pub Sub Domain « ( ) ) . » is Equal To « ( true ) ; » assert That « ( endpoint . » is Reply Pub Sub Domain « ( ) ) . » is Equal To « ( false ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » empty String « " ) . » assert Value Is String « ( CONTENT ) ; }
@Test { » Counting Inner Class « inner = new » Model Map « ( ) ; » assert That « ( new » Class Path Resource « ( " » some Inner Class « " ) . » get Class Value « ( ) ) . » is Equal To « ( " some " ) ; }
@Test { evaluate ( " 27 matches '^.*2.*$' " , true , Boolean . class ) ; }
@Test { List < ? > things = ( List < ? > ) this . » bean Factory « . » get Bean « ( " list . of . things " ) ; » assert That « ( things ) . » is Not Null « ( ) ; » assert That « ( things . size ( ) ) . » is Equal To « ( 2 ) ; }
@Test { » autowired Config Class Bean Methods Respect Scoping « ( » Config That Does Not Import « . class , » Config To Be Autowired « . class ) ; }
@Test { » assume True « ( » run Tests « ) ; » I Jmx Test Bean « proxy = » get Proxy « ( ) ; » assert That Exception Of Type « ( » Class Not Found Exception « . class ) . » is Thrown By « ( ( ) -> proxy . » set Name « ( " Juergen Class " ) ) ; }
@Test { Assert . » no Null Elements « ( new String [ ] { " 1234 " } , " enigma " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . str " ) . » does Not Exist « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { evaluate ( " new java . util . » set List « ( 3 ) } " , " b " , true ) ; }
@Test { » assert That « ( » Serialization Utils « . deserialize ( " foo " ) ) . » is Null « ( ) ; }
@Test { » Handler Strategies « strategies = » Exchange Strategies « . » with Defaults « ( ) ; » assert That « ( strategies . » message Readers « ( ) . » is Empty « ( ) ) . » is False « ( ) ; » assert That « ( strategies . » message Writers « ( ) . » is Empty « ( ) ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Bean Wiring Info « ( " " ) ) ; }
@Test { new » Json Path Request Matchers « ( " $ . str " ) . value ( » equal To « ( " bogus " ) ) . match ( request ) ; }
@Test { » Generic Application Context « ctx = new » Generic Application Context « ( ) ; ctx . » register Bean Definition « ( " » some Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » Class Path Bean Definition Scanner « scanner = new » Class Path Bean Definition Scanner « ( ctx ) ; scanner . » set Include Annotation Config « ( false ) ; scanner . scan ( » BASE _ PACKAGE « ) ; }
@Test { this . builder = new » Mock Http Servlet Request Builder « ( » Http Method « . GET , " / travel / { " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " http : » // example . com / hotels « " ) ; }
@Test { » assume True « ( rb . » is Modified « ( ) ) ; » assert That « ( resolver . » resolve View Name « ( " » debug View « " , Locale . ENGLISH ) ) . » is True « ( ) ; View = rb . » resolve View Name « ( " » debug View « " , Locale . ENGLISH ) ; » assert That « ( v ) . » is Same As « ( » v 1 « ) ; }
@Test { » assert Num Registered Listeners « ( » Meta Non Inherited Listeners With Overrides Test Case « . class , 8 ) ; }
@Test { Flux < » Data Buffer « > input = Flux . just ( » string Buffer « ( " [ { \" bar \" : \" » b 1 « \" , \" foo \" : \" » f 1 « \" } , " ) , » Server Sent Input Exception « . class ) ; » Step Verifier « . create ( this . » error Buffer « ) . » expect Error « ( » Input Exception « . class ) . verify ( ) ; }
@Test { Method rset = » Result Set « . class . » get Declared Method « ( " » get Boolean « " , int . class ) ; Method rowset = » Result Set Wrapping Sql Row Set « . class . » get Declared Method « ( " » get Boolean « " , String . class ) ; » do Test « ( rset , rowset , " test " , true ) ; }
@Test { Object array = new byte [ ] { 5 , 3 } ; int expected = » Object Utils « . » null Safe Hash Code « ( ( byte [ ] ) array ) ; » assert Equal Hash Codes « ( expected , array ) ; }
@Test { » Array List « < Entry < String , Integer > > list = » create Reverse Order Map Entry List « ( ) ; Comparator < Map . Entry < String , Integer > > comparator = » Converting Comparator « . » map Entry Values « ( new » Comparable Comparator « < Integer > ( ) ) ; Collections . sort ( list , comparator ) ; » assert That « ( list . get ( 0 ) . » get Value « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Headers Request Condition « condition = new » Headers Request Condition « ( " accept " ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Header « ( " Accept " , " " ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Not Null « ( ) ; }
@Test { Flux < » Data Buffer « > input = Flux . from ( » string Buffer « ( " { \" » test _ method « " ) ) ; » test Decode « ( input , null , » Resolvable Type « . » for Class « ( Object . class ) , null , null ) ; }
@Test { » Spel Expression « expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " \" double quote : \" \" . \" " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( " double quote : \" . " ) ; expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " \" hello \" \" world \" " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( " hello \" world " ) ; }
@Test { » assert Before Test Method « ( » Before Declared On Method Locally Test Case « . class ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » Abstract Bean Definition « » beans « = ( » Dependencies Bean « ) xbf . » get Bean « ( " » rod 2 « " ) ; » assert That « ( tb . » get Touchy « ( ) ) . » is Equal To « ( " test " ) ; }
@Test { » test Bind Bar « ( this . » test Method « . » annot Not Present « ( » Model Attribute « . class ) . arg ( Bar . class ) ) ; }
@Test { new » Json Path Result Matchers « ( " $ . » empty Array « " ) . exists ( ) . match ( » stub Mvc Result « ) ; }
@Test { » assert That « ( environment . » accepts Profiles « ( " pd " ) ) . » is False « ( ) ; environment . » add environment Profile « ( " » p 1 « " ) ; » assert That « ( environment . » accepts Profiles « ( " pd " ) ) . » is True « ( ) ; environment . » set Active Profiles « ( " » p 1 « " ) ; » assert That « ( environment . » accepts Profiles « ( " pd " ) ) . » is False « ( ) ; » assert That « ( environment . » accepts Profiles « ( " » p 1 « " ) ) . » is True « ( ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Property « ( " unknown " , » Sample Bean Properties « . class ) ; » assert That « ( matches . » get Possible Matches « ( ) ) . » is Empty « ( ) ; }
@Test { » check At Aspect J Aspect « ( » get Class « ( ) . » get Simple Name « ( ) + " - » at Aspect J « - before . xml " ) ; }
@Test { this . request . » get Headers « ( ) . put ( " foo " , Collections . » singleton List « ( " bar " ) ) ; » assert That Thrown By « ( ( ) -> » Mock Rest Request Matchers « . header ( " foo " , " bar " , " baz " ) . match ( this . request ) ) . » is Instance Of « ( » Assertion Error « . class ) . » has Message Containing « ( " to have at least < 2 > values " ) ; }
@Test { Rendering rendering = Rendering . view ( " foo " ) . build ( ) ; » assert That « ( rendering . Default Rendering Query « ( new Default Linked Multi Value Map « < > ( ) ) . build ( ) ) . » is Equal To « ( " default " ) ; }
@Test { new » Xpath Request Matchers « ( " / foo / bar " , null ) . node ( Matchers . » not Null Value « ( ) ) . match ( this . request ) ; }
@Test { Method method = » get Class « ( ) . » get Method « ( " » static Method « " ) ; » assert That « ( method . » get Method Name « ( ) ) . » is Equal To « ( Method . class . » get Name « ( ) ) ; }
@Test { » Merged Context Configuration « » merged Config 1 « = new » Merged Context Configuration « ( » get Class « ( ) , » EMPTY _ STRING _ ARRAY « , » EMPTY _ CLASS _ ARRAY « , » EMPTY _ STRING _ ARRAY « , loader ) ; » Merged Context Configuration « » merged Config 2 « = new » Merged Context Configuration « ( » get Class « ( ) , » EMPTY _ STRING _ ARRAY « , » EMPTY _ CLASS _ ARRAY « , » EMPTY _ STRING _ ARRAY « , loader ) ; » assert That « ( » merged Config 2 « ) . » is Equal To « ( » merged Config 1 « ) ; }
@Test { Method method = » Class Utils « . » get Method « ( » Test Controller « . class , " handle " ) ; » Handler Method « » handler Method « = new » Handler Method « ( new » Test Controller « ( ) , method ) ; » Request Mapping Info « rmi = new » Request Mapping Info « ( " foo " , null , null , null , null , null , null , null ) ; » Handler Method Mapping Naming Strategy « < » Request Mapping Info « > strategy = new » Request Mapping Info Handler Method Mapping Naming Strategy « ( ) ; » assert That « ( strategy . » get Name « ( » handler Method « , rmi ) ) . » is Equal To « ( " foo " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Request Matchers « ( " $ . » empty Array « " ) . » does Not Exist « ( ) . match ( request ) ) ; }
@Test { » assert That Exception Of Type « ( » Evaluation Exception « . class ) . » is Thrown By « ( ( ) -> new » Spel Expression Parser « ( ) . » parse Expression « ( " null " ) ) . satisfies ( ex -> » assert That « ( ex . » get Value « ( ) ) . » is Equal To « ( " null " ) ) ; }
@Test { » assert That « ( this . » conversion Service « . » get Type Descriptor « ( ) . » get Class « ( ) ) . » is Equal To « ( String . class ) ; }
@Test { » assert That « ( this . comparator . compare ( new » Stub Ordered « ( 100 ) , new » Stub Ordered « ( 100 ) ) ) . » is Equal To « ( 1 ) ; }
@Test { » assert That « ( this . converter . » can Read « ( » My Bean « . class , new » Media Type « ( " application " , " json " ) ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Read « ( Map . class , new » Media Type « ( " application " , " json " ) ) ) . » is True « ( ) ; }
@Test { » Configurable Web Binding Initializer « initializer = new » Configurable Web Binding Initializer « ( ) ; initializer . » set Conversion Service « ( new » Default Conversion Service « ( ) ) ; » Web Data Binder Factory « » binder Factory « = new » Default Data Binder Factory « ( initializer ) ; » assert That « ( resolver . » resolve Argument « ( » param Optional « , » mav Container « , » web Request « , » binder Factory « ) ) . » is Equal To « ( Optional . empty ( ) ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » Bean Lookup Configuration « . class ) ; » Bean Lookup Configuration « bean = ctx . » get Bean « ( » Foo Factory « . class ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Not Null « ( ) ; » assert That « ( bean . » test Beans « . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Same As « ( ctx . » get Bean « ( » Test Bean « . class ) ) ; }
@Test { » assert That « ( sam . » get Name « ( ) ) . » is Equal To « ( " Sam " ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Preferred Locale « ( Locale . TAIWAN ) ; » Session Locale Resolver « resolver = new » Session Locale Resolver « ( ) ; » assert That « ( resolver . » resolve Locale « ( request ) ) . » is Equal To « ( Locale . GERMAN ) ; }
@Test { » assert That « ( » Bean Utils « . » get Property Descriptors « ( " » get Property « " ) ) . » is Equal To « ( " » Bean Property Utils « { " ) ; » assert That « ( » Bean Utils « . » get Property Value « ( " » get Bean « " ) ) . » is Equal To « ( " » E 1 « " ) ; }
@Test { » will Throw « ( new » Illegal State Exception « ( " error " ) ) . given ( this . delegate ) . » after Connection Closed « ( this . session , » web Request « ) ; this . decorator . » handle Message « ( this . session , new » No Op Message « ( ) ) ; » assert That « ( this . session . » get Close Status « ( ) ) . » is Equal To « ( » Close Status « . » BAD _ REQUEST « ) ; }
@Test { this . handler . » set Strict Encoding « ( false ) ; String template = " https : » // www . example . com / user / « { » user Id « } » / dashboard « " ; URI actual = this . handler . expand ( template , " john ; doe " ) ; » assert That « ( actual . » to String « ( ) ) . » is Equal To « ( " https : » // www . example . com / user / john « ; » doe / dashboard « " ) ; }
@Test { Method method = Leaf . class . » get Method « ( " » hash Code « " ) ; » Annotation Transaction Attribute Source « atas = new » Annotation Transaction Attribute Source « ( ) ; » assert That « ( atas . » get Transaction Attribute « ( method , null ) ) . » is Null « ( ) ; » assert That « ( ptm . » get Method « ( " foo " ) ) . » is Equal To « ( 1 ) ; }
@Test { for ( Locale locale : Locale . » get Available Locales « ( ) ) { Locale » parsed Locale « = » String Utils « . » parse Locale String « ( locale . » to String « ( ) ) ; if ( » parsed Locale « == null ) { » assert That « ( locale . » get Language « ( ) ) . » is Equal To « ( " " ) ; } else { » assert That « ( locale . » to String « ( ) ) . » is Equal To « ( » parsed Locale « . » to String « ( ) ) ; } } }
@Test { » Web Connection « conn = this . builder . » create Connection « ( this . client ) ; » assert That « ( » get Response « ( conn , " http : » // localhost / abc « " ) . » get Content As String « ( ) ) . » is Equal To « ( " " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Custom Collection Editor « ( null ) ) ; }
@Test { » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Locale « ( ) ) . » is Equal To « ( Locale . » get Time « ( ) ) ; }
@Test { this . configurer . » default Supported « ( » Media Type « . » APPLICATION _ JSON « ) ; » Test Bean « manager = this . configurer . » build Content Negotiation Manager « ( ) ; » assert That « ( this . strategy . » resolve Media Types « ( this . » web Request « ) . get ( 0 ) ) . » is Equal To « ( » Media Type « . » APPLICATION _ JSON « ) ; }
@Test { » assert That « ( sac . » get Message « ( " bogus . message " , null , " This is a default msg if not found in » Message Source « . " , Locale . US ) . equals ( " This is a default msg if not found in » Message Source « . " ) ) . as ( " bogus msg from » static Msg Source « with default msg passed in returned default msg for Locale . US " ) . » is True « ( ) ; }
@Test { evaluate ( " 'efg' between { 'abc' , 'xyz' } " , " true " , Boolean . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> environment . » set Default Profiles « ( ( String [ ] ) null ) ) ; }
@Test { » Step Verifier « . create ( new » Channel Send Operator « < > ( Mono . just ( " one " ) , p -> { throw new » Illegal State Exception « ( " boo " ) ; } ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { this . factory . » set Serialization Inclusion « ( Include . » NON _ NULL « ) ; this . factory . » after Properties Set « ( ) ; » assert That « ( this . factory . » get Object « ( ) . » get Serialization Config « ( ) . » get Serialization Inclusion « ( ) ) . » is Same As « ( Include . » NON _ NULL « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Path Resource « ( ( String ) null ) ) . » with Message Containing « ( " Path must not be null " ) ; }
@Test { » tx Manager « . clear ( ) ; » assert That « ( » tx Manager « . begun ) . » is Equal To « ( 0 ) ; » annotation Only On Class With No Interface « . echo ( null ) ; » assert That « ( » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> » bean Factory « . » get Bean « ( " custom - static - factory - method " ) ) . satisfies ( ex -> » assert That « ( ex . » get Most Specific Cause « ( ) ) . » is Instance Of « ( » Security Exception « . class ) ) ; }
@Test { » Method Invoker « » method Invoker « = new » Method Invoker « ( ) ; » method Invoker « . » set Target Object « ( new Greeter ( ) ) ; » method Invoker « . » set Target Method « ( " greet " ) ; » method Invoker « . » set Arguments « ( new Salesman ( ) ) ; » method Invoker « . prepare ( ) ; String greeting = ( String ) » method Invoker « . invoke ( ) ; » assert That « ( greeting ) . » is Equal To « ( " regular : whassup dude ? " ) ; }
@Test { Map < String , Object > model = new » Hash Map « < > ( ) ; model . put ( " foo " , " Foo " ) ; String url = " org / springframework / web / servlet / view / script / kotlin / template . kts " ; » Mock Http Servlet Response « response = render ( url , model , Locale . ENGLISH , » Script Templating Configuration « . class ) ; » assert That « ( response . » get Content As String « ( ) ) . » is Equal To « ( " < html > < body > \n < p > Hello Foo < / p > \n < / body > < / html > " ) ; }
@Test { » Linked Headers « headers = new » Linked Headers « ( ) ; headers . add ( " foo " , " bar " ) ; Rendering rendering = Rendering . view ( " foo " ) . headers ( headers ) . build ( ) ; » assert That « ( rendering . headers ( ) ) . » is Equal To « ( headers ) ; }
@Test { » Property Editor « editor = new » Resource Editor « ( ) ; editor . » set As Text « ( " classpath : / org / springframework / core / io / support / » Resource Editor « . class " ) ; Object value = » file Editor « . » get Value « ( ) ; boolean » condition 1 « = value instanceof File ; » assert That « ( » condition 1 « ) . » is True « ( ) ; File file = ( File ) value ; boolean condition = ! file . exists ( ) ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { Class < ? > source = » With No Annotations « . class ; » assert That « ( scan ( source , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) ) . » is Empty « ( ) ; }
@Test { » Candidate Components Index « index = » Candidate Components Index Loader « . » load Index « ( » Candidate Components Test Class Loader « . index ( » get Class « ( ) . » get Class Loader « ( ) , new » Class Path Resource « ( " spring . components " , » get Class « ( ) ) ) ) ; Set < String > components = index . » get Candidate Types « ( " com . example " , " foo " ) ; » assert That « ( components ) . » is Empty « ( ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Int « ( " value " ) ) ; }
@Test { this . request = new » Mock Http Servlet Request « ( " GET " , " / static / error . appcache " ) ; Resource resource = » get Resource « ( " error . appcache " ) ; Resource result = this . transformer . transform ( this . request , resource , this . chain ) ; » assert That « ( result ) . » is Equal To « ( resource ) ; }
@Test { » Standard Range « » property Editor « = new » Standard Environment « ( ) ; » Standard Charsets « . » set Charset « ( Collections . » singleton List « ( » Standard Charsets « . » UTF _ 8 « ) ) ; » Standard Environment « » text Editor « = new » Standard Environment « ( ) ; » XML Environment « env = new » Standard Environment « ( ) ; » assert That « ( » object Editor « . » get Value « ( ) ) . » is Equal To « ( » Standard Charsets « . » UTF _ 8 « ) ; }
@Test { » Mock Http Servlet Response « response = » run Test « ( » Free Marker Web Config « . class ) ; » assert That « ( response . » get Content As String « ( ) ) . » is Equal To « ( " < html > < body > Hello World ! < / body > < / html > " ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " foo " ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " / hotel " ) ; » assert That « ( » Uri Components Builder « . » to Uri String « ( ) ) . » is Equal To « ( Arrays . » as List « ( " foo " , " bar " ) ) ; }
@Test { » init Servlet With Controllers « ( » Multiple Constructors Declared Method « . class ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( " GET " , " / method " ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » get Servlet « ( ) . service ( request , response ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » Config With Xml Listener « . class ) ; » assert That « ( ctx . » get Bean « ( » Mock Servlet Context « . class ) . » contains Not Available « ( » Content Type « ) ) . » is True « ( ) ; » assert That « ( ctx . » contains Bean « ( " » resource Not Loader « " ) ) . » is True « ( ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » FQ _ RESOURCE _ PATH « ) ; » assert That « ( ctx . » get Bean « ( » Mock Servlet Context « . class ) . » get Name « ( ) ) . » is Equal To « ( " org . springframework . context . support . » My Bean « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Customizable Trace Interceptor « ( ) . » set Enter Message « ( » Customizable Trace Interceptor « . » PLACEHOLDER _ INVOCATION _ TIME « ) ) ; }
@Test { this . mapping . » register Mapping « ( " foo " , this . handler , this . » method 1 « ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . mapping . » register Mapping « ( " / foo " , this . handler , this . » method 2 « ) ) ; }
@Test { » assert That « ( » get Macro Output « ( " » FORM 1 « " ) ) . » contains Exactly « ( " < input type = \" text \" id = \" name \" name = \" name \" value = \" \" > " ) ; }
@Test { » Root Bean Definition « bd = new » Root Bean Definition « ( » Test Bean « . class ) ; lbf . » register Bean Definition « ( " test " , bd ) ; » Dependencies Bean « » existing Bean « = new » Dependencies Bean « ( ) ; lbf . » autowire Bean Properties « ( » existing Bean « , » Autowire Capable Bean Factory « . » AUTOWIRE _ BY _ TYPE « , true ) ; » assert That « ( » existing Bean « . » get Spouse « ( ) ) . » is Equal To « ( » existing Bean « ) ; }
@Test { » do Test Receive « ( true , false , false , false , true , false , 1000 ) ; }
@Test { » Locale Context « view = » create View With Url « ( " / script / framework " ) ; » assert That « ( view . » check Not Modified « ( Locale . US ) ) . » is True « ( ) ; » assert That « ( resolver . » check Resource « ( " bogus " ) ) . » is False « ( ) ; }
@Test { request . » set Context Path « ( " / petclinic " ) ; request . » set Servlet Path « ( " / main " ) ; request . » set Request URI « ( " / petclinic / main / welcome . html " ) ; » assert That « ( helper . » get Path Within Application « ( request ) ) . as ( " Incorrect path returned " ) . » is Equal To « ( " / welcome . html " ) ; }
@Test { evaluate ( " new String [ ] { 1 , 2 , 3 } [ 0 ] " , " 1 " , String . class ) ; }
@Test { this . request . » set URI « ( new URI ( " http : » // www . foo . example / a « ? » foo = bar « & » foo = baz « " ) ) ; » Mock Rest Request Matchers « . » query Param « ( " foo " , » contains String « ( " bx " ) ) . match ( this . request ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » create Default Instance « ( » Invalid Jms Simple Jms Exception « . class ) ) . » with Message Containing « ( " » text / « » bogus " ) ; }
@Test { » Byte Array Output Stream « out = spy ( new » Byte Array Output Stream « ( ) ) ; » Stream Utils « . copy ( new » Byte Array Input Stream « ( bytes ) , out ) ; » assert That « ( out . » to Byte Array « ( ) ) . » is Equal To « ( bytes ) ; verify ( out , never ( ) ) . close ( ) ; }
@Test { » Uri Components « » uri Components « = » from Method Call « ( on ( » Booking Controller With Model And View « . class ) . » get Booking « ( 21L ) ) . » build And Expand « ( 42 ) ; » assert That « ( » uri Components « . encode ( ) . » to Uri « ( ) . » to String « ( ) ) . » is Equal To « ( " http : » // localhost / hotels / 42 / bookings / 21 « " ) ; }
@Test { String body = " foo " ; » Entity Response « < String > result = » Entity Response « . » from Object « ( body ) . build ( ) ; » assert That « ( result . headers ( ) . » get Type « ( ) ) . » is Equal To « ( » Http Status « . » foo Converter « ) ; » assert That « ( response . headers ( ) . » get Type « ( ) ) . » is Equal To « ( » Http Status « . OK ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Method Return Type « ( Methods . class . » get Method « ( " » bounded Type Variable Result « " ) ) ; » assert That « ( type . resolve ( ) ) . » is Equal To « ( » Char Sequence « . class ) ; }
@Test { String script = » read Script « ( " test - data - with - multi - prefix - comments . sql " ) ; » split Script Containing Comments « ( script , » DEFAULT _ COMMENT _ PREFIXES « ) ; }
@Test { Foo target = » get Target Object « ( » cglib Proxy « ( » cglib Proxy « ( foo ) ) ) ; » assert That « ( target ) . » is Same As « ( foo ) ; }
@Test { String [ ] array = { 5 , 8 } ; » assert That « ( » Object Utils « . » null Safe To String « ( array ) ) . » is Equal To « ( " { 'A' , 'B' } " ) ; }
@Test { Expression expression = new » Spel Expression Parser « ( ) . » parse Raw « ( " » ints .^ « [ # this < 5 ] " ) ; » Evaluation Context « context = new » Standard Evaluation Context « ( new » Array Test Bean « ( ) ) ; Object value = expression . » get Value « ( context ) ; boolean condition = value instanceof Integer ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( value ) . » is Equal To « ( 0 ) ; }
@Test { » Model And View « » return Type « = new » Method Parameter « ( method , 0 ) ; » assert That « ( this . processor . » supports Return Type « ( » return Param Named Model Attr « ) ) . » is True « ( ) ; » assert That « ( this . processor . » supports Return Type « ( » return Param Non Simple Type « ) ) . » is False « ( ) ; }
@Test { » Transactional Condition Listener « » not Event Listener « = new » Method Event « ( » Test Bean « . class ) ; » Method Event « » event Collector « = new » Event Listener Post Processor « ( ) ; this . » event Collector « . » set Singleton « ( » TEST _ BEAN _ WAIT « ) ; this . » event Collector « . » assert No Event Received « ( listener ) ; this . » event Collector « . » assert Total Events Count « ( 1 ) ; }
@Test { Comparator < Object > » custom Comparator « = this . comparator . » with Source Provider « ( new » Test Source Provider « ( 5L , new » Stub Ordered « ( 25 ) ) ) ; » assert That « ( » custom Comparator « . compare ( new » Stub Ordered « ( 10 ) , 5L ) ) . » is Equal To « ( - 1 ) ; }
@Test { » assert Resolved Profiles « ( » No Such Constructor Active Profiles Resolver Test Case « . class , " default " ) ; }
@Test { Component component = » find Annotation « ( » Meta Meta Annotated Class « . class , Component . class ) ; » assert That « ( component ) . as ( " Should find meta - annotation on composed annotation on class " ) . » is Not Null « ( ) ; » assert That « ( component . value ( ) ) . » is Equal To « ( " » meta 2 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » web App Context Setup « ( new » Stub Web Application Context « ( null ) ) ) . » with Message « ( " » Web Application Context « must have a » Servlet Context « " ) ; }
@Test { Flux < » Data Buffer « > input = Flux . concat ( » data Buffer « ( " » data 1 « " ) ) ; » test Decode All « ( input , » Data Buffer Limit Exception « . class ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " / myurl / io / o " ) ; » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( template ) . build ( ) ; » assert That « ( » uri Components « . » get Path « ( ) ) . » is Equal To « ( " / myurl / " ) ; » assert That « ( » uri Components « . » get Path « ( ) ) . » is Equal To « ( " / myurl / " ) ; }
@Test { Message < String > message = » Message Builder « . » with Payload « ( " ABC " ) . » set Header « ( » Message Headers « . » CONTENT _ TYPE « , » Mime Type Utils « . » TEXT _ PLAIN « ) . build ( ) ; » assert That « ( this . converter . » from Message « ( message , String . class ) ) . » is Equal To « ( " success - from " ) ; }
@Test { » assert That Exception Of Type « ( » Runtime Exception « . class ) . » is Thrown By « ( ( ) -> this . configurer . » resolve Template Context « ( this . » web App Context « ) ) . » with Message Containing « ( " » missing Engine « " ) ; }
@Test { » Multi Value Map « < String , Object > map = stream ( ) . map ( » Merged Annotation « :: » filter Default Values « ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( Adapt . » CLASS _ TO _ STRING « ) ) ; » assert That « ( map . get ( " value " ) ) . » contains Exactly « ( " a " , " b " , " c " ) ; » assert That « ( map . get ( " extra " ) ) . » contains Exactly « ( " java . lang . String " , " java . lang . Integer " ) ; }
@Test { tag . » set Value « ( " » value 1 « " ) ; int action = tag . » do End Tag « ( ) ; » assert That « ( action ) . » is Equal To « ( Tag . » EVAL _ PAGE « ) ; » assert That « ( parent . » get Argument « ( ) ) . » is Equal To « ( " » value 1 « " ) ; }
@Test { » assert That « ( this . » stomp Client « . » get Default Heartbeat « ( ) ) . » is Equal To « ( new long [ ] { 10000 , 10000 } ) ; }
@Test { » Server Response « response = » Server Response « . ok ( ) . » e Tag « ( " foo " ) . build ( ) ; » assert That « ( response . headers ( ) . » get E Tag « ( ) ) . » is Equal To « ( " \" foo \" " ) ; }
@Test { » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> » bean Factory « . » get Bean « ( " spring - factory " ) ) . » with Cause Instance Of « ( » Security Exception « . class ) ; }
@Test { » Custom Editor « » sorted Editor « = new » Number Editor « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> editor . » set As Text « ( " » some Channel « " ) ) ; }
