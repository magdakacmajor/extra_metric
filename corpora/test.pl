@Test { Destination destination = new Destination ( ) { } ; » will Throw « ( » Destination Resolution Exception « . class ) . given ( this . » jms Template « ) . receive ( destination ) ; » assert That Exception Of Type « ( org . springframework . messaging . core . » Destination Resolution Exception « . class ) . » is Thrown By « ( ( ) -> this . » messaging Template « . receive ( destination ) ) ; }
@Test { int status = 999 ; given ( » mock Response « . » raw Status Code « ( ) ) . » will Return « ( status ) ; » assert That « ( wrapper . » raw Status Code « ( ) ) . » is Equal To « ( status ) ; }
@Test { » assert That Exception Of Type « ( » Missing Servlet Request Part Exception « . class ) . » is Thrown By « ( ( ) -> » test Resolve Argument « ( null , » param Valid Request Part « ) ) . satisfies ( ex -> » assert That « ( ex . » get Request Part Name « ( ) ) . » is Equal To « ( " » request Part « " ) ) ; }
@Test { » Lifecycle Bean « lb = ( » Lifecycle Bean « ) » get Bean Factory « ( ) . » get Bean « ( " lifecycle " ) ; » assert That « ( lb . » get Bean Name « ( ) ) . » is Equal To « ( " lifecycle " ) ; lb . » business Method « ( ) ; boolean condition = ! lb . » is Destroyed « ( ) ; » assert That « ( condition ) . as ( " Not destroyed " ) . » is True « ( ) ; }
@Test { this . session . » initialize Delegate Session « ( this . » web Socket Session « ) ; this . session . close ( » Close Status « . » NOT _ ACCEPTABLE « ) ; » assert That « ( this . » web Socket Session « . » get Close Status « ( ) ) . » is Equal To « ( » Close Status « . » NOT _ ACCEPTABLE « ) ; }
@Test { String expected = " cached - imaginary . css " ; this . cache . put ( » Caching Resource Resolver « . » RESOLVED _ URL _ PATH _ CACHE _ KEY _ PREFIX « + " imaginary . css " , expected ) ; String actual = this . chain . » resolve Url Path « ( " imaginary . css " , this . locations ) ; » assert That « ( actual ) . » is Equal To « ( expected ) ; }
@Test { » assert That « ( new » My Binary Encoder « ( ) . encode ( » my Type « ) . array ( ) ) . » is Equal To « ( » CONVERTED _ BYTES « . array ( ) ) ; }
@Test { » Servlet Context « » servlet Context « = new » Mock Servlet Context « ( ) ; » Servlet Context Aware Processor « processor = new » Servlet Context Aware Processor « ( » servlet Context « ) ; » Servlet Config Aware Bean « bean = new » Servlet Config Aware Bean « ( ) ; » assert That « ( bean . » get Servlet Config « ( ) ) . » is Null « ( ) ; processor . » post Process Before Initialization « ( bean , " » test Bean « " ) ; » assert That « ( bean . » get Servlet Config « ( ) ) . » is Null « ( ) ; }
@Test { » Method Parameter « param = this . » test Method « . annot ( » request Param « ( ) . » not Required « ( " bar " ) ) . arg ( String . class ) ; » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( » Mock Server Http Request « . get ( " / path ? name = foo " ) ) ; » assert That « ( resolve ( param , exchange ) ) . » is Equal To « ( " foo " ) ; }
@Test { » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( » Spring Application Configuration Class « . class ) . get ( » Spring Application Configuration « . class ) ; » Annotation Attributes « attributes = annotation . » as Annotation Attributes « ( Adapt . » CLASS _ TO _ STRING « ) ; » assert That « ( attributes ) . » contains Entry « ( " classes " , new String [ ] { Number . class . » get Name « ( ) } ) ; » assert That « ( attributes . » annotation Type « ( ) ) . » is Equal To « ( » Spring Application Configuration « . class ) ; }
@Test { Method rset = » Result Set « . class . » get Declared Method « ( " » get Long « " , int . class ) ; Method rowset = » Result Set Wrapping Sql Row Set « . class . » get Declared Method « ( " » get Long « " , int . class ) ; » do Test « ( rset , rowset , 1 , 1L ) ; }
@Test { this . » servlet Request « . » add Header « ( " Accept " , " text / event - stream " ) ; » test Sse Response « ( true ) ; Set < » Media Type « > types = Collections . singleton ( » Media Type « . » TEXT _ EVENT _ STREAM « ) ; this . » servlet Request « . » set Attribute « ( » Handler Mapping « . » PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE « , types ) ; » test Sse Response « ( true ) ; » test Sse Response « ( false ) ; }
@Test { String sequence = " Hello World ! " ; Stream . of ( » UTF _ 8 « , » UTF _ 16 « , » ISO _ 8859 _ 1 « , » US _ ASCII « , Charset . » for Name « ( " » BIG 5 « " ) ) . » for Each « ( charset -> { int capacity = this . encoder . » calculate Capacity « ( sequence , charset ) ; int length = sequence . length ( ) ; » assert That « ( capacity >= length ) . as ( String . format ( " % s has capacity % d ; length % d " , charset , capacity , length ) ) . » is True « ( ) ; } ) ; }
@Test { String » redirect Url « = " / redirect " ; response . » set Header « ( " Location " , » redirect Url « ) ; » assert That « ( response . » get Redirected Url « ( ) ) . » is Equal To « ( » redirect Url « ) ; }
@Test { » assert Not Null « ( wrapper . » get Property Value « ( " » multi List « [ 0 ] [ 0 ] " ) ) ; » assert That « ( bean . » get Multi List « ( ) . get ( 0 ) . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( bean . » get Multi List « ( ) . get ( 0 ) . get ( 0 ) ) . » is Instance Of « ( Bean . class ) ; }
@Test { » Method Invoker « » method Invoker « = new » Method Invoker « ( ) ; » method Invoker « . » set Target Object « ( new Greeter ( ) ) ; » method Invoker « . » set Target Method « ( " greet " ) ; » method Invoker « . » set Arguments « ( new Customer ( ) ) ; » method Invoker « . prepare ( ) ; String greeting = ( String ) » method Invoker « . invoke ( ) ; » assert That « ( greeting ) . » is Equal To « ( " customer : good day " ) ; }
@Test { » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( " org / springframework / context / annotation / » scoped Proxy No Tests « . xml " ) ; context . » get Bean Factory « ( ) . » register Scope « ( " » my Scope « " , new » Simple Map Scope « ( ) ) ; » Scoped Proxy Test Bean « bean = ( » Scoped Proxy Test Bean « ) context . » get Bean « ( " » scoped Proxy Test Bean « " ) ; » assert That « ( » Aop Utils « . » is Aop Proxy « ( bean ) ) . » is False « ( ) ; context . close ( ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Profile Annotated Component « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( » Profile Annotated Component « . » BEAN _ NAME « ) ) . » is False « ( ) ; }
@Test { » formatting Service « . » add Parser « ( new » Number Style Formatter « ( " # , # » 00 . 0 « # " ) ) ; » assert That « ( » formatting Service « . convert ( " 123.0 " , Integer . class ) ) . » is Equal To « ( 123 ) ; » assert That « ( » formatting Service « . convert ( 123 , String . class ) ) . » is Equal To « ( " 123 " ) ; }
@Test { » test Bean « . » do It « ( ) ; » assert That « ( » this As Class And Target As Class Counter « . » get Count « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { Foo foo = new Foo ( ) ; » assert That « ( » Jmx Utils « . » is M Bean « ( foo . » get Class « ( ) ) ) . as ( " Simple » M Bean « not detected correctly " ) . » is True « ( ) ; }
@Test { » do Test Send Destination « ( true , false , false , true ) ; }
@Test { » Dispatcher Servlet « servlet = new » Dispatcher Servlet « ( ) ; servlet . » set Context Class « ( » Xml Web Application Context « . class ) ; » assert That Exception Of Type « ( » Bean Definition Store Exception « . class ) . » is Thrown By « ( ( ) -> servlet . init ( new » Mock Servlet Config « ( new » Mock Servlet Context « ( " " ) , " test " ) ) ) . » with Cause Instance Of « ( » IO Exception « . class ) . satisfies ( ex -> » assert That « ( ex . » get Cause « ( ) ) . » has Message Containing « ( " / WEB - INF / test - servlet . xml " ) ) ; }
@Test { Comparator < Object > » custom Comparator « = this . comparator . » with Source Provider « ( new » Test Source Provider « ( 5L , new Object [ ] { new » Stub Ordered « ( 10 ) , new » Stub Ordered « ( - 25 ) } ) ) ; » assert That « ( » custom Comparator « . compare ( 5L , new Object ( ) ) ) . » is Equal To « ( - 1 ) ; }
@Test { this . resolvers . » add Resolver « ( new » Stub Argument Resolver « ( 1 ) ) ; this . resolvers . » add Resolver « ( new » Stub Argument Resolver « ( " » value 1 « " ) ) ; Method method = » Resolvable Method « . on ( Handler . class ) . » mock Call « ( c -> c . handle ( 0 , " " ) ) . method ( ) ; Object value = invoke ( new Handler ( ) , method , 2 , " » value 2 « " ) ; » assert That « ( value ) . » is Equal To « ( " 2 - » value 2 « " ) ; }
@Test { » Class Metadata « metadata = » get Class Metadata For « ( » L 0 _ b « . » L 1 « . class ) ; String [ ] » nested Classes « = metadata . » get Member Class Names « ( ) ; » assert That « ( » nested Classes « ) . » is Equal To « ( new String [ ] { } ) ; }
@Test { » Jndi Locator Delegate « » jndi Locator « = new » Jndi Locator Delegate « ( ) { @ Override public Object lookup ( String » jndi Name « ) throws » Naming Exception « { throw new » Illegal State Exception « ( " Should not get called " ) ; } } ; » jndi Locator « . » set Resource Ref « ( true ) ; » Jndi Property Source « ps = new » Jndi Property Source « ( " » jndi Properties « " , » jndi Locator « ) ; » assert That « ( ps . » get Property « ( " » property Key « : » default Value « " ) ) . » is Null « ( ) ; }
@Test { Set < Cacheable > cacheables = » get All Merged Annotations « ( » get Bridge Method « ( ) , Cacheable . class ) ; » assert That « ( cacheables ) . » is Not Null « ( ) ; » assert That « ( cacheables . size ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » Root Bean Definition « » bean Definition « = new » Root Bean Definition « ( » Extended Configuration With Attribute Override For Exclude Filter « . class . » get Name « ( ) ) ; » assert Support For Composed Annotation With Exclude « ( » bean Definition « ) ; }
@Test { evaluate ( " » map Of Numbers Up To Ten « . ! [ key > 5 ? value : null ] " , " [ null , null , null , null , null , six , seven , eight , nine , ten ] " , » Array List « . class ) ; }
@Test { String » mapping Path « = " org / springframework / beans / factory / xml / support / » non Existent « . properties " ; new » Default Namespace Handler Resolver « ( » get Class « ( ) . » get Class Loader « ( ) , » mapping Path « ) ; }
@Test { » assert Exception « ( » get Method « ( " » one Object « " ) , " target ( " , » Illegal State Exception « . class , " Failed to bind all argument names : 1 argument ( s ) could not be bound " ) ; » assert Exception « ( » get Method « ( " » one Object « " ) , " target ( x && foo ( ) " , » Illegal State Exception « . class , " Failed to bind all argument names : 1 argument ( s ) could not be bound " ) ; }
@Test { String number = " 987459837583750387355346 " ; » Big Decimal « decimal = new » Big Decimal « ( number ) ; » assert That « ( » Number Utils « . » convert Number To Target Class « ( decimal , » Big Integer « . class ) ) . » is Equal To « ( new » Big Integer « ( number ) ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Spel Expression « expr = parser . » parse Raw « ( " 2 + 3 * 5 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 17 ) ; }
@Test { Set < » Pete Repeat « > annotations = » get Annotations « ( null , » Pete Repeat « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « , » Repeatable Class « . class ) ; » assert That « ( annotations . stream ( ) . map ( » Pete Repeat « :: value ) ) . » contains Exactly « ( " A " , " B " , " C " ) ; }
@Test { String variant = " » proper _ northern « " ; String » locale String « = " » en _ GB _____ « " + variant ; Locale locale = » String Utils « . » parse Locale String « ( » locale String « ) ; » assert That « ( locale . » get Variant « ( ) ) . as ( " Multi - valued variant portion of the Locale not extracted correctly . " ) . » is Equal To « ( variant ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( Object . class , " » to String « " ) ; » Cache Defaults « mock = mock ( » Cache Defaults « . class ) ; given ( mock . » cache Name « ( ) ) . » will Return « ( " " ) ; » assert That « ( source . » determine Cache Name « ( method , mock , " " ) ) . » is Equal To « ( " java . lang . Object . » to String « ( ) " ) ; }
@Test { » Root Bean Definition « bd = new » Root Bean Definition « ( » Non Public Enum Holder « . class ) ; bd . » get Constructor Argument Values « ( ) . » add Generic Argument Value « ( " » VALUE _ 1 « " ) ; lbf . » register Bean Definition « ( " » holder Bean « " , bd ) ; » Non Public Enum Holder « holder = ( » Non Public Enum Holder « ) lbf . » get Bean « ( " » holder Bean « " ) ; » assert That « ( holder . » get Non Public Enum « ( ) ) . » is Equal To « ( » Non Public Enum « . » VALUE _ 1 « ) ; }
@Test { » assert That « ( » Stax Utils « . » is Stax Result « ( new » DOM Result « ( ) ) ) . as ( " A » St AX « Result " ) . » is False « ( ) ; » assert That « ( » Stax Utils « . » is Stax Result « ( new » SAX Result « ( ) ) ) . as ( " A » St AX « Result " ) . » is False « ( ) ; » assert That « ( » Stax Utils « . » is Stax Result « ( new » Stream Result « ( ) ) ) . as ( " A » St AX « Result " ) . » is False « ( ) ; }
@Test { » Annotation Metadata « » annotation Metadata « = get ( » Annotated Component « . class ) ; » assert That « ( » annotation Metadata « . » get Annotation Types « ( ) ) . » contains Exactly « ( » Enclosing Annotation « . class . » get Name « ( ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » add Properties Files To Environment « ( ( » Configurable Environment « ) null , mock ( » Resource Loader « . class ) , » FOO _ LOCATIONS « ) ) . » with Message Containing « ( " 'environment' must not be null " ) ; }
@Test { » Class Path Scanning Candidate Component Provider « provider = new » Class Path Scanning Candidate Component Provider « ( true ) ; provider . » set Resource Loader « ( new » Default Resource Loader « ( » Candidate Components Test Class Loader « . » disable Index « ( » get Class « ( ) . » get Class Loader « ( ) ) ) ) ; » test Ant Style « ( provider , » Scanned Generic Bean Definition « . class ) ; }
@Test { » assert That « ( editor . » get As Text « ( ) ) . as ( " Uninitialized editor did not return empty value string " ) . » is Equal To « ( EMPTY ) ; }
@Test { » Entity Manager Factory Info « emfi = ( » Entity Manager Factory Info « ) » entity Manager Factory « ; boolean » condition 1 « = emfi . » get Native Entity Manager Factory « ( ) instanceof org . hibernate . jpa . » Hibernate Entity Manager Factory « ; » assert That « ( » condition 1 « ) . » is True « ( ) ; boolean condition = emfi . » get Native Entity Manager Factory « ( ) instanceof » Session Factory « ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { » assert Bootstrapper « ( » Local Declaration And Meta Annotated Bootstrap With Annotation Class « . class , » Enigma Bootstrapper « . class ) ; }
@Test { Map < String , Object > scopes = new » Hash Map « < > ( ) ; scopes . put ( » FOO _ SCOPE « , » No Op Scope « . class ) ; » Custom Scope Configurer « figurer = new » Custom Scope Configurer « ( ) ; figurer . » set Scopes « ( scopes ) ; figurer . » post Process Bean Factory « ( factory ) ; boolean condition = factory . » get Registered Scope « ( » FOO _ SCOPE « ) instanceof » No Op Scope « ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { Object [ ] values = » find Repeated Annotation Values « ( » Repeatable Containers « . » standard Repeatables « ( ) , » With Standard Repeatables « . class , » Standard Container « . class ) ; » assert That « ( values ) . » contains Exactly « ( " a " , " b " ) ; }
@Test { » Locale Context Holder « . » set Locale « ( Locale . GERMANY ) ; URL url = this . configurer . » resolve Template « ( » get Class « ( ) . » get Class Loader « ( ) , » TEMPLATE _ PREFIX « + " » i 18 n « . tpl " ) ; » assert That « ( url ) . » is Not Null « ( ) ; » assert That « ( url . » get Path « ( ) ) . contains ( " » i 18 n _ de _ DE « . tpl " ) ; }
@Test { Assert . » not Empty « ( new String [ ] { " 1234 " } , ( ) -> " enigma " ) ; }
@Test { String » header Name « = " PARENT " ; String » header Value « = " VALUE " ; » Mock Mvc « » mock Mvc « = » Mock Mvc Builders « . » standalone Setup « ( new » Hello Controller « ( ) ) . » default Request « ( get ( " / " ) . header ( » header Name « , » header Value « ) ) . build ( ) ; » assert That « ( » mock Mvc « . perform ( » request Builder « ) . » and Return « ( ) . » get Request « ( ) . » get Header « ( » header Name « ) ) . » is Equal To « ( » header Value « ) ; }
@Test { » Http Message Not Readable Exception « ex = new » Http Message Not Readable Exception « ( " foo " ) ; » Model And View « mav = » exception Resolver « . » resolve Exception « ( request , response , null , ex ) ; » assert That « ( mav ) . as ( " No » Model And View « returned " ) . » is Not Null « ( ) ; » assert That « ( mav . » is Empty « ( ) ) . as ( " No Empty » Model And View « returned " ) . » is True « ( ) ; » assert That « ( response . » get Status « ( ) ) . as ( " Invalid status code " ) . » is Equal To « ( 400 ) ; }
@Test { » Data Buffer « buffer = new » Metadata Encoder « ( » Mime Type Utils « . » TEXT _ PLAIN « , this . strategies ) . metadata ( Unpooled . » wrapped Buffer « ( " Raw data " . » get Bytes « ( » UTF _ 8 « ) ) , null ) . encode ( ) . block ( ) ; » assert That « ( » dump String « ( buffer ) ) . » is Equal To « ( " Raw data " ) ; }
@Test { this . emitter . send ( event ( ) . comment ( " blah " ) . name ( " test " ) . » reconnect Time « ( 5000L ) . id ( " 1 " ) . data ( " foo " ) ) ; this . handler . » assert Sent Object Count « ( 3 ) ; this . handler . » assert Object « ( 0 , " : blah \n event : test \n retry : 5000 \n id : 1 \n data : " , » TEXT _ PLAIN _ UTF 8 « ) ; this . handler . » assert Object « ( 1 , " foo " ) ; this . handler . » assert Object « ( 2 , " \n \n " , » TEXT _ PLAIN _ UTF 8 « ) ; }
@Test { » Packages Annotation Filter « filter = new » Packages Annotation Filter « ( " com . example " ) ; » assert That « ( filter . matches ( " com . example . Component " ) ) . » is True « ( ) ; }
@Test { URI uri = URI . create ( " https : » // example . com « " ) ; » Default Server Request « request = new » Default Server Request « ( » Mock Server Web Exchange « . from ( » Mock Server Http Request « . method ( » Http Method « . GET , uri ) ) , this . » message Readers « ) ; » assert That « ( request . uri ( ) ) . » is Equal To « ( uri ) ; }
@Test { » I Test Bean « » test Bean « = ( » I Test Bean « ) factory . » get Bean « ( " » proxy Factory 2 Lazy « " ) ; » assert That « ( factory . » contains Singleton « ( " target " ) ) . » is False « ( ) ; » assert That « ( » test Bean « . » get Age « ( ) ) . » is Equal To « ( 666 ) ; » assert That « ( factory . » contains Singleton « ( " target " ) ) . » is True « ( ) ; }
@Test { Method method = » Transactional Service Impl « . class . » get Method « ( " » do It « " ) ; » assert That « ( » find Merged Annotation « ( method , Resource . class ) ) . » is Equal To « ( method . » get Annotation « ( Resource . class ) ) ; }
@Test { » test Bean « . » get Integers « ( ) ; » assert That « ( » counter Aspect « . » get Numbers Invocations Count « ) . » is Equal To « ( 1 ) ; }
@Test { String » test Server « = " test . server " ; int » test Port « = 9999 ; request . » add Header « ( HOST , » test Server « + " : " + » test Port « ) ; » assert That « ( request . » get Server Port « ( ) ) . » is Equal To « ( » test Port « ) ; }
@Test { List < Class < ? > > expected = » as List « ( » Servlet Test Execution Listener « . class , » Dirties Context Before Modes Test Execution Listener « . class , » Dependency Injection Test Execution Listener « . class , » Dirties Context Test Execution Listener « . class , » Transactional Test Execution Listener « . class , » Sql Scripts Test Execution Listener « . class , » Event Publishing Test Execution Listener « . class ) ; » assert Registered Listeners « ( » Default Listeners Test Case « . class , expected ) ; }
@Test { » Example Wrapper « wrapper = mock ( » Example Wrapper « . class ) ; given ( delegate . unwrap ( » Example Wrapper « . class ) ) . » will Return « ( wrapper ) ; » assert That « ( » data Source « . unwrap ( » Example Wrapper « . class ) ) . » is Equal To « ( wrapper ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Constructors Resource Injection Bean « . class ) ) ; » Test Bean « tb = new » Test Bean « ( ) ; bf . » register Singleton « ( " » test Bean « " , tb ) ; » Constructors Resource Injection Bean « bean = ( » Constructors Resource Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean 3 « ( ) ) . » is Same As « ( tb ) ; » assert That « ( bean . » get Test Bean 4 « ( ) ) . » is Null « ( ) ; }
@Test { » Caching Destination Resolver Proxy « < String > » resolver Proxy « = new » Caching Destination Resolver Proxy « < > ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( » resolver Proxy « :: » after Properties Set « ) ; }
@Test { » invocation Count « . set ( 0 ) ; » run Tests And Assert Counters « ( » get Runner Class « ( ) , this . » test Class « , » expected Started Count « , » expected Failure Count « , » expected Finished Count « , 0 , 0 ) ; » assert That « ( » invocation Count « . get ( ) ) . as ( " invocations for [ " + » test Class « + " ] : " ) . » is Equal To « ( » expected Invocation Count « ) ; }
@Test { » Illegal Argument Exception « exception = new » Illegal Argument Exception « ( ) ; » assert That « ( this . resolver . » resolve Method « ( exception ) . » get Name « ( ) ) . » is Equal To « ( " » handle Illegal Argument Exception « " ) ; }
@Test { » assert That « ( » conversion Service « . convert ( Optional . empty ( ) , » Type Descriptor « . » value Of « ( Object . class ) , » Type Descriptor « . » value Of « ( Optional . class ) ) ) . » is Same As « ( Optional . empty ( ) ) ; » assert That « ( ( Object ) » conversion Service « . convert ( Optional . empty ( ) , Optional . class ) ) . » is Same As « ( Optional . empty ( ) ) ; }
@Test { given ( request . » get Attribute « ( View . » PATH _ VARIABLES « ) ) . » will Return « ( null ) ; given ( request . » get Request Dispatcher « ( url ) ) . » will Return « ( new » Mock Request Dispatcher « ( url ) ) ; view . » set Url « ( url ) ; view . » set Always Include « ( true ) ; view . render ( model , request , response ) ; » assert That « ( response . » get Included Url « ( ) ) . » is Equal To « ( url ) ; model . » for Each « ( ( key , value ) -> verify ( request ) . » set Attribute « ( key , value ) ) ; }
@Test { » do Test Strings « ( null , null , null , null , ( template , sql , rch ) -> template . query ( sql , rch ) ) ; }
@Test { » assert That « ( » conversion Service « . » can Convert « ( null , Integer . class ) ) . » is True « ( ) ; » assert That « ( » conversion Service « . » can Convert « ( null , » Type Descriptor « . » value Of « ( Integer . class ) ) ) . » is True « ( ) ; }
@Test { » test Cacheable « ( this . cs ) ; }
@Test { » Input Stream Editor « editor = new » Input Stream Editor « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> editor . » set As Text « ( " classpath : bingo ! " ) ) ; }
@Test { » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> » get Bean Container « ( ) . » get Bean « ( » No Definition In Spring Context Test Bean « . class , » Native Lifecycle Options « . INSTANCE , » Ineffective Bean Instance Producer « . INSTANCE ) ) ; }
@Test { » Default Listable Bean Factory « bf = new » Default Listable Bean Factory « ( ) ; » Xml Bean Definition Reader « » xml Bean Definition Reader « = new » Xml Bean Definition Reader « ( bf ) ; » xml Bean Definition Reader « . » set Validating « ( false ) ; » xml Bean Definition Reader « . » load Bean Definitions « ( new » Class Path Resource « ( " » Nested Beans Element Attribute Recursion Tests « - lazy - context . xml " , this . » get Class « ( ) ) ) ; » assert Lazy Inits « ( bf ) ; }
@Test { » set Test Groups « ( PERFORMANCE ) ; » assert That Exception Of Type « ( » Test Aborted Exception « . class ) . » is Thrown By « ( ( ) -> » assume Group « ( » LONG _ RUNNING « ) ) ; }
@Test { » assert That « ( request . » is Secure « ( ) ) . » is False « ( ) ; request . » set Scheme « ( " https " ) ; request . » set Secure « ( true ) ; » assert That « ( request . » is Secure « ( ) ) . » is True « ( ) ; }
@Test { » Transactional Operator « operator = » Transactional Operator « . create ( tm , new » Default Transaction Definition « ( ) ) ; Mono . just ( true ) . as ( operator :: transactional ) . as ( » Step Verifier « :: create ) . » expect Next « ( true ) . » verify Complete « ( ) ; » assert That « ( tm . commit ) . » is True « ( ) ; » assert That « ( tm . rollback ) . » is False « ( ) ; }
@Test { » assert That « ( » Data Size « . parse ( " + 1024 B " ) ) . » is Equal To « ( » Data Size « . » of Kilobytes « ( 1 ) ) ; }
@Test { ctx = new » Annotation Config Application Context « ( » Scheduling Enabled _ with Ambiguous Task Schedulers _ but No Actual Tasks « . class ) ; }
@Test { » assert That « ( » get Handler « ( " » / resources / « * * " ) . » get Cache Seconds « ( ) ) . » is Equal To « ( - 1 ) ; this . registration . » set Cache Period « ( 0 ) ; » assert That « ( » get Handler « ( " » / resources / « * * " ) . » get Cache Seconds « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . » test Method « . arg ( Principal . class ) ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » test Method « . arg ( Mono . class , Principal . class ) ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » test Method « . arg ( Single . class , Principal . class ) ) ) . » is True « ( ) ; }
@Test { » web Request « . » set Request Parameters « ( Arrays . » as List « ( new » Name Value Pair « ( " name " , " value " ) ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Parameter Map « ( ) . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( » actual Request « . » get Parameter « ( " name " ) ) . » is Equal To « ( " value " ) ; }
@Test { » Generic Type « < Number > » generic Bean « = new » Number Type « ( ) ; Property property = new Property ( » get Class « ( ) , » generic Bean « . » get Class « ( ) . » get Method « ( " » get Property « " ) , » generic Bean « . » get Class « ( ) . » get Method « ( " » set Property « " , Number . class ) ) ; » Type Descriptor « desc = new » Type Descriptor « ( property ) ; » assert That « ( desc . » get Type « ( ) ) . » is Equal To « ( Integer . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is True « ( false , ( Supplier < String > ) null ) ) . » with Message « ( null ) ; }
@Test { » assert That Exception Of Type « ( » Evaluation Exception « . class ) . » is Thrown By « ( parser . » parse Expression « ( " null ? 0 : 1 " ) :: » get Value « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Profiles . of ( " " ) ) . » with Message Containing « ( " must contain text " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> environment . » accepts Profiles « ( " " ) ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " java : foo " , o ) ) ; jof . » set Jndi Name « ( " java : foo " ) ; jof . » set Resource Ref « ( false ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » pjp And An Annotation « " ) , " execution ( * * ( . . ) ) && @ annotation ( ann ) " , new String [ ] { " » this Join Point « " , " ann " } ) ; }
@Test { » Type Descriptor « » type Descriptor « = new » Type Descriptor « ( » Type Descriptor Tests « . class . » get Declared Field « ( " » int Array « " ) ) ; » assert That « ( » type Descriptor « . » is Array « ( ) ) . » is True « ( ) ; » assert That « ( » type Descriptor « . » get Element Type Descriptor « ( ) . » get Type « ( ) ) . » is Equal To « ( Integer . TYPE ) ; » assert That « ( » type Descriptor « . » to String « ( ) ) . » is Equal To « ( " int [ ] " ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / persons / 1 " ) . header ( » IF _ MODIFIED _ SINCE « , » minute Ago « ) ) . » and Expect « ( header ( ) . string ( » LAST _ MODIFIED « , » equal To « ( now ) ) ) ; }
@Test { Person target = » create Person « ( " John " , " London " , " UK " ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; » assert That Exception Of Type « ( » Not Readable Property Exception « . class ) . » is Thrown By « ( ( ) -> accessor . » get Property Value « ( " address . bar " ) ) ; }
@Test { Map < String , Object > scopes = new » Hash Map « < > ( ) ; scopes . put ( » FOO _ SCOPE « , this ) ; » Custom Scope Configurer « figurer = new » Custom Scope Configurer « ( ) ; figurer . » set Scopes « ( scopes ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> figurer . » post Process Bean Factory « ( factory ) ) ; }
@Test { » Headers Request Condition « condition = new » Headers Request Condition « ( " ! accept " ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Not Null « ( ) ; }
@Test { » assert That « ( parse ( " form - data ; name = \" name \" ; filename *= UTF - 8 '' % » E 4 « % » B 8 « % AD % » E 6 « % 96 % 87. txt " ) ) . » is Equal To « ( builder ( " form - data " ) . name ( " name " ) . filename ( " 中文 . txt " , » Standard Charsets « . » UTF _ 8 « ) . build ( ) ) ; }
@Test { this . tag . » set Path « ( " country " ) ; this . tag . » set Items « ( null ) ; this . tag . » set Item Value « ( " » iso Code « " ) ; this . tag . » set Item Label « ( " name " ) ; int result = this . tag . » do Start Tag « ( ) ; » assert That « ( result ) . » is Equal To « ( Tag . » SKIP _ BODY « ) ; String output = » get Output « ( ) ; » assert That « ( output ) . » is Equal To « ( " < select id = \" country \" name = \" country \" > < / select > " ) ; }
@Test { » assert That « ( this . missing . » get Default Value « ( " value " , Integer . class ) ) . » is Empty « ( ) ; }
@Test { try { load ( » Multi Cache Manager Config « . class ) ; } catch ( » Illegal State Exception « ex ) { » assert That « ( ex . » get Message « ( ) . contains ( " bean of type » Cache Manager « " ) ) . » is True « ( ) ; } }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Annotated Default Constructor Bean « . class ) ) ; » assert That « ( bf . » get Bean « ( " » annotated Bean « " ) ) . » is Not Null « ( ) ; }
@Test { » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( » Web Controller « . class ) . get ( Component . class ) ; » assert That « ( annotation . » get String « ( " value " ) ) . » is Equal To « ( " » web Controller « " ) ; }
@Test { » assert That « ( » Class Utils « . » is Primitive Or Wrapper « ( boolean . class ) ) . » is True « ( ) ; }
@Test { this . » servlet Request « . » add Header « ( » Http Headers « . ORIGIN , " https : » // mydomain 1 . example « " ) ; » Origin Handshake Interceptor « interceptor = new » Origin Handshake Interceptor « ( ) ; interceptor . » set Allowed Origins « ( Collections . » singleton List « ( " * " ) ) ; » assert That « ( interceptor . » before Handshake « ( request , response , » ws Handler « , attributes ) ) . » is True « ( ) ; » assert That « ( » Http Status « . FORBIDDEN . value ( ) ) . » is Not Equal To « ( ( long ) » servlet Response « . » get Status « ( ) ) ; }
@Test { » do Test Translation Needed For These Exceptions « ( new » My Stereotyped Repository Interface Impl « ( ) ) ; }
@Test { » Test Validator « validator = new » Test Validator « ( ) ; » Resolvable Type « type = » Resolvable Type « . » for Class With Generics « ( Mono . class , String . class ) ; » Method Parameter « param = this . » test Method « . arg ( type ) ; Mono < Object > mono = » resolve Value « ( param , Mono . just ( » to Data Buffer « ( " 12345 " ) ) , validator ) ; » Step Verifier « . create ( mono ) . » expect Next Count « ( 0 ) . » expect Error « ( » Method Argument Not Valid Exception « . class ) . verify ( ) ; }
@Test { this . request . » set Attribute « ( » Handler Mapping « . » PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE « , " foo . css " ) ; this . request . » add Header « ( " If - Modified - Since " , » resource Last Modified « ( " test / foo . css " ) ) ; this . handler . » handle Request « ( this . request , this . response ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( » Http Servlet Response « . » SC _ NOT _ MODIFIED « ) ; }
@Test { » do Test « ( new » Fixed Locale Resolver « ( Locale . UK ) , false ) ; }
@Test { handler = new » Dom Content Handler « ( result ) ; expected = » document Builder « . parse ( new » Input Source « ( new » String Reader « ( » XML _ 1 « ) ) ) ; » xml Reader « . » set Content Handler « ( handler ) ; » xml Reader « . parse ( new » Input Source « ( new » String Reader « ( » XML _ 1 « ) ) ) ; » assert That « ( » Xml Content « . of ( result ) ) . as ( " Invalid result " ) . » is Similar To « ( expected ) ; }
@Test { String body = " » Foo Bar « " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( " UTF - 8 " ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( new » Media Type « ( " application " , " json " ) ) ; » assert That Exception Of Type « ( » Http Message Not Readable Exception « . class ) . » is Thrown By « ( ( ) -> this . converter . read ( » My Bean « . class , » input Message « ) ) ; }
@Test { » assert That « ( » Test Group « . parse ( null ) ) . » is Equal To « ( Collections . » empty Set « ( ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Model M Bean Notification Publisher « ( new » Spring Model M Bean « ( ) , null , this ) ) ; }
@Test { Collection < » Cache Operation « > ops = » get Ops « ( » Annotated Class With Some Default « . class , " » method Level Cache Manager « " , 1 ) ; » Cache Operation « » cache Operation « = ops . iterator ( ) . next ( ) ; » assert Shared Config « ( » cache Operation « , " » class Key Generator « " , " custom " , " " , " » class Cache Name « " ) ; }
@Test { » Transaction Attribute Editor « pe = new » Transaction Attribute Editor « ( ) ; pe . » set As Text « ( " " ) ; » Transaction Attribute « ta = ( » Transaction Attribute « ) pe . » get Value « ( ) ; » assert That « ( ta == null ) . » is True « ( ) ; }
@Test { URI location = URI . create ( " https : » // example . com « " ) ; Mono < » Server Response « > result = » Server Response « . » temporary Redirect « ( location ) . build ( ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> » Http Status « . » TEMPORARY _ REDIRECT « . equals ( response . » status Code « ( ) ) && location . equals ( response . headers ( ) . » get Location « ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get Field « ( ( Object ) null , " id " ) ) . » with Message Starting With « ( " Either » target Object « or » target Class « " ) ; }
@Test { » do Test Send Destination « ( true , true , false , false ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) . header ( " foo " , " bar " ) ) ; » Headers Request Condition « condition = new » Headers Request Condition « ( " foo != bar " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { this . » messaging Template « . » set Default Destination Name « ( " » my Queue « " ) ; Message < String > message = » create Text Message « ( ) ; this . » messaging Template « . send ( message ) ; verify ( this . » jms Template « ) . send ( eq ( " » my Queue « " ) , this . » message Creator « . capture ( ) ) ; » assert Text Message « ( this . » message Creator « . » get Value « ( ) ) ; }
@Test { » assert That « ( employee ) . as ( " The employee should have been autowired . " ) . » is Not Null « ( ) ; » assert That « ( employee . » get Name « ( ) ) . » is Equal To « ( " John Smith " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » Abstract Bean Definition « bd = ( » Abstract Bean Definition « ) xbf . » get Bean Definition « ( " string " ) ; bd . » set Lenient Constructor Resolution « ( false ) ; String str = ( String ) xbf . » get Bean « ( " string " ) ; » assert That « ( str ) . » is Equal To « ( " test " ) ; }
@Test { String » expected Query « = " param " ; » web Request « . » set Url « ( new URL ( " https : » // example . com / example « ? " + » expected Query « ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Query String « ( ) ) . » is Equal To « ( » expected Query « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » create Http Request « ( " / " ) . mutate ( ) . path ( " foo - bar " ) ) ; }
@Test { » Method Parameter « parameter = on ( » Test Controller « . class ) . » resolve Return Type « ( Object . class ) ; this . handler . » handle Return Value « ( " foo " , parameter , this . message ) . block ( ) ; Flux < String > result = this . handler . » get Content As Strings « ( ) ; » Step Verifier « . create ( result ) . » expect Next « ( " foo " ) . » verify Complete « ( ) ; }
@Test { » generic Test Scope « ( " » scoped Interface « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is Assignable « ( String . class , Integer . class , ( ) -> " enigma " ) ) . » with Message Containing « ( " enigma : class java . lang . Integer " ) ; }
@Test { Method method = » Implements Interface With Annotated Method « . class . » get Method « ( " foo " ) ; » assert That « ( » Merged Annotations « . from ( method , » Search Strategy « . » TYPE _ HIERARCHY « ) . get ( Order . class ) . » get Distance « ( ) ) . » is Equal To « ( 0 ) ; }
@Test { new » Json Path Request Matchers « ( " $ . » color Map « " ) . » is Not Empty « ( ) . match ( request ) ; }
@Test { Assert . » has Length « ( " \t " , " enigma " ) ; }
@Test { » assert That Exception Of Type « ( » Aop Config Exception « . class ) . » is Thrown By « ( ( ) -> » get Fixture « ( ) . » get Advisors « ( new » Singleton Metadata Aware Aspect Instance Factory « ( new » Per Cflow Below Aspect « ( ) , " » some Bean « " ) ) ) . » with Message Containing « ( " PERCFLOWBELOW " ) ; }
@Test { » do Test Transaction Rollback Restoring Auto Commit « ( true , false , false ) ; }
@Test { Exception exception = new Exception ( " transport error " ) ; » will Throw « ( new » Illegal State Exception « ( " error " ) ) . given ( this . delegate ) . » handle Transport Error « ( this . session , exception ) ; this . decorator . » handle Transport Error « ( this . session , exception ) ; » assert That « ( this . session . » get Close Status « ( ) ) . » is Equal To « ( » Close Status « . » SERVER _ ERROR « ) ; }
@Test { request . » get Reader « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( request :: » get Input Stream « ) . » with Message Containing « ( " Cannot call » get Input Stream « ( ) after » get Reader « ( ) has already been called for the current request " ) ; }
@Test { » Test Bean « rod = new » Test Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( rod , " person " ) ; binder . » set Ignore Unknown Fields « ( false ) ; » Mutable Property Values « pvs = new » Mutable Property Values « ( ) ; pvs . add ( " name " , " Rod " ) ; pvs . add ( " age " , 32 ) ; pvs . add ( " » non Existing « " , " » some Value « " ) ; » assert That Exception Of Type « ( » Not Writable Property Exception « . class ) . » is Thrown By « ( ( ) -> binder . bind ( pvs ) ) ; }
@Test { » do Test Exception Translation With Dialect Found « ( ( ( » Entity Manager Factory Info « ) » entity Manager Factory « ) . » get Jpa Dialect « ( ) ) ; }
@Test { » assert That Thrown By « ( ( ) -> » Mock Rest Request Matchers « . header ( " foo " , » contains String « ( " baz " ) ) . match ( this . request ) ) . » is Instance Of « ( » Assertion Error « . class ) . » has Message Containing « ( " but was null " ) ; }
@Test { » Stomp Header Accessor « headers = » Stomp Header Accessor « . create ( » Stomp Command « . SEND ) ; headers . » add Native Header « ( " a " , " alpha " ) ; Message < byte [ ] > frame = » Message Builder « . » create Message « ( " Message body " . » get Bytes « ( ) , headers . » get Message Headers « ( ) ) ; » assert That « ( new String ( encoder . encode ( frame ) ) ) . » is Equal To « ( " SEND \n a : alpha \n » content - length : 12 « \n \n Message » body \ 0 « " ) ; }
@Test { factory . » set Target Bean Name « ( » BEAN _ NAME « ) ; factory . » set Method Name « ( " » to String « ( ) " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> factory . » set Bean Factory « ( » bean Factory « ) ) ; verify ( » bean Factory « ) . » get Type « ( » BEAN _ NAME « ) ; }
@Test { » Counting Refreshable Target Source « ts = new » Counting Refreshable Target Source « ( true ) ; ts . » set Refresh Check Delay « ( 0 ) ; Object a = ts . » get Target « ( ) ; Thread . sleep ( 100 ) ; Object b = ts . » get Target « ( ) ; » assert That « ( ts . » get Call Count « ( ) ) . as ( " Should have called » fresh Target « twice " ) . » is Equal To « ( 2 ) ; » assert That « ( b ) . as ( " Should be different objects " ) . » is Not Same As « ( a ) ; }
@Test { » Value Attribute « annotation = » Annotated Element Utils « . » get Merged Annotation « ( » Value Attribute Meta Meta Class « . class , » Value Attribute « . class ) ; » assert That « ( annotation . value ( ) ) . » contains Exactly « ( " » From Value Attribute Meta « " ) ; }
@Test { » initialize Add Invoice With Meta Data « ( true ) ; » Simple Jdbc Call « adder = new » Simple Jdbc Call « ( » data Source « ) . » with Function Name « ( " » add _ invoice « " ) ; Number » new Id « = adder . » execute Function « ( Number . class , 1103 , 3 ) ; » assert That « ( » new Id « . » int Value « ( ) ) . » is Equal To « ( 4 ) ; » verify Add Invoice With Meta Data « ( true ) ; verify ( connection , » at Least Once « ( ) ) . close ( ) ; }
@Test { » assert That « ( » Stax Utils « . » is Stax Source « ( new » DOM Source « ( ) ) ) . as ( " A » St AX « Source " ) . » is False « ( ) ; » assert That « ( » Stax Utils « . » is Stax Source « ( new » SAX Source « ( ) ) ) . as ( " A » St AX « Source " ) . » is False « ( ) ; » assert That « ( » Stax Utils « . » is Stax Source « ( new » Stream Source « ( ) ) ) . as ( " A » St AX « Source " ) . » is False « ( ) ; }
@Test { » assert That « ( this . resolver . » resolve Locale « ( request ( CANADA ) ) ) . » is Equal To « ( CANADA ) ; » assert That « ( this . resolver . » resolve Locale « ( request ( US , CANADA ) ) ) . » is Equal To « ( US ) ; }
@Test { » Multi Value Map « < String , Object > map = » Merged Annotations « . from ( » Non Annotated Class « . class ) . stream ( Transactional . class ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( ) ) ; » assert That « ( map ) . » is Empty « ( ) ; }
@Test { response . » add Header « ( " Content - Length " , " 66 " ) ; » assert That « ( response . » get Content Length « ( ) ) . » is Equal To « ( 66 ) ; » assert That « ( response . » get Header « ( " Content - Length " ) ) . » is Equal To « ( " 66 " ) ; }
@Test { » assert That « ( » is Empty « ( new » String Builder « ( ) ) ) . » is True « ( ) ; » assert That « ( » is Empty « ( " " ) ) . » is True « ( ) ; » assert That « ( » is Empty « ( new » String Builder « ( " foo " ) ) ) . » is False « ( ) ; » assert That « ( » is Empty « ( " " ) ) . » is False « ( ) ; » assert That « ( » is Empty « ( " \t " ) ) . » is False « ( ) ; » assert That « ( » is Empty « ( " foo " ) ) . » is False « ( ) ; }
@Test { Set < » Pete Repeat « > annotations = » get Annotations « ( null , » Pete Repeat « . class , » Search Strategy « . » TYPE _ HIERARCHY « , » Composed Container Class « . class ) ; » assert That « ( annotations . stream ( ) . map ( » Pete Repeat « :: value ) ) . » contains Exactly « ( " A " , " B " , " C " ) ; }
@Test { » Test Bean « target = new » Test Bean « ( ) ; int » new Age « = 33 ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; target . » set Age « ( » new Age « ) ; Object » bw Age « = accessor . » get Property Value « ( " age " ) ; » assert That « ( » bw Age « instanceof Integer ) . as ( " Age is an integer " ) . » is True « ( ) ; » assert That « ( » bw Age « ) . as ( " Bean wrapper must pick up changes " ) . » is Equal To « ( » new Age « ) ; }
@Test { long timestamp = 123L ; javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; » jms Message « . » set JMS Timestamp « ( timestamp ) ; » assert Inbound Header « ( » jms Message « , » Jms Headers « . TIMESTAMP , timestamp ) ; }
@Test { load ( » Multi Cache Manager Configurer « . class ) ; }
@Test { » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> this . » config Source « . » get Cors Configurations « ( ) . put ( " / * * " , new » Cors Configuration « ( ) ) ) ; }
@Test { » Multi Value Map « < String , Object > map = » Merged Annotations « . from ( » Sub Sub Class With Inherited Annotation « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . stream ( Transactional . class ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( ) ) ; » assert That « ( map ) . contains ( entry ( " qualifier " , Arrays . » as List « ( " » transaction Manager « " ) ) ) ; }
@Test { this . resolvers . add ( new » Stub Argument Resolver « ( 1 ) ) ; this . resolvers . add ( new » Stub Argument Resolver « ( " » value 1 « " ) ) ; Method method = » Resolvable Method « . on ( Handler . class ) . » mock Call « ( c -> c . handle ( 0 , " " ) ) . method ( ) ; Object value = » invoke And Block « ( new Handler ( ) , method , 2 , " » value 2 « " ) ; » assert That « ( value ) . » is Equal To « ( " 2 - » value 2 « " ) ; }
@Test { » assert That « ( » get All Annotation Attributes « ( » Non Annotated Class « . class , » TX _ NAME « ) ) . » is Null « ( ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( » Sample Events « . class , " » handle Raw « " , » Application Event « . class ) ; » supports Event Type « ( true , method , » Resolvable Type « . » for Class « ( » Application Event « . class ) ) ; }
@Test { » Log Message « msg = » Log Message « . format ( " a % s " , " b " ) ; » assert That « ( msg . » to String « ( ) ) . » is Equal To « ( " a b " ) ; » assert That « ( msg . » to String « ( ) ) . » is Same As « ( msg . » to String « ( ) ) ; }
@Test { class Foo { @ Override public String » to String « ( ) { return super . » to String « ( ) ; } } int » to String Method Count « = 0 ; for ( Method method : » Reflection Utils « . » get All Declared Methods « ( Foo . class ) ) { if ( method . » get Name « ( ) . equals ( " » to String « " ) ) { » to String Method Count « ++ ; } } » assert That « ( » to String Method Count « ) . » is Equal To « ( 2 ) ; }
@Test { map . add ( " key " , " » value 1 « " ) ; map . add ( " key " , " » value 2 « " ) ; » assert That « ( map ) . » has Size « ( 1 ) ; » assert That « ( map . get ( " key " ) ) . » contains Exactly « ( " » value 1 « " , " » value 2 « " ) ; }
@Test { new » Json Path Request Matchers « ( " $ . num " ) . value ( 5.0f ) . match ( request ) ; }
@Test { ctx = new » Annotation Config Application Context « ( » Scheduling Enabled _ with Ambiguous Task Schedulers _ and Single Task _ disambiguated By Scheduled Task Registrar « . class ) ; Thread . sleep ( 100 ) ; » assert That « ( ctx . » get Bean « ( » Thread Aware Worker « . class ) . » executed By Thread « ) . » starts With « ( " » explicit Scheduler 2 « - " ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » set Content Type « ( " text / plain " ) ; » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " , " application / xml " ) ; » Consumes Request Condition « result = condition . » get Matching Condition « ( request ) ; » assert Conditions « ( result , " text / plain " ) ; condition = new » Consumes Request Condition « ( " application / xml " ) ; result = condition . » get Matching Condition « ( request ) ; » assert That « ( result ) . » is Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Bean Wiring Info « ( " \t " ) ) ; }
@Test { » formatting Service « . » add Formatter For Field Type « ( Number . class , new » Number Style Formatter « ( ) ) ; » assert That « ( » formatting Service « . convert ( " " , » Type Descriptor « . » value Of « ( String . class ) , » Type Descriptor « . » value Of « ( Integer . class ) ) ) . » is Null « ( ) ; }
@Test { » assert That « ( resolver . » supports Parameter « ( » param Named Cookie « ) ) . as ( " Cookie parameter not supported " ) . » is True « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Named Default Value String « ) ) . as ( " Cookie string parameter not supported " ) . » is True « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param String « ) ) . as ( " non - @ » Cookie Value « parameter supported " ) . » is False « ( ) ; }
@Test { » Simple Message Listener Container « container = new » Simple Message Listener Container « ( ) ; » Message Listener « » message Listener « = new » Message Listener Adapter « ( ) ; » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; endpoint . » set Concurrency « ( " 5 - 10 " ) ; endpoint . » set Message Listener « ( » message Listener « ) ; endpoint . » setup Listener Container « ( container ) ; » assert That « ( new » Direct Field Accessor « ( container ) . » get Property Value « ( " » concurrent Consumers « " ) ) . » is Equal To « ( 10 ) ; }
@Test { map . set ( " key " , " » value 1 « " ) ; map . set ( " key " , " » value 2 « " ) ; » assert That « ( map . get ( " key " ) ) . » contains Exactly « ( " » value 2 « " ) ; }
@Test { evaluate ( " 'Tony' 's Pizza' " , " Tony » ' s « Pizza " , String . class ) ; evaluate ( " 'Tony \\r ' 's Pizza' " , " Tony \\r » ' s « Pizza " , String . class ) ; }
@Test { » assert That « ( » EMPTY _ CONDITION « . combine ( » CONNECT _ CONDITION « ) . » get Frame Types « ( ) ) . » contains Exactly « ( » Frame Type « . SETUP , » Frame Type « . » METADATA _ PUSH « ) ; » assert That « ( » EMPTY _ CONDITION « . combine ( new » R Socket Frame Type Message Condition « ( » Frame Type « . » REQUEST _ FNF « ) ) . » get Frame Types « ( ) ) . » contains Exactly « ( » Frame Type « . » REQUEST _ FNF « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Type Pattern Class Filter « ( " - " ) ) ; }
@Test { » assert At Component On Composed Annotation « ( » Class With Local Meta Annotation And Meta Annotated Interface « . class , " » meta 2 « " , » Meta 2 « . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Rollback Rule Attribute « ( ( Class < ? > ) null ) ) ; }
@Test { Constants c = new Constants ( A . class ) ; Set < ? > values = c . » get Values « ( " " ) ; » assert That « ( values . size ( ) ) . as ( " Must have returned * all * public static final values " ) . » is Equal To « ( 7 ) ; }
@Test { » My Bean Impl « . initialized = false ; » Application Context « ctx = new » Annotation Config Application Context « ( » Config With Static « . class ) ; » My Bean « bean = ctx . » get Bean « ( " » my Bean « " , » My Bean « . class ) ; » assert That « ( » My Bean Impl « . initialized ) . » is False « ( ) ; bean . » do It « ( ) ; » assert That « ( » My Bean Impl « . initialized ) . » is True « ( ) ; }
@Test { Comparator < String > c = » Null Safe Comparator « . » NULLS _ HIGH « ; » assert That « ( c . compare ( null , " boo " ) > 0 ) . » is True « ( ) ; » assert That « ( c . compare ( null , null ) == 0 ) . » is True « ( ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( new » Method Parameter « ( this . » handle Method « , 0 ) ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( new » Method Parameter « ( this . » handle Method « , - 1 ) ) ) . » is False « ( ) ; }
@Test { List < Object > resources = new » Array List « < > ( ) ; resources . add ( new » Class Path Resource « ( " test " ) ) ; resources . add ( 3 ) ; » Type Descriptor « » source Type « = » Type Descriptor « . » for Object « ( resources ) ; » assert That Exception Of Type « ( » Conversion Failed Exception « . class ) . » is Thrown By « ( ( ) -> » conversion Service « . convert ( resources , » source Type « , new » Type Descriptor « ( » get Class « ( ) . » get Field « ( " resources " ) ) ) ) ; }
@Test { long expiration = 1000L ; javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; » jms Message « . » set JMS Expiration « ( expiration ) ; » assert Inbound Header « ( » jms Message « , » Jms Headers « . EXPIRATION , expiration ) ; }
@Test { » Generic Application Context « ctx = new » Generic Application Context « ( ) ; » register Misconfigured Bean Definition « ( ctx ) ; » assert Factory Count Throughout Lifecycle « ( ctx ) ; }
@Test { » assert Merged Test Property Sources « ( » Overridden Locations And Properties Property Sources « . class , » as Array « ( " classpath : / baz . properties " ) , » KEY _ VALUE _ PAIR « ) ; }
@Test { » assert Merged Test Property Sources « ( » Extended Property Sources « . class , » as Array « ( " classpath : / » foo 1 « . xml " , " classpath : / » foo 2 « . xml " , " classpath : / » bar 1 « . xml " , " classpath : / » bar 2 « . xml " ) , » as Array « ( " » k 1 a « = » v 1 a « " , " » k 1 b « : » v 1 b « " , " » k 2 a « » v 2 a « " , " » k 2 b « : » v 2 b « " ) ) ; }
@Test { » Class Path Xml Application Context « ctx = new » Class Path Xml Application Context « ( » get Class « ( ) . » get Simple Name « ( ) + " - with - bpp . xml " , » get Class « ( ) ) ; » I Test Bean « tb = ( » I Test Bean « ) ctx . » get Bean « ( " » test Bean « " ) ; tb . » get Name « ( ) ; » get Advice Impl « ( tb ) . » get Invocation Counter « ( ) ; }
@Test { String uri = » request Builder « . » build Request « ( » servlet Context « ) . » get Request URL « ( ) . » to String « ( ) ; » assert That « ( uri ) . » is Equal To « ( " https : » // example . com / test / this / here « " ) ; }
@Test { » set Value Expect Error « ( " » places Lived « [ 23 ] " , " Wien " ) ; » set Value Expect Error « ( " » places Lived List « [ 23 ] " , " Wien " ) ; }
@Test { » initialize Add Invoice With Meta Data « ( true ) ; » Simple Jdbc Call « adder = new » Simple Jdbc Call « ( » data Source « ) . » with Named Binding « ( ) . » with Function Name « ( " » add _ invoice « " ) ; adder . compile ( ) ; » verify Statement « ( adder , " { ? = call » ADD _ INVOICE « ( AMOUNT = > ? , CUSTID = > ? ) } " ) ; }
@Test { » test Context Manager « . » before Test Class « ( ) ; verify ( listener , only ( ) ) . » before Test Class « ( » test Context « ) ; }
@Test { » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( » Sub Class With Inherited Annotation « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . get ( Transactional . class ) ; » assert That « ( annotation . » get Boolean « ( " » read Only « " ) ) . » is True « ( ) ; }
@Test { » Method Parameter « param = this . » test Method « . » annot Not Present « ( » Request Param « . class ) . arg ( String . class ) ; Object result = resolver . » resolve Argument « ( param , null , » web Request « , null ) ; » assert That « ( result ) . » is Null « ( ) ; }
@Test { » Mapped Interceptor « » mapped Interceptor « = new » Mapped Interceptor « ( new String [ ] { " » / foo / « * " } , this . interceptor ) ; » assert That « ( » mapped Interceptor « . matches ( " / foo / bar " , » path Matcher « ) ) . » is True « ( ) ; » assert That « ( » mapped Interceptor « . matches ( " / bar / foo " , » path Matcher « ) ) . » is False « ( ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression expr = parser . » parse Expression « ( " The quick $ { 'brown' } fox jumped over the $ { 'lazy' } dog " , » DEFAULT _ TEMPLATE _ PARSER _ CONTEXT « ) ; Object o = expr . » get Value « ( ) ; » assert That « ( o . » to String « ( ) ) . » is Equal To « ( " The quick brown fox jumped over the lazy dog " ) ; }
@Test { » do Test « ( " 53 " , » Data Access Resource Failure Exception « . class ) ; }
@Test { Number » expected Number « = 10.21f - 10.2 ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.21f - 10.2 " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Number « ) ; }
@Test { » Messaging Message Listener Adapter « listener = » create Default Instance « ( Integer . class ) ; Session session = mock ( Session . class ) ; » assert That Exception Of Type « ( » Listener Execution Failed Exception « . class ) . » is Thrown By « ( ( ) -> listener . » on Message « ( » create Simple Jms Text Message « ( " test " ) , session ) ) . » with Cause Instance Of « ( » Message Conversion Exception « . class ) . » with Message Containing « ( » get Default Listener Method « ( Integer . class ) . » to Generic String « ( ) ) ; }
@Test { » test Bean Proxy « . » get Age « ( ) ; verify ( » mock Collaborator « ) . » needs Join Point Static Part « ( " » get Age « " ) ; }
@Test { » Method Parameter « param = this . » test Method « . annot ( » matrix Attribute « ( ) . name ( " year " ) ) . arg ( int . class ) ; Object actual = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) . block ( Duration . ZERO ) ; » assert That « ( actual ) . » is Equal To « ( 2013 ) ; }
@Test { » mock Sent Request « ( HEAD , " https : » // example . com « " ) ; » mock Response Status « ( » Http Status « . OK ) ; » Http Headers « » response Headers « = new » Http Headers « ( ) ; given ( response . » get Headers « ( ) ) . » will Return « ( » response Headers « ) ; » Http Headers « result = template . » head For Headers « ( " https : » // example . com « " ) ; » assert That « ( result ) . as ( " Invalid headers returned " ) . » is Same As « ( » response Headers « ) ; verify ( response ) . close ( ) ; }
@Test { ( ( » Mock Http Servlet Request « ) context . » get Request « ( ) ) . » set Context Path « ( " / app - context " ) ; tag . » set Value « ( " / url / path " ) ; tag . » set Context « ( " some - other - context " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " / some - other - context / url / path " ) ; }
@Test { » Binding Context « » binding Context « = new » Binding Context « ( ) ; Mono < Object > mono = this . resolver . » resolve Argument « ( this . » param Named String « , » binding Context « , this . exchange ) ; » Step Verifier « . create ( mono ) . » expect Next Count « ( 0 ) . » expect Error « ( » Server Error Exception « . class ) . verify ( ) ; }
@Test { @ Lazy @ Configuration class Config { @ Bean Object foo ( ) { return null ; } } » assert That « ( » bean Def « ( Config . class ) . » is Lazy Init « ( ) ) . as ( " @ Bean methods declared in a @ Lazy @ Configuration should be lazily instantiated " ) . » is True « ( ) ; }
@Test { » env Map « . put ( " » a _ key « " , " » a _ value « " ) ; » env Map « . put ( " a . key " , " a . value " ) ; » assert That « ( ps . » get Property « ( " » a _ key « " ) ) . » is Equal To « ( " » a _ value « " ) ; » assert That « ( ps . » get Property « ( " a . key " ) ) . » is Equal To « ( " a . value " ) ; }
@Test { String » class Name « = » Class Utils « . » get Short Name « ( » get Class « ( ) ) ; » assert That « ( » class Name « ) . as ( " Class name did not match " ) . » is Equal To « ( " » Class Utils Tests « " ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; cache . put ( key , " 123 " ) ; » tx Template « . » execute Without Result « ( s -> { cache . evict ( key ) ; » assert That « ( target . get ( key , String . class ) ) . » is Equal To « ( " 123 " ) ; } ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; }
@Test { String text = " foo = $ { foo } , bar = $ { bar } " ; Properties props = new Properties ( ) ; props . » set Property « ( " foo " , " bar " ) ; » Property Placeholder Helper « helper = new » Property Placeholder Helper « ( " $ { " , " } " , null , false ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> helper . » replace Placeholders « ( text , props ) ) ; }
@Test { » Attribute Methods « methods = » Attribute Methods « . » for Annotation Type « ( » Multiple Attributes « . class ) ; » assert That « ( methods . size ( ) ) . » is Equal To « ( 2 ) ; }
@Test { String name = " foo " ; String value = " bar " ; given ( » mock Request « . » path Variable « ( name ) ) . » will Return « ( value ) ; » assert That « ( wrapper . » path Variable « ( name ) ) . » is Equal To « ( value ) ; }
@Test { » assert That « ( » Object Utils « . » null Safe To String « ( ( short [ ] ) null ) ) . » is Equal To « ( " null " ) ; }
@Test { Optional < » Media Type « > » content Type « = Optional . of ( » Media Type « . » APPLICATION _ JSON « ) ; given ( » mock Headers « . » content Type « ( ) ) . » will Return « ( » content Type « ) ; » assert That « ( wrapper . » content Type « ( ) ) . » is Same As « ( » content Type « ) ; }
@Test { » Configurable Web Binding Initializer « initializer = new » Configurable Web Binding Initializer « ( ) ; initializer . » set Conversion Service « ( new » Default Conversion Service « ( ) ) ; » Web Data Binder Factory « » binder Factory « = new » Default Data Binder Factory « ( initializer ) ; » Method Parameter « param = this . » test Method « . » annot Present « ( » Request Param « . class ) . arg ( Optional . class , » Multipart File « . class ) ; Object actual = resolver . » resolve Argument « ( param , null , » web Request « , » binder Factory « ) ; » assert That « ( actual ) . » is Equal To « ( Optional . empty ( ) ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Nullable Field Injection Bean « . class ) ) ; bf . » register Bean Definition « ( " » test Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » Nullable Field Injection Bean « bean = ( » Nullable Field Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Same As « ( bf . » get Bean « ( " » test Bean « " ) ) ; }
@Test { String » random Phrase « = parser . » parse Expression « ( " random number is $ { T ( java . lang . Math ) . random ( ) } " , new » Templated Parser Context « ( ) ) . » get Value « ( String . class ) ; » assert That « ( » random Phrase « . » starts With « ( " random number " ) ) . » is True « ( ) ; }
@Test { » Service Locator Factory Bean « factory = new » Service Locator Factory Bean « ( ) ; factory . » set Service Locator Interface « ( » Service Locator Interface With Extra Non Compliant Method « . class ) ; factory . » after Properties Set « ( ) ; » Service Locator Interface With Extra Non Compliant Method « locator = ( » Service Locator Interface With Extra Non Compliant Method « ) factory . » get Object « ( ) ; » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> locator . » get Test Service « ( " not " , " allowed " ) ) ; }
@Test { Pointcut pc = » get Pointcut « ( " execution ( * * ( . . ) ) and args ( String ) " ) ; » Pointcut Expression « expr = ( ( » Aspect J Expression Pointcut « ) pc ) . » get Pointcut Expression « ( ) ; » assert That « ( expr . » get Pointcut Expression « ( ) ) . » is Equal To « ( " execution ( * * ( . . ) ) && args ( String ) " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » set Field « ( person , " » likes Pets « " , null , boolean . class ) ) ; }
@Test { » assert That Exception Of Type « ( » Annotation Configuration Exception « . class ) . » is Thrown By « ( ( ) -> » Annotation Type Mappings « . » for Annotation Type « ( » Alias For With Incompatible Return Types « . class ) ) . » with Message « ( " Misconfigured aliases : attribute 'test' in annotation [ " + » Alias For With Incompatible Return Types « . class . » get Name « ( ) + " ] and attribute 'test' in annotation [ " + » Alias For With Incompatible Return Types Target « . class . » get Name « ( ) + " ] must declare the same return type . " ) ; }
@Test { List < String > list = Arrays . » as List « ( " 0 " , " 1 " ) ; Iterator < String > iterator = list . iterator ( ) ; » Composite Iterator « < String > it = new » Composite Iterator « < > ( ) ; it . add ( iterator ) ; it . add ( list . iterator ( ) ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> it . add ( iterator ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> environment . » accepts Profiles « ( ( String [ ] ) null ) ) ; }
@Test { » register With Generated Name « ( » p 1 Bean Def « , bf ) ; ppc . » post Process Bean Factory « ( bf ) ; » Test Bean « bean = bf . » get Bean « ( » Test Bean « . class ) ; » assert That « ( bean . » get Name « ( ) ) . » is Equal To « ( » P 1 _ LOCAL _ PROPS _ VAL « ) ; }
@Test { » setup Info Request « ( false ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) ; » assert That « ( this . » web Socket Transport « . invoked ( ) ) . » is False « ( ) ; » assert That « ( this . » xhr Transport « . invoked ( ) ) . » is True « ( ) ; » assert That « ( this . » xhr Transport « . » get Request « ( ) . » get Transport Url « ( ) . » to String « ( ) . » ends With « ( " » xhr _ streaming « " ) ) . » is True « ( ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / " ) ) . » and Expect « ( status ( ) . » is Ok « ( ) ) . » and Expect « ( » forwarded Url « ( " / WEB - INF / layouts / » standard Layout « . jsp " ) ) ; }
@Test { Method » set Name « = » Test Object « . class . » get Method « ( " » set Name « " , String . class ) ; String [ ] names = discoverer . » get Parameter Names « ( » set Name « ) ; » assert That « ( names ) . as ( " should find method info " ) . » is Not Null « ( ) ; » assert That « ( names . length ) . as ( " one argument " ) . » is Equal To « ( 1 ) ; » assert That « ( names [ 0 ] ) . » is Equal To « ( " name " ) ; }
@Test { » standalone Setup « ( new » Multipart Controller « ( ) ) . build ( ) . perform ( multipart ( " / multipartfile " ) ) . » and Expect « ( status ( ) . » is Found « ( ) ) ; }
@Test { » assert That « ( » get Macro Output « ( " » FORM 11 « " ) ) . » is Equal To « ( " < input type = \" text \" id = \" name \" name = \" name \" value = \" Darren \" > " ) ; }
@Test { Number » expected Number « = - 10.21f / - 10.2f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " - 10.21f / - 10.2f " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Number « ) ; }
@Test { new » Xpath Result Matchers « ( " / foo / Bar " , null ) . » does Not Exist « ( ) . match ( » get Stub Mvc Result « ( ) ) ; }
@Test { » Test Bean « tb = new » Test Bean « ( ) ; Errors errors = new » Bean Property Binding Result « ( tb , " tb " ) ; Validator » test Validator « = new » Empty Validator « ( ) ; » test Validator « . validate ( tb , errors ) ; » assert That « ( errors . » has Field Errors « ( " name " ) ) . » is True « ( ) ; » assert That « ( errors . » get Field Error « ( " name " ) . » get Code « ( ) ) . » is Equal To « ( " EMPTY " ) ; }
@Test { » Spel Expression « expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " ( 4 + 10 ) / 2 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 7 ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . » get Tag « ( ) . » set Dynamic Attribute « ( null , " type " , " email " ) ) . » with Message « ( " Attribute type = \" email \" is not allowed " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( » Multi Component Scan « . class ) ; » assert That « ( ctx . » get Bean « ( » Custom Scope Annotation Bean « . class ) ) . » is Not Same As « ( ctx . » get Bean « ( » Custom Scope Annotation Bean « . class ) ) ; » assert That « ( ctx . » contains Bean « ( " » scanned Component « " ) ) . » is True « ( ) ; }
@Test { » Annotation Type Mapping « mapping = » Annotation Type Mappings « . » for Annotation Type « ( » Alias Pair « . class ) . get ( 0 ) ; Method [ ] resolved = » resolve Mirror Sets « ( mapping , » With Default Value Alias Pair « . class , » Alias Pair « . class ) ; » assert That « ( resolved [ 0 ] . » get Name « ( ) ) . » is Equal To « ( " a " ) ; » assert That « ( resolved [ 1 ] . » get Name « ( ) ) . » is Equal To « ( " a " ) ; }
@Test { » Fixed Locale Context Resolver « resolver = new » Fixed Locale Context Resolver « ( FRANCE ) ; » assert That « ( resolver . » resolve Locale Context « ( exchange ( ) ) . » get Locale « ( ) ) . » is Equal To « ( FRANCE ) ; » assert That « ( resolver . » resolve Locale Context « ( exchange ( CANADA ) ) . » get Locale « ( ) ) . » is Equal To « ( FRANCE ) ; }
@Test { » Multi Value Map « < String , Object > attributes = » get All Annotation Attributes « ( » Non Null Api « . class , Nonnull . class . » get Name « ( ) ) ; » assert That « ( attributes ) . as ( " Annotation attributes map for @ Nonnull on » Non Null Api « " ) . » is Not Null « ( ) ; » assert That « ( attributes . get ( " when " ) ) . as ( " value for » Non Null Api « " ) . » is Equal To « ( » as List « ( When . ALWAYS ) ) ; }
@Test { » assert Composed Annotation Mapping « ( » Request Method « . POST ) ; }
@Test { this . handler . handle ( this . » mvc Result « ) ; » assert Value « ( " » Model And View « " , " View name " , null ) ; » assert Value « ( " » Model And View « " , " View " , null ) ; » assert Value « ( " » Model And View « " , " Model " , null ) ; }
@Test { this . emitter . send ( event ( ) ) ; this . handler . » assert Sent Object Count « ( 0 ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Path « ( " » / foo ///////// bar « " ) . build ( ) ; » assert That « ( » uri Components « . » get Path « ( ) ) . » is Equal To « ( " / foo / bar " ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Single Constructor Optional Collection Bean « . class ) ) ; » Root Bean Definition « tb = new » Root Bean Definition « ( » Null Factory Methods « . class ) ; tb . » set Factory Method Name « ( " » create Test Bean « " ) ; bf . » register Bean Definition « ( " » test Bean « " , tb ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ( ) -> bf . » get Bean « ( " » annotated Bean « " ) ) ; }
@Test { Assert . » does Not Contain « ( null , null , ( ) -> " enigma " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> xbf . » get Bean « ( " » rod 7 « " , » Constructor Dependencies Bean « . class ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » bean Factory For « ( » PROD _ ELIGIBLE _ XML « , » NULL _ ACTIVE « ) ) ; }
@Test { Cache cache = » get Cache « ( » DEFAULT _ CACHE « ) ; Object key = » create Key « ( this . » key Item « ) ; cache . put ( key , new Object ( ) ) ; » assert That Null Pointer Exception « ( ) . » is Thrown By « ( ( ) -> service . » remove All With Exception « ( false ) ) ; » assert That « ( cache . get ( key ) ) . » is Not Null « ( ) ; }
@Test { load ( context -> context . » register Bean « ( » Resource Handler Configuration « . class ) ) ; » Abstract Handler Mapping « » handler Mapping « = this . context . » get Bean « ( " » resource Handler Mapping « " , » Abstract Handler Mapping « . class ) ; » assert That « ( » handler Mapping « . » get Path Matcher « ( ) ) . » is Same As « ( this . context . » get Bean « ( " » mvc Path Matcher « " ) ) ; » assert That « ( » handler Mapping « . » get Url Path Helper « ( ) ) . » is Same As « ( this . context . » get Bean « ( " » mvc Url Path Helper « " ) ) ; }
@Test { this . request . » add Header « ( » X _ FORWARDED _ PREFIX « , " / prefix / " ) ; this . request . » set Request URI « ( " / mvc - showcase " ) ; » Http Servlet Request « actual = » filter And Get Wrapped Request « ( ) ; actual . » get Request URL « ( ) . append ( " ? key = value " ) ; » assert That « ( actual . » get Request URL « ( ) . » to String « ( ) ) . » is Equal To « ( " http : » // localhost / prefix / mvc - showcase « " ) ; }
@Test { try ( » Annotation Config Application Context « » direct Registration « = new » Annotation Config Application Context « ( ) ) { » direct Registration « . register ( » Accidental Lite Configuration « . class ) ; » direct Registration « . refresh ( ) ; » assert That Exception Of Type « ( » No Such Bean Definition Exception « . class ) . » is Thrown By « ( ( ) -> » direct Registration « . » get Bean « ( Thing . class ) ) ; } }
@Test { » assert That « ( processor . » supports Parameter « ( » param Model « ) ) . » is True « ( ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> this . » mock Mvc « . perform ( get ( " / persons / 1 " ) ) . » and Expect « ( header ( ) . exists ( " X - Custom - Header " ) ) ) ; }
@Test { » Message Mapping Message Handler « » messsage Handler « = » init Messsage Handler « ( ) ; » messsage Handler « . » handle Message « ( message ( " » error Signal « " , " abc " ) ) . block ( Duration . » of Seconds « ( 5 ) ) ; » verify Output Content « ( Collections . » singleton List « ( " rejected :: handled " ) ) ; }
@Test { » parse Check « ( " '5.00' matches '^-?\\d+(\\.\\d{2})?$' " , " ( '5.00' matches '^-?\\d+(\\.\\d{2})?$' ) " ) ; }
@Test { Map < String , Object > map = Collections . » singleton Map « ( " text " , null ) ; » assert That « ( map ) . » contains Key « ( " text " ) ; » test Missing Text Attribute « ( map ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » App Config « . class ) ; ctx . register ( » Raw Factory Bean Interface Config « . class ) ; ctx . refresh ( ) ; }
@Test { this . » message Handler « . » set Task Scheduler « ( this . » task Scheduler « ) ; this . » message Handler « . » set Heartbeat Value « ( new long [ ] { 0 , 10000 } ) ; this . » message Handler « . start ( ) ; verify ( this . » task Scheduler « ) . » schedule With Fixed Delay « ( any ( Runnable . class ) , eq ( 10000L ) ) ; }
@Test { List < » Rollback Rule Attribute « > l = Collections . » singleton List « ( new » Rollback Rule Attribute « ( » Remote Exception « . class ) ) ; » Rule Based Transaction Attribute « rta = new » Rule Based Transaction Attribute « ( » Transaction Definition « . » PROPAGATION _ REQUIRED « , l ) ; » do Test Rule For Selective Rollback On Checked « ( rta ) ; }
@Test { load ( » Resolvable Type Event Listener « . class ) ; » Resolvable Type Event Listener « listener = this . context . » get Bean « ( » Resolvable Type Event Listener « . class ) ; this . » event Collector « . » assert No Event Received « ( listener ) ; » Generic Event Pojo « < String > event = new » Generic Event Pojo « < > ( " TEST " ) ; this . context . » publish Event « ( event ) ; this . » event Collector « . » assert Event « ( listener , event ) ; this . » event Collector « . » assert Total Events Count « ( 1 ) ; }
@Test { » path Pattern « = » check Structure « ( " / * * " ) ; » assert Path Elements « ( » path Pattern « , » Wildcard The Rest Path Element « . class ) ; » path Pattern « = » check Structure « ( " / * * acb " ) ; » assert Path Elements « ( » path Pattern « , » Separator Path Element « . class , » Regex Path Element « . class ) ; }
@Test { » Produces Request Condition « condition = new » Produces Request Condition « ( " ! text / plain " ) ; » Http Servlet Request « request = » create Request « ( " text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Null « ( ) ; }
@Test { » assert That « ( this . cache . » is Store By Value « ( ) ) . » is False « ( ) ; }
@Test { Promotion bean = new Promotion ( ) ; » Bean Wrapper « bw = new » Bean Wrapper Impl « ( bean ) ; bw . » set Property Value « ( " id " , " 10 " ) ; » assert That « ( bean . » get Id « ( ) ) . » is Equal To « ( new Long ( 10 ) ) ; }
@Test { new » Annotation Config Application Context « ( Config . class ) . » get Bean « ( » Example Bean « . class ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> » forwarded Url Pattern « ( " api / resource / 2 " ) . match ( » forwarded Url Stub « ( " api / resource / 1 " ) ) ) . » with Message « ( " 'api/resource/2' is not an Ant - style path pattern " ) ; }
@Test { » Request Condition Holder « params = new » Request Condition Holder « ( new » Params Request Condition « ( " name " ) ) ; » Request Condition Holder « headers = new » Request Condition Holder « ( new » Headers Request Condition « ( " name " ) ) ; » assert That Exception Of Type « ( » Class Cast Exception « . class ) . » is Thrown By « ( ( ) -> params . combine ( headers ) ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ NESTED « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ NEVER « ) ; }
@Test { » test Bean « . » get Test Beans « ( ) ; » assert That « ( » counter Aspect « . » get Test Bean Invocations Count « ) . » is Equal To « ( 1 ) ; » counter Aspect « . reset ( ) ; » test Bean « . » get Employees « ( ) ; » assert That « ( » counter Aspect « . » get Test Bean Invocations Count « ) . » is Equal To « ( 0 ) ; }
@Test { String » expected Value « = " That is comforting to know " ; » Multipart File « file = mock ( » Multipart File « . class ) ; given ( file . » get Bytes « ( ) ) . » will Return « ( » expected Value « . » get Bytes « ( ) ) ; editor . » set Value « ( file ) ; » assert That « ( editor . » get As Text « ( ) ) . » is Equal To « ( » expected Value « ) ; }
@Test { » Bean Definition « » bean Definition « = this . » bean Factory « . » get Merged Bean Definition « ( " » test Bean 2 « " ) ; » assert That « ( » bean Definition « . » get Attribute « ( " foo " ) ) . as ( " Metadata not inherited " ) . » is Equal To « ( " bar " ) ; » assert That « ( » bean Definition « . » get Attribute « ( " abc " ) ) . as ( " Child metdata not attached " ) . » is Equal To « ( " 123 " ) ; }
@Test { evaluate ( " 3 " , 3 , Integer . class ) ; }
@Test { » test Single Component « ( Repo . class , Repo . class ) ; }
@Test { this . configurer . » media Types « ( Collections . » singleton Map « ( " json " , » Media Type « . » APPLICATION _ JSON « ) ) ; » Content Negotiation Manager « manager = this . configurer . » build Content Negotiation Manager « ( ) ; this . » servlet Request « . » set Request URI « ( " / flower . json " ) ; » assert That « ( manager . » resolve Media Types « ( this . » web Request « ) . get ( 0 ) ) . » is Equal To « ( » Media Type « . » APPLICATION _ JSON « ) ; }
@Test { » do Test New Transaction Synchronization « ( » Transaction Definition « . » PROPAGATION _ NEVER « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ON _ ACTUAL _ TRANSACTION « ) ; }
@Test { » register Default Value « ( Date . class , new Date ( ) ) ; }
@Test { » Cache Put Operation « op = » get Default Cache Operation « ( » Cache Put Operation « . class , String . class , Object . class ) ; » assert Defaults « ( op ) ; }
@Test { lbf . » register Bean Definition « ( " test " , new » Root Bean Definition « ( » Factory Bean That Shouldnt Be Called « . class . » get Name « ( ) , null , null ) ) ; lbf . » pre Instantiate Singletons « ( ) ; }
@Test { » assert That « ( this . handler . » supports Return Type « ( » create Return Value Param « ( " view " ) ) ) . » is True « ( ) ; }
@Test { » Requested Content Type Resolver Builder « builder = new » Requested Content Type Resolver Builder « ( ) ; builder . » fixed Resolver « ( » Media Type « . » APPLICATION _ JSON « ) ; » Requested Content Type Resolver « resolver = builder . build ( ) ; List < » Media Type « > » media Types « = resolver . » resolve Media Types « ( » Mock Server Web Exchange « . from ( » Mock Server Http Request « . get ( " / " ) . accept ( » Media Type « . ALL ) ) ) ; » assert That « ( » media Types « ) . » is Equal To « ( Collections . » singleton List « ( » Media Type « . » APPLICATION _ JSON « ) ) ; }
@Test { » Cache Remove All Operation « operation = » create Simple Operation « ( ) ; » Cache Invocation Parameter « [ ] » all Parameters « = operation . » get All Parameters « ( ) ; » assert That « ( » all Parameters « . length ) . » is Equal To « ( 0 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Bean One Configuration « . class , » Bean Three Configuration « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 3 « " ) ) . » is True « ( ) ; }
@Test { Comparator < String > c = » Null Safe Comparator « . » NULLS _ LOW « ; » assert That « ( c . compare ( null , " boo " ) < 0 ) . » is True « ( ) ; }
@Test { ( ( » Mock Http Servlet Request « ) context . » get Request « ( ) ) . » set Context Path « ( " / app - context " ) ; tag . » set Value « ( " / url / path " ) ; tag . » set Context « ( " / some - other - context " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " / some - other - context / url / path " ) ; }
@Test { » do Test « ( " 40 " , » Concurrency Failure Exception « . class ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " foo " , o ) ) ; jof . » set Jndi Name « ( " foo " ) ; jof . » set Resource Ref « ( false ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression » spel Expression « = parser . » parse Expression « ( " # » an Array « [ 0 ] eq 1 " ) ; » assert That Exception Of Type « ( » Spel Evaluation Exception « . class ) . » is Thrown By « ( » spel Expression « :: » get Value « ) ; }
@Test { » find Type Of Prototype Factory Method On Bean Instance « ( true ) ; }
@Test { » Interface Based M Bean Info Assembler « assembler = » get With Mapping « ( " foobar " , " org . springframework . jmx . export . assembler . » I Custom Jmx Bean « " ) ; assembler . » set Managed Interfaces « ( new Class < ? > [ ] { » I Additional Test Methods « . class } ) ; » Model M Bean Info « inf = assembler . » get M Bean Info « ( » get Bean « ( ) , » get Object Name « ( ) ) ; » M Bean Attribute Info « attr = inf . » get Attribute « ( " » Nick Name « " ) ; » assert Nick Name « ( attr ) ; }
@Test { Flux < » Byte Buffer « > input = Flux . just ( this . » foo Bytes « , this . » bar Bytes « ) . map ( » Byte Buffer « :: wrap ) ; » test Encode All « ( input , » Byte Buffer « . class , step -> step . » consume Next With « ( » expect Bytes « ( this . » foo Bytes « ) ) . » consume Next With « ( » expect Bytes « ( this . » bar Bytes « ) ) . » verify Complete « ( ) ) ; }
@Test { Map < String , Object > map = new » Hash Map « < > ( ) ; map . put ( » Message Headers « . » CONTENT _ TYPE « , » Mime Type Utils « . » APPLICATION _ JSON « ) ; » Message Headers « headers = new » Message Headers « ( map ) ; » assert That « ( this . resolver . resolve ( headers ) ) . » is Equal To « ( » Mime Type Utils « . » APPLICATION _ JSON « ) ; }
@Test { » Abstract Resource « resource = new » Abstract Resource « ( ) { @ Override public » Input Stream « » get Input Stream « ( ) { return new » Byte Array Input Stream « ( new byte [ ] { ' a ' , ' b ' , ' c ' } ) ; } @ Override public String » get Description « ( ) { return " " ; } } ; » assert That « ( resource . » content Length « ( ) ) . » is Equal To « ( 3L ) ; }
@Test { » assert That « ( converter . » can Read « ( Feed . class , » Media Type « . » APPLICATION _ ATOM _ XML « ) ) . » is True « ( ) ; » assert That « ( converter . » can Read « ( Feed . class , » ATOM _ XML _ UTF 8 « ) ) . » is True « ( ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression » spel Expression « = parser . » parse Expression « ( " # » a Map « [ » ' one « ' ] eq 1 " ) ; » assert That Exception Of Type « ( » Spel Evaluation Exception « . class ) . » is Thrown By « ( » spel Expression « :: » get Value « ) ; }
@Test { List < String > extensions = new » Mapping Media Type File Extension Resolver « ( » DEFAULT _ MAPPINGS « ) . » resolve File Extensions « ( » Media Type « . » APPLICATION _ JSON « ) ; » assert That « ( extensions ) . » has Size « ( 1 ) ; » assert That « ( extensions . get ( 0 ) ) . » is Equal To « ( " json " ) ; }
@Test { » autowired Config Class Is Enhanced « ( » Config That Does Import « . class ) ; }
@Test { Message < String > message = » Message Builder « . » with Payload « ( " foo " ) . build ( ) ; » Method Parameter « param = this . resolvable . annot ( header ( " foo " ) ) . arg ( Optional . class , String . class ) ; Object result = resolver . » resolve Argument « ( param , message ) ; » assert That « ( result ) . » is Equal To « ( Optional . empty ( ) ) ; }
@Test { » assert That « ( this . » application Context « ) . as ( " The application context should have been autowired . " ) . » is Not Null « ( ) ; }
@Test { new » Class Path Xml Application Context « ( " org / springframework / beans / factory / aspectj / » spring Configured « . xml " ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; File file = ( File ) xbf . » get Bean « ( " file " ) ; » assert That « ( file . » get Path « ( ) ) . » is Equal To « ( ( File . separator + " test " ) ) ; }
@Test { » Map Persistence Exception Translator « mpet = new » Map Persistence Exception Translator « ( ) ; » Runtime Exception « in = new » Runtime Exception « ( " in " ) ; » Invalid Data Access Api Usage Exception « out = new » Invalid Data Access Api Usage Exception « ( " out " ) ; mpet . » add Translation « ( in , out ) ; » assert That « ( » Data Access Utils « . » translate If Necessary « ( in , mpet ) ) . » is Same As « ( out ) ; }
@Test { » Http Servlet Request « request = mock ( » Http Servlet Request « . class ) ; » Servlet Request Attributes « attrs = new » Servlet Request Attributes « ( request ) ; Object value = attrs . » get Attribute « ( KEY , » Request Attributes « . » SCOPE _ SESSION « ) ; » assert That « ( value ) . » is Null « ( ) ; verify ( request ) . » get Session « ( false ) ; }
@Test { » database Populator « . » add Script « ( » users Schema « ( ) ) ; » database Populator « . » add Script « ( resource ( " users - data . sql " ) ) ; » Database Populator Utils « . execute ( » database Populator « , db ) ; » assert Users Database Created « ( " Brannen " ) ; }
@Test { context = new » Class Path Xml Application Context « ( " org / springframework / jdbc / config / jdbc - initialize - cache - config . xml " ) ; » assert Correct Setup « ( context . » get Bean « ( " » data Source « " , » Data Source « . class ) ) ; » Cache Data « cache = context . » get Bean « ( » Cache Data « . class ) ; » assert That « ( cache . » get Cached Data « ( ) . size ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » test Evict Early « ( this . ccs ) ; }
@Test { String result = » Class Utils « . » class Package As Resource Path « ( Proxy . class ) ; » assert That « ( result ) . » is Equal To « ( " java / lang / reflect " ) ; }
@Test { Object source = rx . Single . just ( 1 ) ; Object target = » get Adapter « ( rx . Single . class ) . » to Publisher « ( source ) ; boolean condition = target instanceof Mono ; » assert That « ( condition ) . as ( " Expected Mono Publisher : " + target . » get Class « ( ) . » get Name « ( ) ) . » is True « ( ) ; » assert That « ( ( ( Mono < Integer > ) target ) . block ( Duration . » of Millis « ( 1000 ) ) ) . » is Equal To « ( Integer . » value Of « ( 1 ) ) ; }
@Test { » Persistence Annotation Bean Post Processor « pabpp = new » Persistence Annotation Bean Post Processor « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> pabpp . » post Process Properties « ( null , new » Setter Of Wrong Type Annotated With Persistence Unit « ( ) , " bean " ) ) ; }
@Test { this . converter . write ( Integer . » value Of « ( 5 ) , null , response ) ; » assert That « ( » servlet Response « . » get Character Encoding « ( ) ) . » is Equal To « ( " ISO - 8859 - 1 " ) ; }
@Test { » Default Listable Bean Factory « » bean Factory « = » create Factory « ( " » simple Constructor Namespace Handler Tests « . xml " ) ; String name = " simple - ref " ; » Dummy Bean « » name Value « = » bean Factory « . » get Bean « ( name , » Dummy Bean « . class ) ; » assert That « ( » name Value « . » get Value « ( ) ) . » is Equal To « ( » bean Factory « . » get Bean « ( " name " ) ) ; }
@Test { » path Pattern « = » check Structure « ( " { foo : ... } " ) ; » assert Path Elements « ( » path Pattern « , » Capture Variable Path Element « . class ) ; » path Pattern « = » check Structure « ( " { foo : [ 0 - 9 ] * } " ) ; » assert Path Elements « ( » path Pattern « , » Capture Variable Path Element « . class ) ; » check Error « ( " { foo : } " , 5 , » Pattern Message « . » MISSING _ REGEX _ CONSTRAINT « ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Nullable Method Injection Bean « . class ) ) ; bf . » register Bean Definition « ( " » test Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » Nullable Method Injection Bean « bean = ( » Nullable Method Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Same As « ( bf . » get Bean « ( " » test Bean « " ) ) ; }
@Test { » Url Filename View Controller « ctrl = new » Url Filename View Controller « ( ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( " GET " , " / products / view . html " ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » Model And View « mv = ctrl . » handle Request « ( request , response ) ; » assert That « ( mv . » get View Name « ( ) ) . » is Equal To « ( " products / view " ) ; » assert That « ( mv . » get Model « ( ) . » is Empty « ( ) ) . » is True « ( ) ; }
@Test { » I Test Bean « bean = » get Test Bean « ( ) ; » assert That « ( » Aop Utils « . » is Cglib Proxy « ( bean ) ) . as ( " Should be a CGLIB proxy " ) . » is True « ( ) ; » assert That « ( ( ( Advised ) bean ) . » is Expose Proxy « ( ) ) . as ( " Should expose proxy " ) . » is True « ( ) ; }
@Test { » Reactive Test Transaction Manager « tm = new » Reactive Test Transaction Manager « ( false , true ) ; tm . » get Reactive Transaction « ( new » Default Transaction Definition « ( ) ) . » flat Map « ( tm :: commit ) . » subscriber Context « ( » Transaction Context Manager « . » create Transaction Context « ( ) ) . as ( » Step Verifier « :: create ) . » verify Complete « ( ) ; » assert Has Began « ( tm ) ; » assert Has Committed « ( tm ) ; » assert Has No Rollback « ( tm ) ; » assert Has Not Set Rollback Only « ( tm ) ; » assert Has Cleaned Up « ( tm ) ; }
@Test { » do Test Receive « ( true , false , true , false , false , true , 1000 ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Default Context Cache « ( - 1 ) ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; cache . put ( key , " 123 " ) ; » tx Template « . » execute Without Result « ( s -> { cache . » evict If Present « ( key ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; } ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; }
@Test { Comparator < Boolean > c = » Boolean Comparator « . » TRUE _ LOW « ; » assert That « ( c . compare ( true , false ) ) . » is Equal To « ( - 1 ) ; » assert That « ( c . compare ( Boolean . TRUE , Boolean . TRUE ) ) . » is Equal To « ( 0 ) ; }
@Test { Map < String , Object > map = new » Hash Map « < > ( ) ; » Message Headers « headers = new » Message Headers « ( map ) ; » assert That « ( headers . get ( " nosuchattribute " ) ) . » is Null « ( ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) . header ( " Accept " , " bogus " ) ) ; » Produces Request Condition « condition = new » Produces Request Condition « ( " ! text / plain " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Null « ( ) ; }
@Test { » Enum Holder « target = new » Enum Holder « ( ) ; » Web Request Data Binder « binder = new » Web Request Data Binder « ( target ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Parameter « ( " » my Enum « " , " FOO " ) ; binder . bind ( new » Servlet Web Request « ( request ) ) ; » assert That « ( target . » get My Enum « ( ) ) . » is Equal To « ( » My Enum « . FOO ) ; }
@Test { » Unsupported Operation Exception « exception = new » Unsupported Operation Exception « ( " Test exception on get " ) ; » will Throw « ( exception ) . given ( this . cache ) . get ( 0L ) ; this . » cache Interceptor « . » set Error Handler « ( new » Simple Cache Error Handler « ( ) ) ; » assert That Exception Of Type « ( » Unsupported Operation Exception « . class ) . » is Thrown By « ( ( ) -> this . » simple Service « . get ( 0L ) ) . » with Message « ( " Test exception on get " ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Property « ( " desriptn " , » Sample Bean Properties « . class ) ; » assert That « ( matches . » get Possible Matches « ( ) ) . » is Empty « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Http Range « . » create Byte Range « ( - 1 ) ) ; }
@Test { Method source = » method From « ( » With Single Superclass « . class ) ; » assert That « ( scan ( source , » Search Strategy « . » TYPE _ HIERARCHY « ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " , " 1 : » Test Annotation 2 « " , " 1 : » Test Inherited Annotation 2 « " ) ; }
@Test { » servlet Request « . » add Header « ( " name " , " bogus - uuid " ) ; » Configurable Web Binding Initializer « » binding Initializer « = new » Configurable Web Binding Initializer « ( ) ; » binding Initializer « . » set Conversion Service « ( new » Default Formatting Conversion Service « ( ) ) ; » assert That Exception Of Type « ( » Method Argument Type Mismatch Exception « . class ) . » is Thrown By « ( ( ) -> resolver . » resolve Argument « ( » param Uuid « , null , » web Request « , new » Default Data Binder Factory « ( » binding Initializer « ) ) ) ; }
@Test { » Proxy Factory Bean « fb = new » Proxy Factory Bean « ( ) ; fb . » set Target « ( new » Test Bean « ( ) ) ; fb . » add Advice « ( new » Debug Interceptor « ( ) ) ; fb . » set Bean Factory « ( new » Default Listable Bean Factory « ( ) ) ; » I Test Bean « proxy = ( » I Test Bean « ) fb . » get Object « ( ) ; » assert That « ( » Aop Utils « . » is Jdk Dynamic Proxy « ( proxy ) ) . » is True « ( ) ; }
@Test { » assert Environment Value « ( " riddle " , " auto detected " ) ; }
@Test { new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » is Empty « ( ) . match ( » stub Mvc Result « ) ; }
@Test { » Byte Array Output Stream « body = new » Byte Array Output Stream « ( ) ; » Method Parameter « type = on ( » Test Controller « . class ) . » resolve Return Type « ( » Output Stream « . class ) ; » Http Message Writer « < ? > writer = new » Encoder Http Message Writer « < > ( new » Byte Buffer Encoder « ( ) ) ; Mono < Void > mono = » init Result Handler « ( writer ) . » write Body « ( body , type , this . exchange ) ; » Step Verifier « . create ( mono ) . » expect Error « ( » Illegal State Exception « . class ) . verify ( ) ; }
@Test { » Has Map « » has Map « = ( » Has Map « ) this . » bean Factory « . » get Bean « ( " » class List « " ) ; » assert That « ( » has Map « . » get Class List « ( ) . size ( ) == 2 ) . » is True « ( ) ; » assert That « ( » has Map « . » get Class List « ( ) . get ( 0 ) . equals ( String . class ) ) . » is True « ( ) ; » assert That « ( » has Map « . » get Class List « ( ) . get ( 1 ) . equals ( Exception . class ) ) . » is True « ( ) ; }
@Test { » assert Bootstrapper « ( » Inherited Bootstrap With Annotation Class « . class , » Foo Bootstrapper « . class ) ; }
@Test { Class < ? extends Throwable > » found Class « = » find Closest Match « ( » Lowest Depth Exception « . class , » Highest Depth Exception « . class ) ; » assert That « ( » found Class « ) . » is Equal To « ( » Lowest Depth Exception « . class ) ; }
@Test { » Merged Annotation « < ? > annotation = » Type Mapped Annotation « . of ( null , null , » Class Attributes « . class , Collections . » singleton Map « ( " » class Value « " , » Input Stream « . class . » get Name « ( ) ) ) ; » assert That « ( annotation . » get String « ( " » class Value « " ) ) . » is Equal To « ( » Input Stream « . class . » get Name « ( ) ) ; » assert That « ( annotation . » get Class « ( " » class Value « " ) ) . » is Equal To « ( » Input Stream « . class ) ; }
@Test { » Annotation Descriptor « < Component > descriptor = » find Annotation Descriptor « ( » Inherited Annotation Class « . class , Component . class ) ; » assert That « ( descriptor ) . as ( " Should not find @ Component on » Inherited Annotation Class « " ) . » is Null « ( ) ; }
@Test { this . client . post ( ) . » body Value « ( new Person ( " John " ) ) . exchange ( ) . » expect Status « ( ) . » is Created « ( ) . » expect Header « ( ) . » value Equals « ( " location " , " / persons / John " ) . » expect Body « ( ) . » is Empty « ( ) ; }
@Test { » Configurable Environment « env = new » Standard Environment « ( ) ; » Mutable Property Sources « sources = env . » get Property Sources « ( ) ; » assert That « ( sources . » precedence Of « ( » Property Source « . named ( » Standard Environment « . » SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME « ) ) ) . » is Equal To « ( 0 ) ; » assert That « ( sources . » precedence Of « ( » Property Source « . named ( » Standard Environment « . » SYSTEM _ ENVIRONMENT _ PROPERTY _ SOURCE _ NAME « ) ) ) . » is Equal To « ( 1 ) ; » assert That « ( sources ) . » has Size « ( 2 ) ; }
@Test { String body = " foo " ; Mono < » Entity Response « < String > > result = » Entity Response « . » from Object « ( body ) . » vary By « ( " foo " ) . build ( ) ; List < String > expected = Collections . » singleton List « ( " foo " ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> expected . equals ( response . headers ( ) . » get Vary « ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { converter . » set Target Type « ( » Message Type « . TEXT ) ; » Text Message « » text Message Mock « = mock ( » Text Message « . class ) ; Object » to Be Marshalled « = new Object ( ) ; given ( » session Mock « . » create Text Message « ( » is A « ( String . class ) ) ) . » will Return « ( » text Message Mock « ) ; converter . » to Message « ( » to Be Marshalled « , » session Mock « ) ; verify ( » marshaller Mock « ) . marshal ( eq ( » to Be Marshalled « ) , » is A « ( Result . class ) ) ; }
@Test { » get Ops « ( » Annotated Class « . class , " » empty Caching « " , 0 ) ; }
@Test { for ( » Stomp Command « » stomp Command « : » Stomp Command « . values ( ) ) { » assert That « ( » stomp Command « . » requires Subscription Id « ( ) ) . » is Equal To « ( » subscription Id Required « . contains ( » stomp Command « ) ) ; } }
@Test { » assert That « ( resolver . » supports Parameter « ( » param Map « ) ) . » is True « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Named Map « ) ) . » is False « ( ) ; » assert That « ( resolver . » supports Parameter « ( » param Map No Annot « ) ) . » is False « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . resolver . » supports Parameter « ( this . » param Mono Map « ) ) . » with Message Starting With « ( " » Path Variable Map Method Argument Resolver « does not support reactive type wrapper " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Object To String Http Message Converter « ( null ) ) ; }
@Test { this . » key Generator « . expect ( 1L , " foo " , " bar " ) ; Object first = this . » simple Service « . get ( 1L , " foo " , " bar " ) ; Object second = this . » simple Service « . get ( 1L , " foo " , " bar " ) ; » assert That « ( second ) . » is Same As « ( first ) ; Object key = new » Simple Key « ( 1L , " foo " , " bar " ) ; » assert That « ( cache . get ( key ) . get ( ) ) . » is Equal To « ( first ) ; }
@Test { » do Test Jta Transaction With Propagation Requires New « ( false , false , true , false ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Fixed Version Strategy « ( " " ) ) ; }
@Test { headers . » set Content Language « ( Locale . FRANCE ) ; » assert That « ( headers . » get Content Language « ( ) ) . » is Equal To « ( Locale . FRANCE ) ; » assert That « ( headers . » get First « ( » Http Headers « . » CONTENT _ LANGUAGE « ) ) . » is Equal To « ( " fr - FR " ) ; }
@Test { » Tcp Connection « < byte [ ] > » tcp Connection « = » get Tcp Connection « ( ) ; Runnable runnable = mock ( Runnable . class ) ; long delay = 10000 ; » tcp Connection « . » on Read Inactivity « ( runnable , delay ) ; » test Inactivity Task Scheduling « ( runnable , delay , 0 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Async Config « . class , » Async Bean User « . class , » Async Bean With Interface « . class ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ctx :: refresh ) . » with Cause Instance Of « ( » Bean Not Of Required Type Exception « . class ) ; ctx . close ( ) ; }
@Test { » assert That « ( » Annotation Filter « . PLAIN . matches ( Nullable . class ) ) . » is True « ( ) ; }
@Test { » settable Listenable Future « . set ( null ) ; » assert That « ( ( Object ) » settable Listenable Future « . get ( ) ) . » is Null « ( ) ; » assert That « ( » settable Listenable Future « . » is Cancelled « ( ) ) . » is False « ( ) ; » assert That « ( » settable Listenable Future « . » is Done « ( ) ) . » is True « ( ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Request Matchers « ( " $ . str " ) . » is Number « ( ) . match ( request ) ) ; }
@Test { load ( » After Completion Test Listener « . class ) ; this . » transaction Template « . execute ( status -> { » get Context « ( ) . » publish Event « ( " test " ) ; » get Event Collector « ( ) . » assert No Event Received « ( ) ; status . » set Rollback Only « ( ) ; return null ; } ) ; » get Event Collector « ( ) . » assert Events « ( » Event Collector « . » AFTER _ COMPLETION « , " test " ) ; » get Event Collector « ( ) . » assert Total Events Count « ( 1 ) ; }
@Test { » Method Jms Listener Endpoint « endpoint = new » Method Jms Listener Endpoint « ( ) ; endpoint . » set Bean « ( this ) ; endpoint . » set Method « ( » get Test Method « ( ) ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> endpoint . » create Message Listener « ( this . container ) ) ; }
@Test { Expression exp = new » Spel Expression Parser « ( ) . » parse Expression « ( " T ( java . util . Arrays ) . » as List « ( 'a' , 'b' ) " ) ; List < String > list = ( List < String > ) exp . » get Value « ( ) ; » assert That « ( list ) . » has Size « ( 2 ) ; }
@Test { String script = » read Script « ( " test - data - with - multi - line - comments . sql " ) ; List < String > statements = new » Array List « < > ( ) ; » split Sql Script « ( script , ' ; ' , statements ) ; String » statement 1 « = " INSERT INTO users ( » first _ name « , » last _ name « ) VALUES ( 'Juergen' , 'Hoeller' ) " ; String » statement 2 « = " INSERT INTO users ( » first _ name « , » last _ name « ) VALUES ( 'Sam' , 'Brannen' ) " ; » assert That « ( statements ) . » contains Exactly « ( » statement 1 « , » statement 2 « ) ; }
@Test { » parse Check « ( " true and 5 > 3 " , " ( true and ( 5 > 3 ) ) " ) ; }
@Test { » assert That « ( this . chain . » resolve Resource « ( null , " invalid . css " , this . locations ) ) . » is Null « ( ) ; }
@Test { Class < ? > source = » With Multiple Annotations « . class ; » assert That « ( scan ( source , » Search Strategy « . DIRECT ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " , " 0 : » Test Annotation 2 « " ) ; }
@Test { » wrap Concurrent Result _ Response Body « ( new » Type Level Response Body Handler « ( ) , " bar " , String . class ) ; }
@Test { » assert Resolved Profiles « ( » Locations Foo « . class , " foo " ) ; }
@Test { » Field Retrieving Factory Bean « fr = new » Field Retrieving Factory Bean « ( ) ; fr . » set Target Object « ( new » Public Field Holder « ( ) ) ; try { fr . » after Properties Set « ( ) ; } catch ( » Illegal Argument Exception « expected ) { } }
@Test { » Yaml Properties Factory Bean « factory = new » Yaml Properties Factory Bean « ( ) ; factory . » set Resources « ( new » Byte Array Resource « ( " a : alpha \n test : [ ] " . » get Bytes « ( ) ) ) ; Properties properties = factory . » get Object « ( ) ; » assert That « ( properties . » get Property « ( " a " ) ) . » is Equal To « ( " alpha " ) ; » assert That « ( properties . » get Property « ( " test " ) ) . » is Equal To « ( " " ) ; }
@Test { String name = » create Random Key « ( ) ; Cache cache = this . manager . » get Cache « ( name ) ; » assert That « ( cache . » get Name « ( ) ) . » is Equal To « ( name ) ; Object key = new Object ( ) ; cache . put ( key , new Object ( ) ) ; » assert That « ( cache . get ( key ) ) . » is Null « ( ) ; » assert That « ( cache . get ( key , Object . class ) ) . » is Null « ( ) ; » assert That « ( cache . » get Native Cache « ( ) ) . » is Same As « ( cache ) ; }
@Test { this . factory . » set Pretty Printing « ( false ) ; this . factory . » after Properties Set « ( ) ; Gson gson = this . factory . » get Object « ( ) ; » String Bean « bean = new » String Bean « ( ) ; bean . » set Name « ( " Jason " ) ; String result = gson . » to Json « ( bean ) ; » assert That « ( result ) . » is Equal To « ( " { \" name \" : \" Jason \" } " ) ; }
@Test { » test Bean « . » do It « ( ) ; » assert That « ( » this As Interface Counter « . » get Count « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( » Config With Named Property Sources « . class ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 1 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » get Environment « ( ) . » contains Property « ( " from . » p 2 « " ) ) . » is True « ( ) ; » assert That « ( ctx . » get Environment « ( ) . » get Property « ( " testbean . name " ) ) . » is Equal To « ( " » p 2 Test Bean « " ) ; }
@Test { request . » set Query String « ( " forward = true " ) ; » assert That « ( this . helper . » get Originating Query String « ( request ) ) . » is Equal To « ( " forward = true " ) ; }
@Test { load ( » register Primary Bean « ( " » test Validator « " , Validator . class ) ) ; » Request Mapping Handler Adapter « » mapping Handler Adapter « = this . context . » get Bean « ( » Request Mapping Handler Adapter « . class ) ; » assert That « ( » mapping Handler Adapter « . » get Web Binding Initializer « ( ) ) . » has Field Or Property With Value « ( " validator " , this . context . » get Bean « ( " » mvc Validator « " ) ) ; » assert That « ( this . context . » get Beans Of Type « ( Validator . class ) ) . » contains Only Keys « ( " » mvc Validator « " , " » test Validator « " ) ; }
@Test { Transactional tx = » find Annotation « ( » Sub Inherited Annotation Interface « . class , Transactional . class ) ; » assert That « ( tx ) . as ( " Should find @ Transactional on » Sub Inherited Annotation Interface « " ) . » is Not Null « ( ) ; }
@Test { » Input Stream Resource « resource = mock ( » Input Stream Resource « . class ) ; given ( resource . » content Length « ( ) ) . » will Throw « ( » IO Exception « . class ) ; » Http Range « range = » Http Range « . » create Byte Range « ( 0 , 9 ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> range . » to Resource Region « ( resource ) ) ; }
@Test { » Method Parameter « param = this . » test Method « . annot ( » matrix Attribute « ( ) . name ( " year " ) ) . arg ( int . class ) ; » assert That « ( resolver . » resolve Argument « ( param , this . » mav Container « , this . » web Request « , null ) ) . » is Equal To « ( " 2013 " ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Config With Test Profile Beans « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » test Bean « " ) ) . » is True « ( ) ; » assert That « ( ctx . » contains Bean « ( " » test Profile Bean « " ) ) . » is True « ( ) ; }
@Test { this . adapter . » on Close « ( this . session , new » Close Reason « ( » Close Codes « . » NORMAL _ CLOSURE « , " reason " ) ) ; verify ( this . » web Socket Handler « ) . » after Connection Closed « ( this . » web Socket Session « , » Close Status « . NORMAL . » with Reason « ( " reason " ) ) ; }
@Test { » Test Bean « » test Bean « = new » Test Bean « ( " expected " ) ; this . processor . » handle Return Value « ( » test Bean « , this . » return Param Non Simple Type « , this . container , this . request ) ; » assert That « ( this . container . » get Model « ( ) . get ( " » test Bean « " ) ) . » is Same As « ( » test Bean « ) ; }
@Test { String » attr Name « = " PARENT " ; String » attr Value « = " VALUE " ; » Mock Mvc « » mock Mvc « = » Mock Mvc Builders « . » standalone Setup « ( new » Hello Controller « ( ) ) . » default Request « ( get ( " / " ) . » request Attr « ( » attr Name « , » attr Value « ) ) . build ( ) ; » assert That « ( » mock Mvc « . perform ( » request Builder « ) . » and Return « ( ) . » get Request « ( ) . » get Attribute « ( » attr Name « ) ) . » is Equal To « ( » attr Value « ) ; }
@Test { » test Multi Put « ( this . ccs ) ; }
@Test { » Merged Annotation « < » Test Annotation « > annotation = » Merged Annotations « . from ( » With Test Annotation « . class ) . get ( » Test Annotation « . class ) ; » assert That « ( » Merged Annotation Predicates « . » type In « ( » Test Annotation « . class . » get Name « ( ) ) ) . accepts ( annotation ) ; }
@Test { » Jaxb 2 Marshaller « marshaller = new » Jaxb 2 Marshaller « ( ) ; marshaller . » set Context Path « ( » CONTEXT _ PATH « ) ; marshaller . » set Marshaller Properties « ( Collections . < String , Object > » singleton Map « ( javax . xml . bind . Marshaller . » JAXB _ FORMATTED _ OUTPUT « , Boolean . TRUE ) ) ; marshaller . » after Properties Set « ( ) ; }
@Test { final String sql = " UPDATE NOSUCHTABLE SET » DATE _ DISPATCHED « = SYSDATE WHERE ID = ? " ; » Jdbc Template « template = new » Jdbc Template « ( this . » data Source « , false ) ; int [ ] » actual Rows Affected « = template . » batch Update « ( sql , Collections . » empty List « ( ) ) ; » assert That « ( » actual Rows Affected « . length == 0 ) . as ( " executed 0 updates " ) . » is True « ( ) ; }
@Test { » Http Servlet Request « request = » create Request « ( " text / plain " ) ; » Produces Request Condition « condition = new » Produces Request Condition « ( " text / plain " , " application / xml " ) ; » Produces Request Condition « result = condition . » get Matching Condition « ( request ) ; » assert Conditions « ( result , " text / plain " ) ; condition = new » Produces Request Condition « ( " application / xml " ) ; result = condition . » get Matching Condition « ( request ) ; » assert That « ( result ) . » is Null « ( ) ; }
@Test { » will Throw « ( new Boom ( ) ) . given ( statement ) . evaluate ( ) ; » assert That Exception Of Type « ( Boom . class ) . » is Thrown By « ( ( ) -> new » Spring Fail On Timeout « ( statement , 1 ) . evaluate ( ) ) ; }
@Test { Runnable callback = mock ( Runnable . class ) ; this . » simp Attributes « . » register Destruction Callback « ( " » name 1 « " , callback ) ; » assert That « ( this . » simp Attributes « . » get Attribute « ( » Simp Attributes « . » DESTRUCTION _ CALLBACK _ NAME _ PREFIX « + " » name 1 « " ) ) . » is Same As « ( callback ) ; }
@Test { » assert Filter Not Invoked « ( " / index . html / " , " * . html " ) ; }
@Test { » Message Listener Adapter « adapter = new » Message Listener Adapter « ( ) ; » assert That « ( adapter . » get Delegate « ( ) ) . » is Same As « ( adapter ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Mock Mvc Web Connection « ( this . » mock Mvc « , this . » web Client « , " / context / " ) ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . » get Environment « ( ) . » set Active Profiles « ( » Profile Annotated Component « . » PROFILE _ NAME « ) ; ctx . register ( » Profile Annotated Component « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( » Profile Annotated Component « . » BEAN _ NAME « ) ) . » is True « ( ) ; }
@Test { » Uri Components « » uri Components « = » from Method Name « ( » Controller With Methods « . class , " » method With Path Variable « " , " 1 " ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " http : » // localhost / something / 1 / foo « " ) ; }
@Test { » Wildcard Enum Consumer « target = new » Wildcard Enum Consumer « ( ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; accessor . » set Property Value « ( " » enum Value « " , » Test Enum « . class . » get Name « ( ) + " . » TEST _ VALUE « " ) ; » assert That « ( target . » get Enum Value « ( ) ) . » is Equal To « ( » Test Enum « . » TEST _ VALUE « ) ; }
@Test { Message < ? > message = new » Generic Message « < > ( " payload " , Collections . » singleton Map « ( " foo " , " bar " ) ) ; » Message Header Accessor « accessor = new » Message Header Accessor « ( message ) ; accessor . » remove Header « ( " foo " ) ; Map < String , Object > headers = accessor . » to Map « ( ) ; » assert That « ( headers . » contains Key « ( " foo " ) ) . » is False « ( ) ; }
@Test { » do Test Existing Transaction With Propagation Nested « ( 1 ) ; }
@Test { new » Content Result Matchers « ( ) . bytes ( CONTENT . » get Bytes « ( " UTF - 8 " ) ) . match ( » get Stub Mvc Result « ( CONTENT ) ) ; }
@Test { this . session . » set Exception On Write « ( new » IO Exception « ( ) ) ; this . session . » delegate Connection Established « ( ) ; this . session . » set Active « ( true ) ; this . session . close ( ) ; » assert That « ( this . session . » get Close Status « ( ) ) . » is Equal To « ( new » Close Status « ( 3000 , " Go away ! " ) ) ; » assert Closed « ( ) ; }
@Test { » assert That « ( context ) . as ( " child » Application Context « " ) . » is Not Null « ( ) ; » assert That « ( context . » get Parent « ( ) ) . as ( " parent » Application Context « " ) . » is Null « ( ) ; » assert That « ( foo ) . » is Equal To « ( " foo - level - 1 " ) ; » assert That « ( bar ) . » is Equal To « ( " bar " ) ; }
@Test { » Message Converter « » custom Message Converter « = mock ( » Message Converter « . class ) ; » Jms Messaging Template « » messaging Template « = new » Jms Messaging Template « ( ) ; » messaging Template « . » set Jms Message Converter « ( new » Messaging Message Converter « ( » custom Message Converter « ) ) ; » messaging Template « . » set Jms Template « ( this . » jms Template « ) ; » messaging Template « . » after Properties Set « ( ) ; » assert Payload Converter « ( » messaging Template « , » custom Message Converter « ) ; }
@Test { this . request . » get Body « ( ) . write ( " test " . » get Bytes « ( ) ) ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> » Mock Rest Request Matchers « . content ( ) . string ( " Test " ) . match ( this . request ) ) ; }
@Test { » Method Parameter « param = this . resolvable . arg ( » Message Header Accessor « . class ) ; Object resolved = this . resolver . » resolve Argument « ( param , this . message ) ; boolean condition = resolved instanceof » Message Header Accessor « ; » assert That « ( condition ) . » is True « ( ) ; » Message Header Accessor « headers = ( » Message Header Accessor « ) resolved ; » assert That « ( headers . » get Header « ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { » assert That Transaction « ( ) . » is Active « ( ) ; » assert That « ( » add Person « ( » jdbc Template « , JANE ) ) . as ( " Adding jane " ) . » is Equal To « ( 1 ) ; » assert That « ( » add Person « ( » jdbc Template « , SUE ) ) . as ( " Adding sue " ) . » is Equal To « ( 1 ) ; » assert That « ( » count Rows In Person Table « ( » jdbc Template « ) ) . as ( " Verifying the number of rows in the person table within » transactional Method 2 « ( ) . " ) . » is Equal To « ( 3 ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » one Annotation « " ) , " @ this ( a ) " , new String [ ] { " a " } ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( " GET " , " / context - path / index " ) ; request . » set Context Path « ( " / context - path " ) ; request . » set Servlet Path « ( " " ) ; » test Encode Url « ( request , " index ? key = value " , " index ? key = value " ) ; }
@Test { » assert That « ( this . » nonrequired Long « ) . as ( " The » nonrequired Long « property should NOT have been autowired . " ) . » is Null « ( ) ; » assert That « ( this . » application Context « ) . as ( " The application context should have been autowired . " ) . » is Not Null « ( ) ; » assert That « ( this . pet ) . as ( " The pet field should have been autowired . " ) . » is Not Null « ( ) ; » assert That « ( this . pet . » get Name « ( ) ) . » is Equal To « ( " Dogbert " ) ; }
@Test { » assert That « ( » Java Script Utils « . » java Script Escape « ( " < > " ) ) . » is Equal To « ( " \\u003C \\u003E " ) ; }
@Test { » assert That « ( decoder . » can Decode « ( » for Class « ( Pojo . class ) , » CBOR _ MIME _ TYPE « ) ) . » is True « ( ) ; » assert That « ( decoder . » can Decode « ( » for Class « ( Pojo . class ) , null ) ) . » is True « ( ) ; » assert That « ( decoder . » can Decode « ( » for Class « ( String . class ) , null ) ) . » is False « ( ) ; » assert That « ( decoder . » can Decode « ( » for Class « ( Pojo . class ) , » APPLICATION _ JSON « ) ) . » is False « ( ) ; }
@Test { » Property Editor « editor = new » Resource Editor « ( new » Default Resource Loader « ( ) , new » Standard Environment « ( ) , false ) ; System . » set Property « ( " test . prop " , " foo " ) ; try { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> { editor . » set As Text « ( " $ { test . prop } - $ { bar } " ) ; editor . » get Value « ( ) ; } ) ; } finally { System . » get Properties « ( ) . remove ( " test . prop " ) ; } }
@Test { » assert Exception « ( » get Method « ( " » one Object « " ) , " this ( x ) || this ( y ) " , » Ambiguous Binding Exception « . class , " Found 2 candidate this ( ) , target ( ) or args ( ) variables but only one unbound argument slot " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> this . matchers . » attribute Error Count « ( " date " , 2 ) . match ( this . » mvc Result With Error « ) ) . » with Message « ( " Binding / validation error count for attribute 'date' , expected : < 2 > but was : < 1 > " ) ; }
@Test { » assert That « ( this . converter . » can Read « ( String . class , » Media Type « . » TEXT _ PLAIN « ) ) . » is True « ( ) ; }
@Test { new » Json Path Result Matchers « ( " $ . str " ) . value ( " foo " ) . match ( » stub Mvc Result « ) ; }
@Test { » Stomp Headers « » connect Headers « = this . » stomp Client « . » process Connect Headers « ( null ) ; » assert That « ( » connect Headers « ) . » is Not Null « ( ) ; » assert That « ( » connect Headers « . » get Heartbeat « ( ) ) . » is Equal To « ( new long [ ] { 10000 , 10000 } ) ; }
@Test { » Converting Comparator « < String , Integer > » converting Comparator « = new » Converting Comparator « < > ( this . comparator , this . converter ) ; » test Conversion « ( » converting Comparator « ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( » Shadow Config « . class ) ; » assert That « ( ctx . » get Bean « ( String . class ) ) . » is Equal To « ( " shadow " ) ; }
@Test { » assert That « ( » Merged Annotations « . from ( » Non Annotated Class « . class ) . stream ( » Transactional Component « . class ) ) . » is Empty « ( ) ; }
@Test { » assert That « ( this . » tx Manager « . begun ) . » is Equal To « ( 0 ) ; new » Jta Annotation Protected Annotated Member « ( ) . » do In Transaction « ( ) ; » assert That « ( this . » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { » parse Check « ( " 3 >= 3 " , " ( 3 >= 3 ) " ) ; }
@Test { Method method = » Abstract Parameterized Controller « . class . » get Method « ( " » handle Dto « " , Identifiable . class ) ; » Handler Method « » handler Method « = new » Handler Method « ( new » Concrete Parameterized Controller « ( ) , method ) ; » Method Parameter « » method Param « = » handler Method « . » get Method Parameters « ( ) [ 0 ] ; » Simple Bean « » simple Bean « = » resolve Value « ( » method Param « , " { \" name \" : \" Jad \" } " ) ; » assert That « ( » simple Bean « . » get Name « ( ) ) . » is Equal To « ( " Jad " ) ; }
@Test { » Http Entity « < String > » request Entity « = new » Http Entity « < > ( » hello World « ) ; Future < ? > » response Entity Future « = template . put ( » base Url « + " / { method } " , » request Entity « , " put " ) ; » response Entity Future « . get ( ) ; }
@Test { » Candidate Components Index « index = » Candidate Components Index Loader « . » load Index « ( null ) ; » assert That « ( index ) . as ( " No spring . components should be available at the default location " ) . » is Null « ( ) ; }
@Test { this . handler . handle ( this . » mvc Result « ) ; » assert Value « ( " » Mock Http Servlet Request « " , " Body " , " < no character encoding set > " ) ; }
@Test { » test Frame Decoder « ( new » Netty Data Buffer Factory « ( » Byte Buf Allocator « . DEFAULT ) , » Payload Decoder « . » ZERO _ COPY « ) ; » test Frame Decoder « ( new » Default Data Buffer Factory « ( ) , » Payload Decoder « . DEFAULT ) ; }
@Test { » Path Resource « resource = new » Path Resource « ( » TEST _ FILE « ) ; File file = new File ( » TEST _ FILE « ) ; » assert That « ( resource . » last Modified « ( ) / 1000 ) . » is Equal To « ( file . » last Modified « ( ) / 1000 ) ; }
@Test { this . tag . » set Path « ( " name " ) ; » assert That Illegal Argument Exception « ( ) . as ( " null value when binding to a non - boolean " ) . » is Thrown By « ( this . tag :: » do Start Tag « ) ; }
@Test { » evaluate And Ask For Return Type « ( " 8 / 4 " , new Double ( 2.0 ) , Double . class ) ; }
@Test { » Aspect J Proxy Factory « » proxy Factory « = new » Aspect J Proxy Factory « ( new » Test Bean « ( ) ) ; » proxy Factory « . » add Aspect « ( » Logging Aspect On Varargs « . class ) ; » I Test Bean « proxy = » proxy Factory « . » get Proxy « ( ) ; » assert That « ( proxy . » do With Varargs « ( » My Enum « . A , » My Other Enum « . C ) ) . » is True « ( ) ; }
@Test { Map < String , » Notification Listener « > listeners = new » Hash Map « < > ( ) ; listeners . put ( " * " , null ) ; » M Bean Exporter « exporter = new » M Bean Exporter « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> exporter . » set Notification Listener Mappings « ( listeners ) ) ; }
@Test { » assert That « ( foo ) . » is Equal To « ( " Resolver Foo " ) ; }
@Test { this . » bean Factory « . » add Bean Post Processor « ( new » Custom Destruction Aware Bean Post Processor « ( ) ) ; » do Test Destruction With Session Serialization « ( false ) ; }
@Test { evaluate ( " true and 5 > 3 " , " true " , Boolean . class ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Refreshable Script Target Source « ( mock ( » Bean Factory « . class ) , " a . bean " , null , null , false ) ) ; }
@Test { » do Test Jta Transaction With Propagation Requires New And Begin Exception « ( false , true , false ) ; }
@Test { Class < ? > » test Class « = » Single Initializer « . class ; » Merged Context Configuration « » merged Config « = » build Merged Context Configuration « ( » test Class « ) ; » assert Merged Config « ( » merged Config « , » test Class « , » EMPTY _ STRING _ ARRAY « , » EMPTY _ CLASS _ ARRAY « , initializers ( » Foo Initializer « . class ) , » Delegating Smart Context Loader « . class ) ; }
@Test { » Mock Http Output Message « » output Message « = new » Mock Http Output Message « ( ) ; byte [ ] » byte Array « = { 1 , 2 , 3 } ; Resource body = new » Byte Array Resource « ( » byte Array « ) ; converter . write ( body , null , » output Message « ) ; » assert That « ( Arrays . equals ( » byte Array « , » output Message « . » get Body As Bytes « ( ) ) ) . » is True « ( ) ; }
@Test { » Derived From Protected Base Bean « target = new » Derived From Protected Base Bean « ( ) ; » Abstract Property Accessor « accessor = » create Accessor « ( target ) ; accessor . » set Property Value « ( " » some Property « " , " » some Value « " ) ; » assert That « ( accessor . » get Property Value « ( " » some Property « " ) ) . » is Equal To « ( " » some Value « " ) ; » assert That « ( target . » get Some Property « ( ) ) . » is Equal To « ( " » some Value « " ) ; }
@Test { » assert That « ( » get Tagged « ( » With Annotation Attributes « . class ) . » get Annotation Attributes « ( » Annotation Attributes « . class . » get Name « ( ) ) ) . » contains Only « ( entry ( " name " , " test " ) , entry ( " size " , 1 ) ) ; }
@Test { this . » simp Attributes « . » session Completed « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » simp Attributes « . » register Destruction Callback « ( " » name 1 « " , mock ( Runnable . class ) ) ) . » with Message Containing « ( " already completed " ) ; }
@Test { » Map Message « message = mock ( » Map Message « . class ) ; Session session = mock ( Session . class ) ; given ( session . » create Map Message « ( ) ) . » will Return « ( message ) ; Map < Integer , String > content = new » Hash Map « < > ( 1 ) ; content . put ( 1 , " » value 1 « " ) ; » Simple Message Converter « converter = new » Simple Message Converter « ( ) ; » assert That Exception Of Type « ( » Message Conversion Exception « . class ) . » is Thrown By « ( ( ) -> converter . » to Message « ( content , session ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Converting Comparator « < String , Integer > ( this . comparator , this . » conversion Service « , null ) ) ; }
@Test { Expression expression = new » Spel Expression Parser « ( ) . » parse Raw « ( " » integers .^ « [ # this < 5 ] " ) ; » Evaluation Context « context = new » Standard Evaluation Context « ( new » Set Test Bean « ( ) ) ; Object value = expression . » get Value « ( context ) ; boolean condition = value instanceof Integer ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( value ) . » is Equal To « ( 0 ) ; }
@Test { given ( manager . » get Transaction « ( ) ) . » will Return « ( tx ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . » join Transaction « ( ) ; bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( tx , times ( 2 ) ) . commit ( ) ; verify ( manager ) . flush ( ) ; verify ( manager ) . close ( ) ; }
@Test { String body = " foo " ; » Entity Response « < String > result = » Entity Response « . » from Object « ( body ) . » content Type « ( » Media Type « . » APPLICATION _ JSON « ) . build ( ) ; » assert That « ( result . headers ( ) . » get Content Type « ( ) ) . » is Equal To « ( » Media Type « . » APPLICATION _ JSON « ) ; }
@Test { » test Receive One Message « ( » create Xhr Transport « ( ) , null ) ; }
@Test { Map < String , String > input = new » Linked Hash Map « < > ( ) ; input . put ( " key " , " value " ) ; Object converted = » conversion Service « . convert ( input , » Type Descriptor « . » for Object « ( input ) , new » Type Descriptor « ( » get Class « ( ) . » get Field « ( " » wildcard Map « " ) ) ) ; » assert That « ( converted ) . » is Equal To « ( input ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » simple Service « . » unless Sync « ( " key " ) ) . » with Message Containing « ( " @ Cacheable ( sync = true ) does not support unless attribute " ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Enum Array « ( " value " , » Test Enum « . class ) ) ; }
@Test { » assert That « ( request . » get Server Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { » Jndi Object Factory Bean « jof = new » Jndi Object Factory Bean « ( ) ; Object o = new Object ( ) ; jof . » set Jndi Template « ( new » Expected Lookup Template « ( " java : comp / env / foo " , o ) ) ; jof . » set Jndi Name « ( " java : comp / env / foo " ) ; jof . » set Resource Ref « ( true ) ; jof . » after Properties Set « ( ) ; » assert That « ( jof . » get Object « ( ) == o ) . » is True « ( ) ; }
@Test { » Platform Transaction Manager « » transaction Manager « = mock ( » Platform Transaction Manager « . class ) ; » Transaction Interceptor « ti = » transaction Interceptor With Transaction Manager « ( » transaction Manager « , null ) ; » assert That « ( ti . » determine Transaction Manager « ( null ) ) . » is Same As « ( » transaction Manager « ) ; }
@Test { request . » get Input Stream « ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( request :: » get Reader « ) . » with Message Containing « ( " Cannot call » get Reader « ( ) after » get Input Stream « ( ) has already been called for the current request " ) ; }
@Test { » evaluate And Check Error « ( " » map Of Numbers Up To Ten « . ? [ 'hello' ] . size ( ) " , » Spel Message « . » RESULT _ OF _ SELECTION _ CRITERIA _ IS _ NOT _ BOOLEAN « ) ; }
@Test { this . resolver . » set Default Locale « ( JAPANESE ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; » assert That « ( this . resolver . » resolve Locale « ( request ) ) . » is Equal To « ( JAPANESE ) ; request . » add Header « ( " Accept - Language " , US . » to Language Tag « ( ) ) ; request . » set Preferred Locales « ( Collections . » singleton List « ( US ) ) ; » assert That « ( this . resolver . » resolve Locale « ( request ) ) . » is Equal To « ( US ) ; }
@Test { » assert Environment Value « ( " enigma " , " meta " ) ; }
@Test { Class < ? > [ ] classes = new Class < ? > [ ] { » get Class « ( ) } ; » Context Configuration Attributes « » config Attributes « = new » Context Configuration Attributes « ( » get Class « ( ) , » EMPTY _ STRING _ ARRAY « , classes , true , null , true , » Context Loader « . class ) ; loader . » process Context Configuration « ( » config Attributes « ) ; » assert That « ( » config Attributes « . » get Classes « ( ) ) . » is Equal To « ( classes ) ; » assert Empty « ( » config Attributes « . » get Locations « ( ) ) ; }
@Test { byte [ ] » test Content « = " Bla " . » get Bytes « ( ) ; » Byte Array Input Stream « bais = new » Byte Array Input Stream « ( » test Content « ) ; » Input Stream Reader « reader = new » Input Stream Reader « ( bais ) ; » Sql Lob Value « lob = new » Sql Lob Value « ( reader , 3 , handler ) ; lob . » set Type Value « ( » prepared Statement « , 1 , Types . CLOB , " test " ) ; verify ( creator ) . » set Clob As Character Stream « ( eq ( » prepared Statement « ) , eq ( 1 ) , eq ( reader ) , eq ( 3 ) ) ; }
@Test { » Status Assertions « assertions = » status Assertions « ( » Http Status « . » PERMANENT _ REDIRECT « ) ; assertions . » is 3 xx Redirection « ( ) ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> assertions . » is 2 xx Successful « ( ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Tag Utils « . » assert Has Ancestor Of Type « ( new » Tag A « ( ) , » Tag C « . class , " a " , null ) ) ; }
@Test { » multicast Event « ( true , » String Event Listener « . class , » create Generic Test Event « ( " test " ) , » Resolvable Type « . » for Class With Generics « ( » Generic Test Event « . class , String . class ) ) ; }
@Test { » assert Loads My Bean « ( » Import Child Config « . class , » Child Config « . class ) ; }
@Test { » Uri Components « » uri Components « = » from Method Call « ( on ( » Controller With Methods « . class ) . » method With Path Variable « ( " 1 " ) ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » starts With « ( " http : » // localhost « " ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » ends With « ( " / something / 1 / foo " ) ; }
@Test { Object o = » get Bean Factory « ( ) . » get Bean « ( " » valid Empty « " ) ; boolean condition = o instanceof » Test Bean « ; » assert That « ( condition ) . as ( " » valid Empty « bean is a » Test Bean « " ) . » is True « ( ) ; » Test Bean « ve = ( » Test Bean « ) o ; » assert That « ( ve . » get Name « ( ) == null && ve . » get Age « ( ) == 0 && ve . » get Spouse « ( ) == null ) . as ( " Valid empty has defaults " ) . » is True « ( ) ; }
@Test { » Message Header Accessor « accessor = new » Message Header Accessor « ( ) ; » assert That « ( ( Object ) accessor . » get Message Headers « ( ) . » get Timestamp « ( ) ) . » is Null « ( ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » invoke Method « ( component , " configure " , Integer . » value Of « ( 42 ) ) ) . » with Message Starting With « ( " Method not found " ) ; }
@Test { » assert Filter Invoked « ( " / foo / bar / index . bop " , " » / foo / bar / « * " ) ; }
@Test { » do Test Transaction Commit Restoring Auto Commit « ( true , true , true ) ; }
@Test { String » first Name « = " Tony " ; » insert Person « ( » first Name « ) ; List < Person > people = » shared Entity Manager « . » create Query « ( " select p from Person as p " ) . » get Result List « ( ) ; » assert That « ( people . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( people . get ( 0 ) . » get First Name « ( ) ) . » is Equal To « ( » first Name « ) ; » assert That « ( people . get ( 0 ) . » post Loaded « ) . » is Same As « ( » application Context « ) ; }
@Test { » Web Connection « conn = this . builder . » use Mock Mvc For Hosts « ( " example . com " ) . » create Connection « ( this . client ) ; » assert Mock Mvc Used « ( conn , " http : » // localhost / « " ) ; » assert Mock Mvc Used « ( conn , " https : » // example . com / « " ) ; » assert Mock Mvc Not Used « ( conn , " http : » // other . example / « " ) ; }
@Test { bf . » register Bean Definition « ( " » annotated Bean « " , new » Root Bean Definition « ( » Object Factory Constructor Injection Bean « . class ) ) ; bf . » register Bean Definition « ( " » test Bean « " , new » Root Bean Definition « ( » Test Bean « . class ) ) ; » Object Factory Constructor Injection Bean « bean = ( » Object Factory Constructor Injection Bean « ) bf . » get Bean « ( " » annotated Bean « " ) ; » assert That « ( bean . » get Test Bean « ( ) ) . » is Same As « ( bf . » get Bean « ( " » test Bean « " ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Converting Comparator « < > ( null , this . converter ) ) ; }
@Test { » do Test Conversion Service In Application Context « ( " » conversion Service « . xml " , » Class Path Resource « . class ) ; }
@Test { » String Builder « builder = new » String Builder « ( " \" 0 " ) ; this . os . write ( this . » hello Bytes « ) ; » Input Stream « » input Stream « = this . os . » get Input Stream « ( ) ; » Digest Utils « . » append Md 5 Digest As Hex « ( » input Stream « , builder ) ; builder . append ( " \" " ) ; String actual = builder . » to String « ( ) ; » assert That « ( actual ) . » is Equal To « ( " \" 0b10 » a 8 db 164 e 0754105 b 7 a 99 be 72 e 3 fe 5 « \" " ) ; }
@Test { Method method = » Class Utils « . » get Static Method « ( » Inner Class « . class , " » static Method « " , String . class ) ; method . invoke ( null , " test " ) ; » assert That « ( » Inner Class « . » overloaded Called « ) . as ( " argument method was not invoked . " ) . » is True « ( ) ; }
@Test { int » how Many « = 10000 ; » Stop Watch « sw = new » Stop Watch « ( ) ; sw . start ( " Create " + » how Many « + " proxies " ) ; » test Many Proxies « ( » how Many « ) ; sw . stop ( ) ; » assert That « ( sw . » get Total Time Millis « ( ) < 5000 ) . as ( " Proxy creation was too slow " ) . » is True « ( ) ; }
@Test { String expected = " cached - imaginary . css " ; this . cache . put ( » Caching Resource Resolver « . » RESOLVED _ URL _ PATH _ CACHE _ KEY _ PREFIX « + " imaginary . css " , expected ) ; String actual = this . chain . » resolve Url Path « ( " imaginary . css " , this . locations ) . block ( TIMEOUT ) ; » assert That « ( actual ) . » is Equal To « ( expected ) ; }
@Test { » assert That Transaction « ( ) . » is Not Active « ( ) ; » assert Num Users « ( 2 ) ; }
@Test { » M Bean Server « server = » Management Factory « . » get Platform M Bean Server « ( ) ; Object actual = server . invoke ( » Object Name « . » get Instance « ( " test : type = » Test Bean « " ) , " » do Something « " , new Object [ 0 ] , new String [ 0 ] ) ; » assert That « ( actual ) . » is Equal To « ( " done " ) ; }
@Test { this . request . » set Method « ( " OPTIONS " ) ; this . request . » set Attribute « ( » Handler Mapping « . » PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE « , " foo . css " ) ; this . handler . » handle Request « ( this . request , this . response ) ; » assert That « ( this . response . » get Status « ( ) ) . » is Equal To « ( 200 ) ; » assert That « ( this . response . » get Header « ( " Allow " ) ) . » is Equal To « ( " GET , HEAD , OPTIONS " ) ; }
@Test { String [ ] sa = » String Utils « . » comma Delimited List To String Array « ( null ) ; » assert That « ( sa != null ) . as ( " String array is » n ' t « null with null input " ) . » is True « ( ) ; » assert That « ( sa . length == 0 ) . as ( " String array length == 0 with null input " ) . » is True « ( ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » color Map « " ) . » assert Value Is Map « ( CONTENT ) ; }
@Test { » Multi Value Map « < String , String > » native Headers « = new » Linked Multi Value Map « < > ( ) ; » native Headers « . add ( " foo " , " bar " ) ; » Native Message Header Accessor « headers = new » Native Message Header Accessor « ( » native Headers « ) ; headers . » set Native Header « ( " foo " , " baz " ) ; » assert That « ( headers . » get Native Header « ( " foo " ) ) . » is Equal To « ( Arrays . » as List « ( " baz " ) ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » is Not Empty « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { » mock Sent Request « ( GET , " https : » // example . com /- foo « " ) ; » mock Response Status « ( » Http Status « . OK ) ; Map < String , String > vars = new » Hash Map « < > ( 2 ) ; vars . put ( " first " , null ) ; vars . put ( " last " , " foo " ) ; template . execute ( " https : » // example . com / « { first } - { last } " , GET , null , null , vars ) ; verify ( response ) . close ( ) ; }
@Test { » Test Bean « » bean Instance « = new » Test Bean « ( ) ; » Bean Wiring Info Resolver « resolver = mock ( » Bean Wiring Info Resolver « . class ) ; » Bean Configurer Support « configurer = new » Stub Bean Configurer Support « ( ) ; configurer . » set Bean Wiring Info Resolver « ( resolver ) ; configurer . » set Bean Factory « ( new » Default Listable Bean Factory « ( ) ) ; configurer . » configure Bean « ( » bean Instance « ) ; verify ( resolver ) . » resolve Wiring Info « ( » bean Instance « ) ; » assert That « ( » bean Instance « . » get Name « ( ) ) . » is Null « ( ) ; }
@Test { this . builder = new » Mock Http Servlet Request Builder « ( » Http Method « . GET , " » / foo « # bar " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " / foo " ) ; }
@Test { » request Builder « . » set Context Path « ( " / invalid " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » request Builder « . » build Request « ( » servlet Context « ) . » get Context Path « ( ) ) ; }
@Test { final Object » CONNECTION _ FACTORY « = new Object ( ) ; » Managed Connection Factory « » managed Connection Factory « = mock ( » Managed Connection Factory « . class ) ; given ( » managed Connection Factory « . » create Connection Factory « ( ) ) . » will Return « ( » CONNECTION _ FACTORY « ) ; » Local Connection Factory Bean « factory = new » Local Connection Factory Bean « ( ) ; factory . » set Managed Connection Factory « ( » managed Connection Factory « ) ; factory . » after Properties Set « ( ) ; » assert That « ( factory . » get Object « ( ) ) . » is Equal To « ( » CONNECTION _ FACTORY « ) ; }
@Test { » exception Resolver « . » set Default Error View « ( " default - view " ) ; » exception Resolver « . » set Default Status Code « ( » Http Servlet Response « . » SC _ BAD _ REQUEST « ) ; » exception Resolver « . » resolve Exception « ( request , response , » handler 1 « , » generic Exception « ) ; » assert That « ( response . » get Status « ( ) ) . » is Equal To « ( » Http Servlet Response « . » SC _ BAD _ REQUEST « ) ; }
@Test { » assert Set Field And Get Field Behavior « ( this . person ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . converter . » to Message « ( new Object ( ) , mock ( Session . class ) ) ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / 1 " ) . param ( " » streaming Json « " , " true " ) ) . » and Expect « ( request ( ) . » async Started « ( ) ) . » and Do « ( » Mvc Result « :: » get Async Result « ) . » and Expect « ( status ( ) . » is Ok « ( ) ) . » and Expect « ( content ( ) . » content Type « ( » Media Type « . » APPLICATION _ JSON « ) ) . » and Expect « ( content ( ) . string ( " { \" name \" : \" Joe \" , \" » some Double « \" : 0.5 } " ) ) ; }
@Test { » do Test Receive « ( true , false , false , true , true , true , » Jms Template « . » RECEIVE _ TIMEOUT _ INDEFINITE _ WAIT « ) ; }
@Test { » Application Context « ctx = new » Class Path Xml Application Context « ( » DEPENDENCY _ CHECK _ CONTEXT « , » get Class « ( ) ) ; ctx . » get Bean « ( " » test Bean « " ) ; }
@Test { » Multi Value Map « < String , String > » native Headers « = new » Linked Multi Value Map « < > ( ) ; » native Headers « . add ( " foo " , " bar " ) ; » Native Message Header Accessor « headers = new » Native Message Header Accessor « ( » native Headers « ) ; headers . » add Native Header « ( " foo " , null ) ; » assert That « ( headers . » get Native Header « ( " foo " ) ) . » is Equal To « ( Arrays . » as List « ( " bar " ) ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " EUR " , Currency . class ) ) . » is Equal To « ( Currency . » get Instance « ( " EUR " ) ) ; }
@Test { » Foo Bar « bean = new » Foo Bar « ( ) ; » Proxy Creator Support « as = new » Proxy Creator Support « ( ) ; as . » set Interfaces « ( Foo . class ) ; as . » set Target « ( bean ) ; Foo proxy = ( Foo ) » create Proxy « ( as ) ; » assert That « ( proxy . » get Bar This « ( ) ) . as ( " Target should be returned when return types are incompatible " ) . » is Same As « ( bean ) ; » assert That « ( proxy . » get Foo This « ( ) ) . as ( " Proxy should be returned when return types are compatible " ) . » is Same As « ( proxy ) ; }
@Test { » Linked List « < ? > result = » conversion Service « . convert ( new String [ ] { " 1 " , " 2 " , " 3 " } , » Linked List « . class ) ; » assert That « ( result . get ( 0 ) ) . » is Equal To « ( " 1 " ) ; » assert That « ( result . get ( 1 ) ) . » is Equal To « ( " 2 " ) ; » assert That « ( result . get ( 2 ) ) . » is Equal To « ( " 3 " ) ; }
@Test { ( ( » Mock Http Servlet Request « ) context . » get Request « ( ) ) . » set Context Path « ( " / app - context " ) ; tag . » set Value « ( " / url / path " ) ; tag . » set Context « ( " / " ) ; tag . » do Start Tag « ( ) ; String uri = tag . » create Url « ( ) ; » assert That « ( uri ) . » is Equal To « ( " / url / path " ) ; }
@Test { » assert That Exception Of Type « ( » Aop Config Exception « . class ) . » is Thrown By « ( ( ) -> » get Fixture « ( ) . » get Advisors « ( new » Singleton Metadata Aware Aspect Instance Factory « ( new » Per Cflow Aspect « ( ) , " » some Bean « " ) ) ) . » with Message Containing « ( " PERCFLOW " ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " " , Foo . class ) ) . » is Equal To « ( null ) ; }
@Test { » servlet Request « . » set Content « ( new byte [ 0 ] ) ; given ( » string Message Converter « . » can Read « ( String . class , » Media Type « . » TEXT _ PLAIN « ) ) . » will Return « ( true ) ; given ( » string Message Converter « . » can Read « ( String . class , » Media Type « . » APPLICATION _ OCTET _ STREAM « ) ) . » will Return « ( false ) ; » assert That « ( processor . » resolve Argument « ( » param String Not Required « , » mav Container « , » web Request « , new » Validating Binder Factory « ( ) ) ) . » is Null « ( ) ; }
@Test { » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Local Addr « ( ) ) . » is Equal To « ( " 127.0 .0 .1 " ) ; }
@Test { this . request . » set Scheme « ( " https " ) ; this . request . » set Server Port « ( 9043 ) ; String result = » Servlet Uri Components Builder « . » from Request « ( this . request ) . build ( ) . » to Uri String « ( ) ; » assert That « ( result ) . » is Equal To « ( " https : » // localhost : 9043 / mvc - showcase « " ) ; }
@Test { » assert That « ( this . handler . » is Reactive Type « ( String . class ) ) . » is False « ( ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( » Sample Events « . class , " » handle Generic String « " , » Generic Test Event « . class ) ; » supports Event Type « ( false , method , » Resolvable Type « . » for Class With Generics « ( » Generic Test Event « . class , Long . class ) ) ; }
@Test { » assert That « ( » Data Size « . parse ( " - 1 " ) ) . » is Equal To « ( » Data Size « . » of Bytes « ( - 1 ) ) ; }
@Test { » assert Count « ( 24 ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Multi Cache Manager Configurer « . class ) ; ctx . refresh ( ) ; }
@Test { » Mapping Jackson 2 Message Converter « converter = new » Mapping Jackson 2 Message Converter « ( ) ; String payload = " » Foo Bar « " ; Message < ? > message = » Message Builder « . » with Payload « ( payload . » get Bytes « ( » Standard Charsets « . » UTF _ 8 « ) ) . build ( ) ; » assert That Exception Of Type « ( » Message Conversion Exception « . class ) . » is Thrown By « ( ( ) -> converter . » from Message « ( message , » My Bean « . class ) ) ; }
@Test { » Test Bean « bean = ( » Test Bean « ) this . » bean Factory « . » get Bean « ( " » customised Test Bean « " ) ; » assert Test Bean « ( bean ) ; }
@Test { this . factory . » set Disable Html Escaping « ( true ) ; this . factory . » after Properties Set « ( ) ; Gson gson = this . factory . » get Object « ( ) ; » String Bean « bean = new » String Bean « ( ) ; bean . » set Name « ( " Bob = Bob " ) ; String result = gson . » to Json « ( bean ) ; » assert That « ( result ) . » is Equal To « ( " { \" name \" : \" Bob = Bob \" } " ) ; }
@Test { Locale locale = new Locale ( " nl " , " nl " ) ; this . builder . locale ( locale ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Locale « ( ) ) . » is Equal To « ( locale ) ; }
@Test { Method source = » method From « ( » With Single Interface « . class ) ; » assert That « ( scan ( source , » Search Strategy « . DIRECT ) ) . » contains Exactly « ( " 0 : » Test Annotation 1 « " ) ; }
@Test { » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " x - jackson - smile " ) ) ) . » is True « ( ) ; » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " json " ) ) ) . » is False « ( ) ; » assert That « ( converter . » can Write « ( » My Bean « . class , new » Media Type « ( " application " , " xml " ) ) ) . » is False « ( ) ; }
@Test { long length = 42L ; headers . » set Content Length « ( length ) ; » assert That « ( headers . » get Content Length « ( ) ) . as ( " Invalid Content - Length header " ) . » is Equal To « ( length ) ; » assert That « ( headers . » get First « ( " Content - Length " ) ) . as ( " Invalid Content - Length header " ) . » is Equal To « ( " 42 " ) ; }
@Test { » SQL Exception « » sql Exception « = new » SQL Exception « ( " Syntax error or access violation exception " , " 42000 " ) ; given ( » callable Statement « . execute ( ) ) . » will Throw « ( » sql Exception « ) ; given ( connection . » prepare Call « ( " { call " + » No Such Stored Procedure « . SQL + " ( ) } " ) ) . » will Return « ( » callable Statement « ) ; » No Such Stored Procedure « sproc = new » No Such Stored Procedure « ( » data Source « ) ; » assert That Exception Of Type « ( » Bad Sql Grammar Exception « . class ) . » is Thrown By « ( sproc :: execute ) ; }
@Test { » Script Engine « engine = mock ( » Invocable Script Engine « . class ) ; this . view . » set Engine Supplier « ( ( ) -> engine ) ; this . view . » set Engine « ( engine ) ; this . view . » set Render Function « ( " render " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . view . » set Application Context « ( this . context ) ) . » with Message Containing « ( " You should define either 'engine' , 'engineSupplier' or 'engineName' . " ) ; }
@Test { filter . » set Before Message Suffix « ( " } " ) ; filter . » set After Message Suffix « ( " ) " ) ; » apply Filter « ( ) ; » assert That « ( filter . » before Request Message « ) . » ends With « ( " } " ) ; » assert That « ( filter . » after Request Message « ) . » ends With « ( " ) " ) ; }
@Test { this . writer . » start Tag « ( " textarea " ) ; this . writer . » write Attribute « ( " width " , " 10 " ) ; this . writer . » write Attribute « ( " height " , " 20 " ) ; this . writer . » append Value « ( " foobar " ) ; this . writer . » end Tag « ( ) ; » assert That « ( this . data . » to String « ( ) ) . » is Equal To « ( " < textarea width = \" 10 \" height = \" 20 \" > foobar < / textarea > " ) ; }
@Test { » Field Retrieving Factory Bean « fr = new » Field Retrieving Factory Bean « ( ) ; fr . » set Static Field « ( " java . sql . Connection . » TRANSACTION _ SERIALIZABLE « " ) ; fr . » after Properties Set « ( ) ; » assert That « ( fr . » get Object « ( ) ) . » is Equal To « ( new Integer ( Connection . » TRANSACTION _ SERIALIZABLE « ) ) ; }
@Test { Cache target = new » Concurrent Map Cache « ( " » test Cache « " ) ; Cache cache = new » Transaction Aware Cache Decorator « ( target ) ; Object key = new Object ( ) ; » tx Template « . » execute Without Result « ( s -> { cache . put ( key , " 123 " ) ; » assert That « ( target . get ( key ) ) . » is Null « ( ) ; } ) ; » assert That « ( target . get ( key , String . class ) ) . » is Equal To « ( " 123 " ) ; }
@Test { request . » add Header « ( » Http Headers « . » IF _ MODIFIED _ SINCE « , " Tue Jul 21 10 : 00 : 00 2015 " ) ; » assert That « ( request . » get Date Header « ( » Http Headers « . » IF _ MODIFIED _ SINCE « ) ) . » is Equal To « ( 1437472800000L ) ; }
@Test { this . view . » set Engine « ( mock ( » Script Engine « . class ) ) ; this . view . » set Render Function « ( " render " ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . view . » set Application Context « ( this . wac ) ) ; }
@Test { » path Matcher « . » set Cache Patterns « ( false ) ; match ( ) ; » assert That « ( » path Matcher « . » string Matcher Cache « . » is Empty « ( ) ) . » is True « ( ) ; }
@Test { » assert That « ( » Data Size « . » of Terabytes « ( 1 ) . » to Gigabytes « ( ) ) . » is Equal To « ( 1024 ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » FACTORY _ CIRCLE _ CONTEXT « ) ; » Test Bean « tb = ( » Test Bean « ) xbf . » get Bean « ( " » singleton Factory « " ) ; » Dummy Factory « db = ( » Dummy Factory « ) xbf . » get Bean « ( " & » singleton Factory « " ) ; » assert That « ( tb == db . » get Other Test Bean « ( ) ) . » is True « ( ) ; }
@Test { String [ ] sa = » String Utils « . » delimited List To String Array « ( " a , b " , " , " ) ; » assert That « ( sa . length ) . » is Equal To « ( 2 ) ; » assert That « ( sa [ 0 ] ) . » is Equal To « ( " a " ) ; » assert That « ( sa [ 1 ] ) . » is Equal To « ( " b " ) ; }
@Test { given ( adaptee . » is Done « ( ) ) . » will Return « ( true ) ; boolean result = adapter . » is Done « ( ) ; » assert That « ( result ) . » is True « ( ) ; }
@Test { this . request . » set URI « ( new URI ( " http : » // www . foo . example / bar « " ) ) ; » Mock Rest Request Matchers « . » request To « ( » contains String « ( " bar " ) ) . match ( this . request ) ; }
@Test { » do Test Rollback On Exception « ( new Exception ( ) , true , false ) ; }
@Test { » Test Task « task = new » Test Task « ( 1 ) ; Future < ? > future = executor . submit ( task ) ; Object result = future . get ( 1000 , » Time Unit « . MILLISECONDS ) ; » assert That « ( result ) . » is Null « ( ) ; » assert Thread Name Prefix « ( task ) ; }
@Test { » Local Interface With Business Methods « ejb = mock ( » Local Interface With Business Methods « . class ) ; String » jndi Name « = " foobar " ; Context » mock Context « = » mock Context « ( » jndi Name « , ejb ) ; » configured Interceptor « ( » mock Context « , » jndi Name « ) ; verify ( » mock Context « ) . close ( ) ; }
@Test { » assert That « ( » get Tagged « ( » With Static Method « . class ) . » is Overridable « ( ) ) . » is False « ( ) ; » assert That « ( » get Tagged « ( » With Final Method « . class ) . » is Overridable « ( ) ) . » is False « ( ) ; » assert That « ( » get Tagged « ( » With Private Method « . class ) . » is Overridable « ( ) ) . » is False « ( ) ; }
@Test { » Dependencies Bean « » existing Bean « = new » Dependencies Bean « ( ) ; » assert That Exception Of Type « ( » Unsatisfied Dependency Exception « . class ) . » is Thrown By « ( ( ) -> lbf . » autowire Bean Properties « ( » existing Bean « , » Autowire Capable Bean Factory « . » AUTOWIRE _ BY _ TYPE « , true ) ) ; }
@Test { » Factory Test Bean « » test Bean « = » bean Factory « . » get Bean « ( " » factory Test Bean « " , » Factory Test Bean « . class ) ; » Object Factory « < ? > » object Factory « = » test Bean « . » get Object Factory « ( ) ; Date » date 1 « = ( Date ) » object Factory « . » get Object « ( ) ; Date » date 2 « = ( Date ) » object Factory « . » get Object « ( ) ; » assert That « ( » date 1 « != » date 2 « ) . » is True « ( ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » set Method « ( » Http Method « . OPTIONS . name ( ) ) ; request . » add Header « ( » Http Headers « . ORIGIN , " https : » // domain . com « " ) ; request . » add Header « ( » Http Headers « . » ACCESS _ CONTROL _ REQUEST _ METHOD « , " GET " ) ; » assert That « ( » Cors Utils « . » is Pre Flight Request « ( request ) ) . » is True « ( ) ; }
@Test { » setup Info Request « ( true ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) ; this . » sock Js Client « . » do Handshake « ( handler , URL ) ; verify ( this . » info Receiver « , times ( 1 ) ) . » execute Info Request « ( any ( ) , any ( ) ) ; }
@Test { this . request . » set Scheme « ( " https " ) ; this . request . » add Header « ( " X - Forwarded - Host " , " » something Different « " ) ; » adapt Request From Forwarded Headers « ( ) ; » Uri Components « » uri Components « = » from Controller « ( » Person Controller Impl « . class ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » starts With « ( " https : » // something Different « " ) ; }
@Test { » assert That « ( get ( » Test Class « . class ) . » is Annotated « ( » Direct Annotation 1 « . class . » get Name « ( ) ) ) . » is False « ( ) ; }
@Test { URI uri = new URI ( " wss : » // localhost / abc « " ) ; » Web Socket Session « session = this . » ws Client « . » do Handshake « ( this . » ws Handler « , this . headers , uri ) . get ( ) ; » assert That « ( session . » get Remote Address « ( ) ) . » is Not Null « ( ) ; » assert That « ( session . » get Remote Address « ( ) . » get Host Name « ( ) ) . » is Equal To « ( " localhost " ) ; » assert That « ( session . » get Local Address « ( ) . » get Port « ( ) ) . » is Equal To « ( 443 ) ; }
@Test { Throwable ex = new » Response Status Exception « ( » Http Status « . » INTERNAL _ SERVER _ ERROR « , " Oops " ) ; this . exchange . » get Response « ( ) . » set Status Code « ( » Http Status « . CREATED ) ; Mono < Void > mono = this . exchange . » get Response « ( ) . » set Complete « ( ) . then ( Mono . defer ( ( ) -> this . handler . handle ( this . exchange , ex ) ) ) ; » Step Verifier « . create ( mono ) . » consume Error With « ( actual -> » assert That « ( actual ) . » is Same As « ( ex ) ) . verify ( ) ; }
@Test { » assert Get Merged Annotation « ( » Transitive Implicit Aliases With Skipped Level Context Config Class « . class , " test . xml " ) ; }
@Test { » assert That « ( this . » tx Manager « . begun ) . » is Equal To « ( 0 ) ; new » Jta Annotation Private Annotated Member « ( ) . » do Something « ( ) ; » assert That « ( this . » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { Runnable » callback 1 « = mock ( Runnable . class ) ; Runnable » callback 2 « = mock ( Runnable . class ) ; this . » simp Attributes « . » register Destruction Callback « ( " » name 1 « " , » callback 1 « ) ; this . » simp Attributes « . » register Destruction Callback « ( " » name 2 « " , » callback 2 « ) ; » assert That « ( this . » simp Attributes « . » get Attribute Names « ( ) . length ) . » is Equal To « ( 2 ) ; }
@Test { List < » Context Configuration Attributes « > » attributes List « = » resolve Context Configuration Attributes « ( » Classes Bar « . class ) ; » assert That « ( » attributes List « ) . » is Not Null « ( ) ; » assert That « ( » attributes List « . size ( ) ) . » is Equal To « ( 2 ) ; » assert Classes Bar Attributes « ( » attributes List « . get ( 0 ) ) ; » assert Classes Foo Attributes « ( » attributes List « . get ( 1 ) ) ; }
@Test { » Message Listener Container « container = mock ( » Message Listener Container « . class ) ; » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; endpoint . » set Message Listener « ( new » Message Listener Adapter « ( ) ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> endpoint . » setup Listener Container « ( container ) ) ; }
@Test { » web Request « . » set Url « ( new URL ( " http : » // localhost : 80 / test / this / here « " ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Scheme « ( ) ) . » is Equal To « ( " http " ) ; }
@Test { map . » add If Absent « ( " key " , " » value 1 « " ) ; » assert That « ( map . get ( " key " ) ) . » contains Exactly « ( " » value 1 « " ) ; }
@Test { Object [ ] array = { " Han " , Long . » value Of « ( 43 ) } ; » assert That « ( » Object Utils « . » null Safe To String « ( array ) ) . » is Equal To « ( " { Han , 43 } " ) ; }
@Test { javax . jms . Message » jms Message « = new » Stub Text Message « ( ) { @ Override public long » get JMS Timestamp « ( ) throws » JMS Exception « { throw new » JMS Exception « ( " illegal property " ) ; } } ; » assert Attempt Read Disallowed Property Is Not Fatal « ( » jms Message « , » Jms Headers « . TIMESTAMP ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » get Bean Factory « ( ) . » get Bean « ( ( String ) null ) ) ; }
@Test { Integer max = ( Integer ) this . » bean Factory « . » get Bean « ( " java . lang . Integer . » MAX _ VALUE « " ) ; » assert That « ( max . » int Value « ( ) ) . » is Equal To « ( Integer . » MAX _ VALUE « ) ; }
@Test { request . » set Attribute « ( » WEBSPHERE _ URI _ ATTRIBUTE « , " / test / foo " ) ; » tomcat Default Servlet File « ( ) ; }
@Test { String location = " / foo " ; » send Redirect « ( location ) ; » In Order « » in Order « = Mockito . » in Order « ( this . response ) ; » in Order « . verify ( this . response ) . » set Status « ( » Http Status « . » SEE _ OTHER « . value ( ) ) ; » in Order « . verify ( this . response ) . » set Header « ( » Http Headers « . LOCATION , location ) ; }
@Test { String expression = " $ . » family Members « [ ? ( @ . name == 'Bart' ) ] " ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Expectations Helper « ( expression ) . » does Not Exist « ( SIMPSONS ) ) . » with Message Containing « ( " Expected no value at JSON path \" " + expression + " \" but found : [ { \" name \" : \" Bart \" } ] " ) ; }
@Test { » assert That « ( » this Class Loader « . » get Resources « ( » EXISTING _ RESOURCE « ) ) . » is Not Null « ( ) ; » overriding Loader « . override ( » EXISTING _ RESOURCE « , null ) ; » assert That « ( » count Elements « ( » overriding Loader « . » get Resources « ( » EXISTING _ RESOURCE « ) ) ) . » is Equal To « ( 0 ) ; }
@Test { Foo target = » get Ultimate Target Object « ( » cglib Proxy « ( foo ) ) ; » assert That « ( target ) . » is Same As « ( foo ) ; }
@Test { » Groovy Markup View « view = » create View With Url « ( " » i 18 n « . tpl " ) ; » assert That « ( view . » check Resource « ( Locale . FRENCH ) ) . » is True « ( ) ; }
@Test { » Mutable Property Sources « » property Sources « = new » Mutable Property Sources « ( ) ; » property Sources « . » add First « ( new » Mock Property Source « ( ) . » with Property « ( " key " , " value " ) ) ; » Property Resolver « resolver = new » Property Sources Property Resolver « ( » property Sources « ) ; » assert That « ( resolver . » resolve Required Placeholders « ( " Replace this $ { key } plus $ { unknown : » default Value « } " ) ) . » is Equal To « ( " Replace this value plus » default Value « " ) ; }
@Test { Number » expected Number « = 10.21f - 10.2f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.21f - 10.2f " ) ; Number result = expression . » get Value « ( context , null , Number . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Number « ) ; }
@Test { this . context . register ( » Conditional Then Unconditional « . class ) ; this . context . refresh ( ) ; » assert That « ( this . context . » contains Bean « ( " » bean Two « " ) ) . » is False « ( ) ; » assert That « ( this . context . » contains Bean « ( " » bean One « " ) ) . » is True « ( ) ; }
@Test { » do Test Existing Transaction With Participation « ( » Transaction Definition « . » PROPAGATION _ SUPPORTS « ) ; }
@Test { Map < String , Object > model = new » Hash Map « < > ( ) ; model . put ( " name " , " Spring " ) ; » Mock Http Servlet Response « response = » render View With Model « ( " test . tpl " , model , Locale . US ) ; » assert That « ( response . » get Content As String « ( ) ) . contains ( " < » h 1 « > Hello Spring < / » h 1 « > " ) ; }
@Test { » find Available Udp Ports « ( 4 ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Field « ( " counter " , » Sample Field Properties « . class ) ; String msg = matches . » build Error Message « ( ) ; » assert That « ( msg ) . contains ( " counter " ) ; » assert That « ( msg ) . contains ( " » counter 1 « " ) ; » assert That « ( msg ) . contains ( " » counter 2 « " ) ; » assert That « ( msg ) . contains ( " » counter 3 « " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Request Matchers « ( " / foo / bar " , null ) . » node Count « ( 1 ) . match ( this . request ) ) ; }
@Test { Mono < » Server Response « > result = » Server Response « . » unprocessable Entity « ( ) . build ( ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> » Http Status « . » UNPROCESSABLE _ ENTITY « . equals ( response . » status Code « ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » Yaml Properties Factory Bean « factory = new » Yaml Properties Factory Bean « ( ) ; factory . » set Resources « ( new » Byte Array Resource « ( " foo : bar \n cd \n spam : \n foo : baz " . » get Bytes « ( ) ) ) ; » assert That Exception Of Type « ( » Scanner Exception « . class ) . » is Thrown By « ( factory :: » get Object « ) . » with Message Containing « ( " line 3 , column 1 " ) ; }
@Test { » do Test Transaction Rollback Restoring Auto Commit « ( false , true , false ) ; }
@Test { » Map Sql Parameter Source « source = new » Map Sql Parameter Source « ( " FOO " , new » Sql Parameter Value « ( Integer . » MAX _ VALUE « , " Foo " ) ) ; » assert That « ( source . » to String « ( ) ) . » is Equal To « ( ( " » Map Sql Parameter Source « { FOO = Foo ( type : " + Integer . » MAX _ VALUE « + " ) } " ) ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( » get Servlet Context « ( ) , " GET " , " / locale . do " ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » complex Dispatcher Servlet « . service ( request , response ) ; » Complex Web Application Context « . » Test Application Listener « listener = ( » Complex Web Application Context « . » Test Application Listener « ) » complex Dispatcher Servlet « . » get Web Application Context « ( ) . » get Bean « ( " » test Listener « " ) ; » assert That « ( listener . counter ) . » is Equal To « ( 1 ) ; }
@Test { » Path Resource « resource = new » Path Resource « ( » TEST _ FILE « ) ; File file = new File ( » TEST _ FILE « ) ; » assert That « ( resource . » content Length « ( ) ) . » is Equal To « ( file . length ( ) ) ; }
@Test { List list = ( List ) this . » bean Factory « . » get Bean « ( " » simple List « " ) ; » assert That « ( list . get ( 0 ) ) . » is Equal To « ( " Rob Harrop " ) ; List » list 2 « = ( List ) this . » bean Factory « . » get Bean « ( " » simple List « " ) ; » assert That « ( list == » list 2 « ) . » is True « ( ) ; }
@Test { » multicast Event « ( false , » String Event Listener « . class , » create Generic Test Event « ( 123L ) , » Resolvable Type « . » for Class With Generics « ( » Generic Test Event « . class , Long . class ) ) ; }
@Test { Properties result = » conversion Service « . convert ( " a = b \n c = 2 \n d = " , Properties . class ) ; » assert That « ( result . size ( ) ) . » is Equal To « ( 3 ) ; » assert That « ( result . » get Property « ( " a " ) ) . » is Equal To « ( " b " ) ; » assert That « ( result . » get Property « ( " c " ) ) . » is Equal To « ( " 2 " ) ; » assert That « ( result . » get Property « ( " d " ) ) . » is Equal To « ( " " ) ; }
@Test { Throwable t = new Throwable ( ) ; » assert That Exception Of Type « ( Throwable . class ) . » is Thrown By « ( ( ) -> this . » test Bean « . exceptional ( t ) ) ; verify ( » mock Collaborator « ) . » no Args « ( ) ; verify ( » mock Collaborator « ) . » one Throwable « ( t ) ; verify ( » mock Collaborator « ) . » no Args On Throwable Match « ( ) ; }
@Test { » parse Check « ( " T ( String ) " ) ; }
@Test { » Protected Lifecycle Bean « bean = ( » Protected Lifecycle Bean « ) » get Bean Factory « ( ) . » get Bean « ( " » protected Lifecycle « " ) ; bean . » business Method « ( ) ; }
@Test { new » Xpath Request Matchers « ( " / foo / bar " , null ) . » node Count « ( 2 ) . match ( this . request ) ; }
@Test { » assert That « ( » get Cache « ( ) . » get Name « ( ) ) . » is Equal To « ( » CACHE _ NAME « ) ; }
@Test { Class < ? extends Throwable > » found Class « = » find Closest Match « ( » Same Depth Exception « . class , » Target Exception « . class ) ; » assert That « ( » found Class « ) . » is Equal To « ( » Target Exception « . class ) ; }
@Test { @ Configuration class Config { @ Bean Object foo ( ) { return null ; } } » assert That « ( » bean Def « ( Config . class ) . » is Lazy Init « ( ) ) . as ( " @ Bean methods should be non - lazy by default " ) . » is False « ( ) ; }
@Test { evaluate ( " 'xyz' instanceof T ( int ) " , " false " , Boolean . class ) ; }
@Test { » web Request « . » set Url « ( new URL ( " http : » // localhost : 80 / test / this / here « " ) ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Server Port « ( ) ) . » is Equal To « ( 80 ) ; }
@Test { Goo g = Goo . instance ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( g ) ; Expression expr = null ; expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " instance [ bar ] = 'world' " ) ; expr . » get Value « ( context , String . class ) ; » assert That « ( g . value ) . » is Equal To « ( " world " ) ; expr . » get Value « ( context , String . class ) ; » assert That « ( g . value ) . » is Equal To « ( " world " ) ; }
@Test { » M Bean Exporter « exporter = new » M Bean Exporter « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> exporter . » set Autodetect Mode Name « ( " \t " ) ) ; }
@Test { » assert That « ( view . » get Content Type « ( ) ) . as ( " Invalid content type " ) . » is Equal To « ( " application / xml " ) ; }
@Test { String » if None Match « = " * " ; headers . » set If None Match « ( » if None Match « ) ; » assert That « ( headers . » get If None Match « ( ) . get ( 0 ) ) . as ( " Invalid If - None - Match header " ) . » is Equal To « ( » if None Match « ) ; » assert That « ( headers . » get First « ( " If - None - Match " ) ) . as ( " Invalid If - None - Match header " ) . » is Equal To « ( " * " ) ; }
@Test { » Default Uri Builder Factory « factory = new » Default Uri Builder Factory « ( " https : » // foo . example / v 1 « ? » id = 123 « " ) ; URI uri = factory . » uri String « ( " / bar " ) . port ( 8080 ) . build ( ) ; » assert That « ( uri . » to String « ( ) ) . » is Equal To « ( " https : » // foo . example : 8080 / v 1 / bar « ? » id = 123 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » not Empty « ( new String [ ] { } , ( Supplier < String > ) null ) ) . » with Message « ( null ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Class « ( List . class , » Extends List « . class ) ; » assert That « ( type . » get Generic « ( 0 ) ) . » is Not Equal To « ( » Resolvable Type « . NONE ) ; » assert That « ( type . » get Generic « ( 1 ) ) . » is Equal To « ( » Resolvable Type « . NONE ) ; » assert That « ( type . » get Generic « ( 0 , 1 ) ) . » is Equal To « ( » Resolvable Type « . NONE ) ; }
@Test { » Message Mapping Message Handler « » messsage Handler « = » init Messsage Handler « ( ) ; » messsage Handler « . » handle Message « ( message ( " string " , " abcdef " ) ) . block ( Duration . » of Seconds « ( 5 ) ) ; » verify Output Content « ( Collections . » singleton List « ( " abcdef :: response " ) ) ; }
@Test { this . session . » handle Frame « ( » Sock Js Frame « . » open Frame « ( ) . » get Content « ( ) ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . session . close ( new » Close Status « ( 2999 , " reason " ) ) ) . » with Message Containing « ( " Invalid close status " ) ; }
@Test { » Trigger Task « » mock Trigger Task « = mock ( » Trigger Task « . class ) ; this . » task Registrar « . » set Trigger Tasks List « ( Collections . » singleton List « ( » mock Trigger Task « ) ) ; » assert That « ( this . » task Registrar « . » get Trigger Task List « ( ) ) . » contains Exactly « ( » mock Trigger Task « ) ; }
@Test { » assert That « ( » get Macro Output « ( " DEFAULTTHEME " ) ) . » is Equal To « ( " hi ! planet ! " ) ; }
@Test { given ( manager . » get Transaction « ( ) ) . » will Return « ( tx ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( tx ) . commit ( ) ; verify ( manager ) . flush ( ) ; verify ( manager ) . close ( ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " https : » // example . com / foo « ? » bar = « " ) . build ( ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " https : » // example . com / foo « ? » bar = « " ) ; » assert That « ( » uri Components « . » get Query Params « ( ) . get ( " bar " ) . get ( 0 ) ) . » is Equal To « ( " " ) ; }
@Test { Object [ ] values = » find Repeated Annotation Values « ( » Repeatable Containers « . of ( » Explicit Repeatable « . class , » Explicit Container « . class ) , » With Non Repeatable « . class , » Non Repeatable « . class ) ; » assert That « ( values ) . » is Null « ( ) ; }
@Test { Flux < String > result = requester . route ( " echo - channel " ) . data ( Flux . range ( 1 , 10 ) . map ( i -> " Hello " + i ) , String . class ) . » retrieve Flux « ( String . class ) ; » Step Verifier « . create ( result ) . » expect Next « ( " Hello 1 async " ) . » expect Next Count « ( 8 ) . » expect Next « ( " Hello 10 async " ) . » then Cancel « ( ) . verify ( Duration . » of Seconds « ( 5 ) ) ; }
@Test { » assert That « ( » Data Size « . parse ( " - 1 GB " ) ) . » is Equal To « ( » Data Size « . » of Megabytes « ( - 1024 ) ) ; }
@Test { this . resolver . » set Supported Locales « ( Collections . » singleton List « ( CANADA ) ) ; » assert That « ( this . resolver . » resolve Locale « ( request ( US , UK ) ) ) . » is Equal To « ( US ) ; }
@Test { Map < String , Object > map = new » Hash Map « < > ( ) ; map . put ( " » key 1 « " , " » val 1 « " ) ; map . put ( " » key 2 « " , new Integer ( 123 ) ) ; » Message Headers « headers = new » Message Headers « ( map ) ; Set < String > keys = headers . » key Set « ( ) ; » assert That « ( keys . contains ( " » key 1 « " ) ) . » is True « ( ) ; » assert That « ( keys . contains ( " » key 2 « " ) ) . » is True « ( ) ; }
@Test { » Web Connection Html Unit Driver « » other Driver « = new » Web Connection Html Unit Driver « ( ) ; this . driver = » Mock Mvc Html Unit Driver Builder « . » mock Mvc Setup « ( this . » mock Mvc « ) . » with Delegate « ( » other Driver « ) . build ( ) ; » assert Mock Mvc Used « ( " http : » // localhost / test « " ) ; if ( » Test Group « . PERFORMANCE . » is Active « ( ) ) { » assert Mock Mvc Not Used « ( " https : » // example . com / « " ) ; } }
@Test { » Root Bean Definition « » bean Definition « = new » Root Bean Definition « ( » Meta Component Scan Configuration With Attribute Overrides Class « . class . » get Name « ( ) ) ; » assert Support For Composed Annotation « ( » bean Definition « ) ; }
@Test { » Method Metadata « metadata = » get Tagged « ( » With Direct Annotation « . class ) ; » assert That « ( metadata . » get Annotations « ( ) . stream ( ) . filter ( » Merged Annotation « :: » is Directly Present « ) . map ( a -> a . » get Type « ( ) . » get Name « ( ) ) ) . » contains Exactly In Any Order « ( Tag . class . » get Name « ( ) , » Direct Annotation « . class . » get Name « ( ) ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » CONSTRUCTOR _ ARG _ CONTEXT « ) ; » Double Boolean Constructor Bean « bean = ( » Double Boolean Constructor Bean « ) xbf . » get Bean « ( " » bean With Double Boolean « " ) ; » assert That « ( bean . » boolean 1 « ) . » is Equal To « ( Boolean . TRUE ) ; » assert That « ( bean . » boolean 2 « ) . » is Equal To « ( Boolean . FALSE ) ; }
@Test { String » original Bean Name « = " » my Bean « " ; String » target Bean Name « = » Scoped Proxy Utils « . » get Target Bean Name « ( » original Bean Name « ) ; » assert That « ( » target Bean Name « ) . » is Not Equal To « ( » original Bean Name « ) . » ends With « ( » original Bean Name « ) ; » assert That « ( » Scoped Proxy Utils « . » is Scoped Target « ( » target Bean Name « ) ) . » is True « ( ) ; » assert That « ( » Scoped Proxy Utils « . » is Scoped Target « ( » original Bean Name « ) ) . » is False « ( ) ; }
@Test { » do Test Rmi Proxy Factory Bean With Business Interface And Exception And Refresh « ( » Stub Not Found Exception « . class , » Remote Connect Failure Exception « . class ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / » singleton Controller « " ) . » request Attr « ( » FROM _ MVC _ TEST _ MOCK « , » FROM _ MVC _ TEST _ MOCK « ) ) ; }
@Test { » Method Parameter « » principal Parameter « = new » Method Parameter « ( method , 3 ) ; » assert That « ( resolver . » supports Parameter « ( » principal Parameter « ) ) . as ( " Principal not supported " ) . » is True « ( ) ; Object result = resolver . » resolve Argument « ( » principal Parameter « , null , » web Request « , null ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Null « ( ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . » empty Array « " ) . » does Not Exist « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » get Ops « ( » Annotated Class « . class , " » invalid Cache Resolver And Cache Manager Set « " ) ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Field « ( Fields . class . » get Field « ( " » string List « " ) ) ; » Resolvable Type « narrow = » Resolvable Type « . » for Type « ( » Array List « . class , type ) ; » assert That « ( narrow . » get Generic « ( ) . resolve ( ) ) . » is Equal To « ( String . class ) ; }
@Test { Date now = new Date ( ) ; long period = 5 ; long » initial Delay « = 30 ; » Periodic Trigger « trigger = new » Periodic Trigger « ( period , » Time Unit « . SECONDS ) ; trigger . » set Initial Delay « ( » initial Delay « ) ; Date next = trigger . » next Execution Time « ( context ( null , null , null ) ) ; » assert Approximate Difference « ( now , next , » initial Delay « * 1000 ) ; }
@Test { » Default Listable Bean Factory « xbf = new » Default Listable Bean Factory « ( ) ; » assert That Exception Of Type « ( » Beans Exception « . class ) . » is Thrown By « ( ( ) -> new » Xml Bean Definition Reader « ( xbf ) . » load Bean Definitions « ( » TEST _ WITH _ DUP _ NAME _ IN _ ALIAS _ CONTEXT « ) ) . » with Message Containing « ( " Bean name 'foo' " ) ; }
@Test { » Test Bean « jen = ( » Test Bean « ) this . » bean Factory « . » get Bean « ( " jenny " ) ; » Test Bean « dave = ( » Test Bean « ) this . » bean Factory « . » get Bean « ( " david " ) ; » assert That « ( jen . » get Spouse « ( ) == dave ) . » is True « ( ) ; }
@Test { » assert Resolved Profiles « ( » Meta Locations Foo With Overrides « . class , " foo " ) ; }
@Test { » assert That « ( » is Annotated « ( » Non Annotated Class « . class , » TX _ NAME « ) ) . » is False « ( ) ; }
@Test { » Managed Map « map = new » Managed Map « ( ) ; map . » set Merge Enabled « ( true ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> map . merge ( " hello " ) ) ; }
@Test { this . » servlet Request « . » add Header « ( » Http Headers « . ORIGIN , " https : » // mydomain 1 . example « " ) ; List < String > allowed = Collections . » singleton List « ( " https : » // mydomain 1 . example « " ) ; » Origin Handshake Interceptor « interceptor = new » Origin Handshake Interceptor « ( allowed ) ; » assert That « ( interceptor . » before Handshake « ( request , response , » ws Handler « , attributes ) ) . » is True « ( ) ; » assert That « ( » Http Status « . FORBIDDEN . value ( ) ) . » is Not Equal To « ( ( long ) » servlet Response « . » get Status « ( ) ) ; }
@Test { this . tag . » set Method « ( " post " ) ; this . tag . » do Start Tag « ( ) ; this . tag . » do End Tag « ( ) ; this . tag . » do Finally « ( ) ; String output = » get Output « ( ) ; String » form Output « = » get Form Tag « ( output ) ; String » input Output « = » get Input Tag « ( output ) ; » assert Contains Attribute « ( » form Output « , " method " , " post " ) ; » assert That « ( » input Output « ) . » is Equal To « ( " " ) ; }
@Test { String payload = " < » my Bean « > < name > Foo < / name > < » my Bean « > " ; Message < ? > message = » Message Builder « . » with Payload « ( payload . » get Bytes « ( » Standard Charsets « . » UTF _ 8 « ) ) . build ( ) ; » assert That Exception Of Type « ( » Message Conversion Exception « . class ) . » is Thrown By « ( ( ) -> this . converter . » from Message « ( message , » My Bean « . class ) ) ; }
@Test { » assert That « ( » String Utils « . quote ( " » my String « " ) ) . » is Equal To « ( " 'myString' " ) ; » assert That « ( » String Utils « . quote ( " " ) ) . » is Equal To « ( " '' " ) ; » assert That « ( » String Utils « . quote ( null ) ) . » is Null « ( ) ; }
@Test { given ( » web Mvc Configurer « . » get Message Codes Resolver « ( ) ) . » will Return « ( new » Default Message Codes Resolver « ( ) ) ; » delegating Config « . » set Configurers « ( Collections . » singleton List « ( » web Mvc Configurer « ) ) ; » delegating Config « . » get Message Codes Resolver « ( ) ; verify ( » web Mvc Configurer « ) . » get Message Codes Resolver « ( ) ; }
@Test { Cache cache = » get Cache « ( » DEFAULT _ CACHE « ) ; Object key = » create Key « ( this . » key Item « ) ; Object value = new Object ( ) ; cache . put ( key , value ) ; service . » early Remove « ( this . » key Item « ) ; » assert That « ( cache . get ( key ) ) . » is Null « ( ) ; }
@Test { » assert That « ( » conversion Service « . convert ( " " , Character . class ) ) . » is Equal To « ( null ) ; }
@Test { for ( » Http Method « method : » Http Method « . values ( ) ) { this . request = new » Mock Http Servlet Request « ( " GET " , " " ) ; this . response = new » Mock Http Servlet Response « ( ) ; » test Resolve Path With Traversal « ( method ) ; } }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Result Matchers « ( " / foo / bar " , null ) . » does Not Exist « ( ) . match ( » get Stub Mvc Result « ( ) ) ) ; }
@Test { » assert That « ( this . converter . » can Write « ( Msg . class , null ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Protobuf Http Message Converter « . PROTOBUF ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Media Type « . » APPLICATION _ JSON « ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Write « ( Msg . class , » Media Type « . » TEXT _ PLAIN « ) ) . » is True « ( ) ; }
@Test { » Mock Http Output Message « » output Message « = new » Mock Http Output Message « ( ) ; this . converter . » set Prefix Json « ( true ) ; this . converter . » write Internal « ( " foo " , null , » output Message « ) ; » assert That « ( » output Message « . » get Body As String « ( » Standard Charsets « . » UTF _ 8 « ) ) . » is Equal To « ( " ) ] } ' , foo " ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » get Ops « ( » Annotated Class « . class , " » invalid Key And Key Generator Set « " ) ) ; }
@Test { » assert That Exception Of Type « ( » Bean Initialization Exception « . class ) . » is Thrown By « ( ( ) -> load ( » Cglib Proxy With Private Method « . class ) ) . » with Cause Instance Of « ( » Illegal State Exception « . class ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . resolver . » resolve Argument « ( this . resolvable . » annot Present « ( Headers . class ) . arg ( String . class ) , this . message ) ) ; }
@Test { String » session Id « = " session - id " ; » web Request « . » set Additional Header « ( " Cookie " , " JSESSIONID = " + » session Id « ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Requested Session Id « ( ) ) . » is Equal To « ( » session Id « ) ; }
@Test { » Test Transaction « . » flag For Rollback « ( ) ; }
@Test { String » attr Name « = " person " ; » Redirect Attributes Model Map « model = new » Redirect Attributes Model Map « ( ) ; model . » add Attribute « ( » attr Name « , new » Test Bean « ( " Fred " ) ) ; » assert That « ( model . get ( » attr Name « ) ) . as ( " » to String « ( ) should have been used " ) . » is Equal To « ( " Fred " ) ; }
@Test { String body = " < » My Bean « > < string > string < / string > < » unknown Property « > value < / » unknown Property « > < / » My Bean « > " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( " UTF - 8 " ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( new » Media Type « ( " application " , " xml " ) ) ; converter . read ( » My Bean « . class , » input Message « ) ; }
@Test { » assert That « ( interceptor . » get Count « ( ) ) . as ( " Count should be 0 " ) . » is Equal To « ( 0 ) ; » test Bean « . » get Spouses « ( ) ; » assert That « ( interceptor . » get Count « ( ) ) . as ( " Count should be 1 " ) . » is Equal To « ( 1 ) ; » test Bean « . » get Spouse « ( ) ; » assert That « ( interceptor . » get Count « ( ) ) . as ( " Count should be 1 " ) . » is Equal To « ( 1 ) ; }
@Test { String variant = " proper northern " ; String » locale String « = " en GB " + variant ; Locale locale = » String Utils « . » parse Locale String « ( » locale String « ) ; » assert That « ( locale . » get Variant « ( ) ) . as ( " Multi - valued variant portion of the Locale not extracted correctly . " ) . » is Equal To « ( variant ) ; }
@Test { byte [ ] content = " test " . » get Bytes « ( ) ; this . request . » get Body « ( ) . write ( content ) ; » Mock Rest Request Matchers « . content ( ) . bytes ( content ) . match ( this . request ) ; }
@Test { » assert Find All Merged Annotations Behavior « ( » Composed Plus Local Caches Class « . class ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Header « ( » Http Headers « . ORIGIN , " https : » // domain . com « " ) ; » assert That « ( » Cors Utils « . » is Cors Request « ( request ) ) . » is True « ( ) ; }
@Test { » assert Composed Annotation Mapping « ( » Request Method « . DELETE ) ; }
@Test { » Converter Factory « < ? , ? > » converter Factory « = new » Integer Converter Factory « ( ) ; » formatting Service « . » add Converter Factory « ( ( » Converter Factory « < ? , ? > ) new » Proxy Factory « ( » converter Factory « ) . » get Proxy « ( ) ) ; » assert That « ( » formatting Service « . convert ( " 1 " , Integer . class ) ) . » is Equal To « ( Integer . » value Of « ( 1 ) ) ; }
@Test { » Advised Support « as = new » Advised Support « ( ) ; as . » set Opaque « ( true ) ; Class < ? > [ ] » completed Interfaces « = » Aop Proxy Utils « . » complete Proxied Interfaces « ( as ) ; » assert That « ( » completed Interfaces « . length ) . » is Equal To « ( 1 ) ; }
@Test { load ( » Before Commit Test Listener « . class , » After Completion Test Listener « . class ) ; » get Context « ( ) . » get Bean « ( » Test Bean « . class ) . supports ( ) ; » get Event Collector « ( ) . » assert Total Events Count « ( 0 ) ; }
@Test { » Annotated Element Key « first = new » Annotated Element Key « ( this . method , » get Class « ( ) ) ; » Annotated Element Key « second = new » Annotated Element Key « ( this . method , » get Class « ( ) ) ; » assert Key Equals « ( first , second ) ; }
@Test { » connect And Run Test « ( " echo - channel " ) ; }
@Test { this . request . » set Method « ( » Http Method « . OPTIONS . name ( ) ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » Model And View « mav = this . controller . » handle Request « ( this . request , response ) ; » assert That « ( mav ) . » is Null « ( ) ; » assert That « ( response . » get Header « ( " Allow " ) ) . » is Equal To « ( " GET , HEAD , OPTIONS " ) ; }
@Test { » Test Bean « tb = ( » Test Bean « ) » bean Factory « . » get Bean « ( " » cglib 1 « " ) ; » cglib Assertions « ( tb ) ; » assert That « ( tb . » get Name « ( ) ) . » is Equal To « ( " » cglib 1 « " ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ NESTED « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ALWAYS « ) ; }
@Test { Flux < » Data Buffer « > input = » string Buffer « ( " [ 1E+2 ] " ) . flux ( ) ; » test Decode « ( input , » Big Decimal « . class , step -> step . » expect Next « ( new » Big Decimal « ( " 1E+2 " ) ) . » verify Complete « ( ) ) ; }
@Test { Field field = Fields . class . » get Field « ( " » array Class Type « " ) ; » Resolvable Type « type = » Resolvable Type « . » for Field « ( field ) ; » assert That « ( type . » is Array « ( ) ) . » is Equal To « ( true ) ; » assert That « ( type . » get Component Type « ( ) . » get Type « ( ) ) . » is Equal To « ( ( ( Class ) field . » get Generic Type « ( ) ) . » get Component Type « ( ) ) ; }
@Test { this . builder = new » Mock Http Servlet Request Builder « ( » Http Method « . GET , " / foo bar " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; » assert That « ( request . » get Request URI « ( ) ) . » is Equal To « ( " / foo % 20 bar " ) ; }
@Test { test ( " » after Test Class « " , » Failing After Test Class Test Case « . class , ( tcm , c , m ) -> tcm . » after Test Class « ( ) ) ; }
@Test { » Method Parameter « » servlet Response Parameter « = new » Method Parameter « ( method , 0 ) ; » assert That « ( resolver . » supports Parameter « ( » servlet Response Parameter « ) ) . as ( " » Servlet Response « not supported " ) . » is True « ( ) ; Object result = resolver . » resolve Argument « ( » servlet Response Parameter « , null , » web Request « , null ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Same As « ( » servlet Response « ) ; }
@Test { » Field Access Bean « rod = new » Field Access Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( rod , " person " ) ; binder . » set Auto Grow Nested Paths « ( false ) ; binder . » init Direct Field Access « ( ) ; » Mutable Property Values « pvs = new » Mutable Property Values « ( ) ; pvs . » add Property Value « ( new » Property Value « ( " spouse . name " , " Kerry " ) ) ; » assert That Exception Of Type « ( » Null Value In Nested Path Exception « . class ) . » is Thrown By « ( ( ) -> binder . bind ( pvs ) ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( Config . class ) ; » assert That « ( » is Tx Proxy « ( ctx . » get Bean « ( » Foo Repository « . class ) ) ) . » is False « ( ) ; }
@Test { » Http Range « range = » Http Range « . » create Byte Range « ( 9500 ) ; » assert That « ( range . » get Range Start « ( 10000 ) ) . » is Equal To « ( 9500 ) ; » assert That « ( range . » get Range End « ( 10000 ) ) . » is Equal To « ( 9999 ) ; }
@Test { » Bean Factory « bf = » get Bean Factory « ( ) ; » I Test Bean « test = ( » I Test Bean « ) bf . » get Bean « ( " test " ) ; » Method Counter « counter = ( » Method Counter « ) bf . » get Bean « ( " » counting Advice « " ) ; » assert That « ( counter . » get Calls « ( ) ) . » is Equal To « ( 0 ) ; test . » get Name « ( ) ; » assert That « ( counter . » get Calls « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Cache Control « cc = » Cache Control « . empty ( ) ; » assert That « ( cc . » get Header Value « ( ) ) . » is Null « ( ) ; }
@Test { » Default Listable Bean Factory « » bean Factory « = » create Factory « ( " » simple Constructor Namespace Handler Tests « . xml " ) ; String name = " simple " ; » Dummy Bean « » name Value « = » bean Factory « . » get Bean « ( name , » Dummy Bean « . class ) ; » assert That « ( » name Value « . » get Value « ( ) ) . » is Equal To « ( " simple " ) ; }
@Test { this . builder . param ( " foo " , " bar " , " baz " ) ; » Mock Http Servlet Request « request = this . builder . » build Request « ( this . » servlet Context « ) ; Map < String , String [ ] > » parameter Map « = request . » get Parameter Map « ( ) ; » assert That « ( » parameter Map « . get ( " foo " ) ) . » is Equal To « ( new String [ ] { " bar " , " baz " } ) ; }
@Test { String [ ] result = » conversion Service « . convert ( " 1 , 2 , 3 " , String [ ] . class ) ; » assert That « ( result . length ) . » is Equal To « ( 3 ) ; » assert That « ( result [ 0 ] ) . » is Equal To « ( " 1 " ) ; » assert That « ( result [ 1 ] ) . » is Equal To « ( " 2 " ) ; » assert That « ( result [ 2 ] ) . » is Equal To « ( " 3 " ) ; }
@Test { » Text Message « reply = » test Reply With Jackson « ( " » reply Jackson Message And Json View « " , " { \" name \" : \" Response \" } " ) ; verify ( reply ) . » set Object Property « ( " foo " , " bar " ) ; }
@Test { Comparator < String > c = new » Compound Comparator « < > ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> c . compare ( " foo " , " bar " ) ) ; }
@Test { » Mock Server Request « request = » Mock Server Request « . builder ( ) . » query Param « ( " foo " , " bar " ) . build ( ) ; » Request Predicate « predicate = » Request Predicates « . » query Param « ( " foo " , s -> s . equals ( " bar " ) ) ; » assert That « ( predicate . test ( request ) ) . » is True « ( ) ; predicate = » Request Predicates « . » query Param « ( " foo " , s -> s . equals ( " baz " ) ) ; » assert That « ( predicate . test ( request ) ) . » is False « ( ) ; }
@Test { » Connector Server Factory Bean « bean = new » Connector Server Factory Bean « ( ) ; bean . » set Service Url « ( this . » service Url « ) ; bean . » set Server « ( » get Server « ( ) ) ; bean . » after Properties Set « ( ) ; try { » check Server Connection « ( » get Server « ( ) ) ; } finally { bean . destroy ( ) ; } }
@Test { » assert Correct Setup And Close Context « ( " jdbc - initialize - endings - config . xml " , 2 , " » data Source « " ) ; }
@Test { Property property = new Property ( » get Class « ( ) , » get Class « ( ) . » get Method « ( " » get Test 4 « " ) , » get Class « ( ) . » get Method « ( " » set Test 4 « " , List . class ) ) ; » Type Descriptor « » t 1 « = » Type Descriptor « . nested ( property , 2 ) ; » assert That « ( » t 1 « . » get Type « ( ) ) . » is Equal To « ( String . class ) ; }
@Test { » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » set Content Type « ( " application / xml " ) ; » assert That « ( condition . » get Matching Condition « ( request ) ) . » is Null « ( ) ; }
@Test { » assert That Exception Of Type « ( » Annotation Configuration Exception « . class ) . » is Thrown By « ( ( ) -> » Merged Annotations « . from ( » Invalid Convention Based Composed Context Configuration Class « . class , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) . get ( » Context Configuration « . class ) ) ; }
@Test { javax . jms . Message » jms Message « = new » Stub Text Message « ( ) { @ Override public boolean » get JMS Redelivered « ( ) throws » JMS Exception « { throw new » JMS Exception « ( " illegal property " ) ; } } ; » assert Attempt Read Disallowed Property Is Not Fatal « ( » jms Message « , » Jms Headers « . REDELIVERED ) ; }
@Test { Map < String , » Media Type « > mappings = new » Hash Map « < > ( ) ; mappings . put ( " json " , » Media Type « . » APPLICATION _ JSON « ) ; mappings . put ( " » Js On « " , » Media Type « . » APPLICATION _ JSON « ) ; mappings . put ( " » j So N « " , » Media Type « . » APPLICATION _ JSON « ) ; » Mapping Media Type File Extension Resolver « resolver = new » Mapping Media Type File Extension Resolver « ( mappings ) ; » assert That « ( resolver . » get All File Extensions « ( ) ) . » contains Exactly « ( " json " ) ; }
@Test { » assert That « ( » Order Utils « . » get Order « ( » Order And Priority « . class , null ) ) . » is Equal To « ( Integer . » value Of « ( 50 ) ) ; » assert That « ( » Order Utils « . » get Order « ( » Order And Priority « . class , null ) ) . » is Equal To « ( Integer . » value Of « ( 50 ) ) ; }
@Test { » Concurrent Reference Hash Map « < Integer , String > map = new » Concurrent Reference Hash Map « < > ( 32 , 0.5f ) ; » assert That « ( map . » get Segments Size « ( ) ) . » is Equal To « ( 16 ) ; » assert That « ( map . » get Segment « ( 0 ) . » get Size « ( ) ) . » is Equal To « ( 2 ) ; » assert That « ( map . » get Load Factor « ( ) ) . » is Equal To « ( 0.5f ) ; }
@Test { Class < ? > [ ] » config Classes « = » context Loader « . » detect Default Configuration Classes « ( » Private Config Inner Class Test Case « . class ) ; » assert That « ( » config Classes « ) . » is Not Null « ( ) ; » assert That « ( » config Classes « . length ) . as ( " private annotated inner classes should NOT be considered . " ) . » is Equal To « ( 0 ) ; }
@Test { Type » list Type « = » get Class « ( ) . » get Method « ( " » list Method « " ) . » get Generic Return Type « ( ) ; » Parameterized Type Reference « < List < String > > » type Reference « = » Parameterized Type Reference « . » for Type « ( » list Type « ) ; » assert That « ( » type Reference « . » get Type « ( ) ) . » is Equal To « ( » list Type « ) ; }
@Test { » assert Injected Servlet Request Equals Request In Request Context Holder « ( ) ; }
@Test { » Redirect View « rv = new » Redirect View « ( ) ; rv . » set Url « ( " https : » // url . somewhere . com « " ) ; rv . » set Http 10 Compatible « ( false ) ; rv . render ( new » Hash Map « < > ( ) , request , response ) ; » assert That « ( response . » get Status « ( ) ) . » is Equal To « ( 303 ) ; » assert That « ( response . » get Header « ( " Location " ) ) . » is Equal To « ( " https : » // url . somewhere . com « " ) ; }
@Test { » assert Event « ( » After Test Execution Event « . class , listener :: » after Test Execution « ) ; }
@Test { evaluate ( " 1 between » list One Five « " , " true " , Boolean . class ) ; }
@Test { » assert Order « ( » Simple Controller Advice « . class , Ordered . » LOWEST _ PRECEDENCE « ) ; }
@Test { final String name = " default " ; » Request Dispatcher « » named Dispatcher « = » servlet Context « . » get Named Dispatcher « ( name ) ; » assert That « ( » named Dispatcher « ) . » is Not Null « ( ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » named Dispatcher « . forward ( new » Mock Http Servlet Request « ( » servlet Context « ) , response ) ; » assert That « ( response . » get Forwarded Url « ( ) ) . » is Equal To « ( name ) ; }
@Test { this . » servlet Request « . » set Content « ( new byte [ 0 ] ) ; this . » servlet Request « . » set Content Type « ( " text / plain " ) ; List < » Http Message Converter « < ? > > converters = new » Array List « < > ( ) ; converters . add ( new » String Http Message Converter « ( ) ) ; » Request Response Body Method Processor « processor = new » Request Response Body Method Processor « ( converters ) ; » assert That Exception Of Type « ( » Http Message Not Readable Exception « . class ) . » is Thrown By « ( ( ) -> processor . » resolve Argument « ( » param String « , container , request , factory ) ) ; }
@Test { this . factory . » set Locale « ( Locale . FRENCH ) ; this . factory . » after Properties Set « ( ) ; » assert That « ( this . factory . » get Object « ( ) . » get Serialization Config « ( ) . » get Locale « ( ) ) . » is Equal To « ( Locale . FRENCH ) ; » assert That « ( this . factory . » get Object « ( ) . » get Deserialization Config « ( ) . » get Locale « ( ) ) . » is Equal To « ( Locale . FRENCH ) ; }
@Test { this . registry . » add View Controller « ( " / path " ) ; » Parameterizable View Controller « controller = » get Controller « ( " / path " ) ; » assert That « ( controller . » get View Name « ( ) ) . » is Null « ( ) ; » assert That « ( controller . » get Status Code « ( ) ) . » is Null « ( ) ; » assert That « ( controller . » is Status Only « ( ) ) . » is False « ( ) ; » assert That « ( controller . » get Application Context « ( ) ) . » is Not Null « ( ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( » Condition On Method Configuration « . class ) ; ctx . refresh ( ) ; » assert That « ( ctx . » contains Bean « ( " » bean 1 « " ) ) . » is False « ( ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . resolvable . annot ( » header Plain « ( ) ) . arg ( ) ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . resolvable . » annot Not Present « ( Header . class ) . arg ( ) ) ) . » is False « ( ) ; }
@Test { » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( » actual Request « . » get Protocol « ( ) ) . » is Equal To « ( " HTTP / 1.1 " ) ; }
@Test { » Performance Monitor Interceptor « interceptor = new » Performance Monitor Interceptor « ( ) ; » assert That « ( interceptor . » get Prefix « ( ) ) . » is Not Null « ( ) ; » assert That « ( interceptor . » get Suffix « ( ) ) . » is Not Null « ( ) ; interceptor . » set Prefix « ( null ) ; interceptor . » set Suffix « ( null ) ; » assert That « ( interceptor . » get Prefix « ( ) ) . » is Not Null « ( ) ; » assert That « ( interceptor . » get Suffix « ( ) ) . » is Not Null « ( ) ; }
@Test { » Generic Test Event « < String > » string Event « = » create Generic Test Event « ( " test " ) ; » Resolvable Type « » event Type « = » Resolvable Type « . » for Type « ( » string Event « . » get Class « ( ) ) ; » supports Event Type « ( true , » Generic Event Listener « . class , » event Type « ) ; }
@Test { Component component = » Web Controller « . class . » get Annotation « ( Component . class ) ; » assert That « ( component ) . » is Not Null « ( ) ; » Annotation Attributes « attributes = ( » Annotation Attributes « ) » get Annotation Attributes « ( component ) ; » assert That « ( attributes ) . » is Not Null « ( ) ; » assert That « ( attributes . » get String « ( VALUE ) ) . as ( " value attribute : " ) . » is Equal To « ( " » web Controller « " ) ; » assert That « ( attributes . » annotation Type « ( ) ) . » is Equal To « ( Component . class ) ; }
@Test { » Class Path Xml Application Context « context = » load Context « ( " » aspectj Type Filter Tests « . xml " ) ; » assert That « ( context . » contains Bean « ( " » foo Service Impl « " ) ) . » is True « ( ) ; » assert That « ( context . » contains Bean « ( " » stub Foo Dao « " ) ) . » is True « ( ) ; » assert That « ( context . » contains Bean « ( " » scoped Proxy Test Bean « " ) ) . » is False « ( ) ; context . close ( ) ; }
@Test { » do Test Jms Invoker Proxy Factory Bean And Service Exporter « ( false ) ; }
@Test { given ( manager . » is Open « ( ) ) . » will Return « ( true ) ; tt . » set Propagation Behavior « ( » Transaction Definition « . » PROPAGATION _ SUPPORTS « ) ; tt . execute ( status -> { bean . » extended Entity Manager Unsynchronized « . » join Transaction « ( ) ; bean . » extended Entity Manager Unsynchronized « . flush ( ) ; return null ; } ) ; verify ( manager ) . flush ( ) ; }
@Test { Constructor < ? > constructor = Constructors . class . » get Constructor « ( Map . class ) ; » Resolvable Type « type = » Resolvable Type « . » for Constructor Parameter « ( constructor , 0 , » Typed Constructors « . class ) ; » assert That « ( type . resolve ( ) ) . » is Equal To « ( Map . class ) ; » assert That « ( type . » resolve Generic « ( 0 ) ) . » is Equal To « ( String . class ) ; }
@Test { evaluate ( " 'Hello World' " , " Hello World " , String . class ) ; }
@Test { URI uri = new URI ( » base Url « + " / status / notfound " ) ; » Async Client Http Request « request = this . factory . » create Async Request « ( uri , » Http Method « . GET ) ; Future < » Client Http Response « > » future Response « = request . » execute Async « ( ) ; » future Response « . cancel ( true ) ; » assert That « ( » future Response « . » is Cancelled « ( ) ) . » is True « ( ) ; }
@Test { » Component Definition « component = this . » event Listener « . » get Component Definition « ( " » tx Advice « " ) ; » assert That « ( component ) . » is Instance Of « ( » Bean Component Definition « . class ) ; }
@Test { evaluate ( " » map Of Numbers Up To Ten « . ^ [ key > 5 ] . size ( ) " , " 1 " , Integer . class ) ; }
@Test { new » Annotation Config Application Context « ( » Pooling Target Source Config « . class ) ; }
@Test { » Mock Servlet Context « sc = new » Mock Servlet Context « ( ) ; Resource resource = new » Servlet Context Resource « ( sc , " dir / " ) ; Resource relative = resource . » create Relative « ( " subdir " ) ; » assert That « ( relative ) . » is Equal To « ( new » Servlet Context Resource « ( sc , " dir / subdir " ) ) ; }
@Test { » do Test Invokes Method On Ejb Instance « ( false , true ) ; }
@Test { Foo target = » get Target Object « ( » jdk Proxy « ( » jdk Proxy « ( foo ) ) ) ; » assert That « ( target ) . » is Not Same As « ( foo ) ; }
@Test { » Managed List « parent = new » Managed List « ( ) ; parent . add ( " one " ) ; parent . add ( " two " ) ; » Managed List « child = new » Managed List « ( ) ; child . » set Merge Enabled « ( true ) ; List » merged List « = child . merge ( parent ) ; » assert That « ( » merged List « . size ( ) ) . as ( " merge ( ) obviously did not work . " ) . » is Equal To « ( 2 ) ; }
@Test { » assert That « ( Conventions . » attribute Name To Property Name « ( " transaction - manager " ) ) . » is Equal To « ( " » transaction Manager « " ) ; » assert That « ( Conventions . » attribute Name To Property Name « ( " pointcut - ref " ) ) . » is Equal To « ( " » pointcut Ref « " ) ; » assert That « ( Conventions . » attribute Name To Property Name « ( " lookup - on - startup " ) ) . » is Equal To « ( " » lookup On Startup « " ) ; }
@Test { » assert That « ( processor . » supports Parameter « ( » param Request Body String « ) ) . as ( " » Request Body « parameter not supported " ) . » is True « ( ) ; » assert That « ( processor . » supports Parameter « ( » param Int « ) ) . as ( " non - » Request Body « parameter supported " ) . » is False « ( ) ; }
@Test { Method method = » Web Controller « . class . » get Method « ( " » handle Mapped With Path Attribute « " ) ; » Merged Annotation « < ? > annotation = » Merged Annotations « . from ( method ) . get ( » Request Mapping « . class ) ; » assert That « ( annotation . » get String « ( " name " ) ) . » is Equal To « ( " bar " ) ; » assert That « ( annotation . » get String Array « ( " value " ) ) . » contains Exactly « ( " / test " ) ; » assert That « ( annotation . » get String Array « ( " path " ) ) . » contains Exactly « ( " / test " ) ; }
@Test { connect ( ) ; » Illegal State Exception « » handshake Failure « = new » Illegal State Exception « ( " simulated exception " ) ; this . » handshake Future « . » set Exception « ( » handshake Failure « ) ; verify ( this . » stomp Session « ) . » after Connect Failure « ( same ( » handshake Failure « ) ) ; }
@Test { String expression = " $ . whitespace " ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Expectations Helper « ( expression ) . » assert Value Is Empty « ( CONTENT ) ) . » with Message Containing « ( " Expected an empty value at JSON path \" " + expression + " \" but found : ' ' " ) ; }
@Test { session . invalidate ( ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( session :: » is New « ) ; }
@Test { » assert Parameter Names « ( » get Method « ( " » no Args « " ) , " execution ( * * ( . . ) ) " , new String [ 0 ] ) ; }
@Test { » assert That « ( new » Script Factory Post Processor « ( ) . » post Process Before Instantiation « ( » get Class « ( ) , " a . bean " ) ) . » is Null « ( ) ; }
@Test { » Merged Annotation « < Nested > nested = » Merged Annotation « . of ( Nested . class ) ; » Merged Annotation « < ? > annotation = » Type Mapped Annotation « . of ( null , null , » Nested Container « . class , Collections . » singleton Map « ( " value " , nested ) ) ; » assert That « ( annotation . » get Annotation « ( " value " , Nested . class ) ) . » is Same As « ( nested ) ; }
@Test { » Sock Js Frame « frame = » Sock Js Frame « . » heartbeat Frame « ( ) ; » assert That « ( frame . » get Content « ( ) ) . » is Equal To « ( " h " ) ; » assert That « ( frame . » get Type « ( ) ) . » is Equal To « ( » Sock Js Frame Type « . HEARTBEAT ) ; » assert That « ( frame . » get Frame Data « ( ) ) . » is Null « ( ) ; }
@Test { @ » Suppress Warnings « ( " unused " ) class C { public C » set Foo « ( String s ) { return this ; } } » assert That « ( factory . » get Bean Info « ( C . class ) ) . » is Not Null « ( ) ; }
@Test { » do Test With Element Factory « ( new » Auto Populating List « < Object > ( new » Linked List « < > ( ) , new » Mock Element Factory « ( ) ) ) ; }
@Test { » Web Connection « conn = this . builder . » create Connection « ( this . client ) ; » assert Mock Mvc Used « ( conn , " http : » // localhost / « " ) ; » assert Mock Mvc Not Used « ( conn , " https : » // example . com / « " ) ; }
@Test { » exception Resolver « . » set Default Error View « ( " default - view " ) ; » exception Resolver « . » set Exception Attribute « ( null ) ; » Model And View « mav = » exception Resolver « . » resolve Exception « ( request , response , » handler 1 « , » generic Exception « ) ; » assert That « ( mav . » get View Name « ( ) ) . » is Equal To « ( " default - view " ) ; » assert That « ( mav . » get Model « ( ) . get ( » Simple Mapping Exception Resolver « . » DEFAULT _ EXCEPTION _ ATTRIBUTE « ) ) . » is Null « ( ) ; }
@Test { » Test Bean « » test Bean « = new » Test Bean « ( ) ; » Data Binder « binder = new » Data Binder « ( » test Bean « , " » test Bean « " ) ; binder . » set Message Codes Resolver « ( new » Default Message Codes Resolver « ( ) ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> binder . » set Message Codes Resolver « ( new » Default Message Codes Resolver « ( ) ) ) . » with Message Containing « ( " » Data Binder « is already initialized with » Message Codes Resolver « " ) ; }
@Test { » assert Bogus Active Test Group Behavior « ( " all - bogus " ) ; }
@Test { Method method = » Reflection Utils « . » find Method « ( » Simple Service « . class , " » no Cache Resolved « " , Object . class ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . » simple Service « . » no Cache Resolved « ( new Object ( ) ) ) . » with Message Containing « ( method . » to String « ( ) ) ; }
@Test { » Application Context « context = new » Class Path Xml Application Context « ( CONFIG ) ; » I Test Bean « » test Bean « = ( » I Test Bean « ) context . » get Bean « ( " » test Bean « " ) ; » assert That « ( » test Bean « . » is Initialized « ( ) ) . » is True « ( ) ; }
@Test { » assert That « ( » Annotation Aware Order Comparator « . INSTANCE ) . » is Instance Of « ( » Annotation Aware Order Comparator « . class ) ; }
@Test { » Method Parameter « param = this . resolvable . » annot Present « ( Headers . class ) . arg ( Map . class , String . class , Object . class ) ; Object resolved = this . resolver . » resolve Argument « ( param , this . message ) ; boolean condition = resolved instanceof Map ; » assert That « ( condition ) . » is True « ( ) ; @ » Suppress Warnings « ( " unchecked " ) Map < String , Object > headers = ( Map < String , Object > ) resolved ; » assert That « ( headers . get ( " foo " ) ) . » is Equal To « ( " bar " ) ; }
@Test { » do Test Invokes Method On Ejb Instance With Connect Exception With Refresh « ( false , true ) ; }
@Test { » assert That « ( » Standard J Unit 4 Features Tests « . » static Before Counter « > 0 ) . » is True « ( ) ; }
@Test { » Annotation Config Web Application Context « context = new » Annotation Config Web Application Context « ( ) ; context . » set Servlet Context « ( new » Mock Servlet Context « ( ) ) ; context . register ( » Handler Mapping Configuration « . class ) ; context . refresh ( ) ; » Resource Url Provider « » url Provider Bean « = context . » get Bean « ( » Resource Url Provider « . class ) ; » assert That « ( » url Provider Bean « . » get Handler Map « ( ) ) . » contains Key « ( " » / resources / « * * " ) ; » assert That « ( » url Provider Bean « . » is Autodetect « ( ) ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Tag Utils « . » has Ancestor Of Type « ( new » Tag Support « ( ) , String . class ) ) ; }
@Test { » Mutable Property Sources « » property Sources « = new » Mutable Property Sources « ( ) ; » property Sources « . » add First « ( new » Mock Property Source « ( ) . » with Property « ( " key " , " value " ) ) ; » Property Resolver « resolver = new » Property Sources Property Resolver « ( » property Sources « ) ; » assert That « ( resolver . » resolve Required Placeholders « ( " Replace this $ { key } " ) ) . » is Equal To « ( " Replace this value " ) ; }
@Test { Method method = » Class Utils « . » get Static Method « ( » Inner Class « . class , " » arg Static Method « " , String . class ) ; method . invoke ( null , " test " ) ; » assert That « ( » Inner Class « . » arg Called « ) . as ( " argument method was not invoked . " ) . » is True « ( ) ; }
@Test { Consumer < » R Socket Strategies « . Builder > » strategies Configurer « = mock ( Consumer . class ) ; » R Socket Requester « . builder ( ) . » rsocket Factory « ( this . » rsocket Factory Configurer « ) . » rsocket Strategies « ( » strategies Configurer « ) . connect ( this . transport ) ; » verify No Interactions « ( this . transport ) ; » assert That « ( this . » rsocket Factory Configurer « . » rsocket Factory « ( ) ) . » is Null « ( ) ; }
@Test { evaluate ( " new String [ ] { 'a' , 'b' , 'c' , 'd' } [ 1 ] " , " b " , String . class ) ; » evaluate And Check Error « ( " new String [ ] { 'a' , 'b' , 'c' , 'd' } . size ( ) " , » Spel Message « . » METHOD _ NOT _ FOUND « , 30 , " size ( ) " , " java . lang . String [ ] " ) ; evaluate ( " new String [ ] { 'a' , 'b' , 'c' , 'd' } . length " , 4 , Integer . class ) ; }
@Test { String url = " » / test « # { » ' one « ' , » ' abc « ' } " ; » Redirect View « » redirect View « = new » Redirect View « ( url , true ) ; » redirect View « . » set Expand Uri Template Variables « ( false ) ; » redirect View « . » render Merged Output Model « ( new » Model Map « ( ) , this . request , this . response ) ; » assert That « ( this . response . » get Redirected Url « ( ) ) . » is Equal To « ( url ) ; }
@Test { Publisher < Integer > source = Flowable . » from Array « ( 1 , 2 , 3 ) ; Object target = » get Adapter « ( » Completable Future « . class ) . » from Publisher « ( source ) ; boolean condition = target instanceof » Completable Future « ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( ( ( » Completable Future « < Integer > ) target ) . get ( ) ) . » is Equal To « ( Integer . » value Of « ( 1 ) ) ; }
@Test { class » Test Pointcut « extends » Static Method Matcher Pointcut « { @ Override public boolean matches ( Method method , @ Nullable Class < ? > clazz ) { return method . » get Name « ( ) . equals ( " » hash Code « " ) ; } } Pointcut pc = new » Test Pointcut « ( ) ; » assert That « ( » Aop Utils « . » can Apply « ( pc , Object . class ) ) . » is True « ( ) ; }
@Test { Class < ? > clazz = » get Class « ( ) ; » BDD Mockito « . < Class < ? > > given ( » test Context « . » get Test Class « ( ) ) . » will Return « ( clazz ) ; » before Listener « . » before Test Class « ( » test Context « ) ; » after Listener « . » before Test Class « ( » test Context « ) ; » after Listener « . » after Test Class « ( » test Context « ) ; » before Listener « . » after Test Class « ( » test Context « ) ; verify ( » test Context « , times ( 0 ) ) . » mark Application Context Dirty « ( any ( » Hierarchy Mode « . class ) ) ; }
@Test { » Mock Entry « entry = new » Mock Entry « ( ) ; » Parse State « original = new » Parse State « ( ) ; original . push ( entry ) ; » Parse State « snapshot = original . snapshot ( ) ; original . push ( new » Mock Entry « ( ) ) ; » assert That « ( snapshot . peek ( ) ) . as ( " Snapshot should not have been modified . " ) . » is Equal To « ( entry ) ; }
@Test { List < Param > params = new » Linked List « < > ( ) ; Set < String > » used Params « = new » Hash Set « < > ( ) ; Param param = new Param ( ) ; param . » set Name « ( " name " ) ; param . » set Value « ( null ) ; params . add ( param ) ; String » query String « = tag . » create Query String « ( params , » used Params « , true ) ; » assert That « ( » query String « ) . » is Equal To « ( " ? name " ) ; }
@Test { new » Cron Sequence Generator « ( " * 6 - 6 * * * * " ) . next ( new Date ( 2012 , 6 , 1 , 9 , 0 ) ) ; }
@Test { » test Match « ( new » Request Methods Request Condition « ( HEAD ) , HEAD ) ; » test Match « ( new » Request Methods Request Condition « ( GET ) , GET ) ; » test No Match « ( new » Request Methods Request Condition « ( POST ) , HEAD ) ; }
@Test { » Int Stream « . » range Closed « ( 1 , 5 ) . » for Each « ( i -> » assert Next Id « ( ) ) ; }
@Test { evaluate ( " false " , Boolean . FALSE , Boolean . class ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> this . » mock Mvc « . perform ( get ( " / persons / 1 " ) ) . » and Expect « ( header ( ) . » long Value « ( " X - Rate - Limiting " , 1 ) ) ) ; }
@Test { » Web Content Interceptor « interceptor = new » Web Content Interceptor « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> interceptor . » set Path Matcher « ( null ) ) ; }
@Test { Resource [ ] resources = resolver . » get Resources « ( " classpath * : » reactor / util / annotation / « * » . class « " ) ; » assert Protocol And Filenames « ( resources , " jar " , » CLASSES _ IN _ REACTOR _ UTIL _ ANNOTATIONS « ) ; }
@Test { final » IO Exception « cause = new » IO Exception « ( " test exception " ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> { » Candidate Components Test Class Loader « » class Loader « = new » Candidate Components Test Class Loader « ( » get Class « ( ) . » get Class Loader « ( ) , cause ) ; » Candidate Components Index Loader « . » load Index « ( » class Loader « ) ; } ) . » with Message Containing « ( " Unable to load indexes " ) . » with Cause « ( cause ) ; }
@Test { handler . » handle Return Value « ( null , » return Param Model And View « , » mav Container « , » web Request « ) ; » assert That « ( » mav Container « . » is Request Handled « ( ) ) . » is True « ( ) ; }
@Test { » init Error Dispatch « ( ) ; this . filter . » do Filter « ( this . request , new » Mock Http Servlet Response « ( ) , this . » filter Chain « ) ; » assert That « ( this . filter . » did Filter « ) . » is False « ( ) ; » assert That « ( this . filter . » did Filter Nested Error Dispatch « ) . » is False « ( ) ; }
@Test { » Simple Jms Listener Endpoint « endpoint = new » Simple Jms Listener Endpoint « ( ) ; endpoint . » set Id « ( " some id " ) ; this . registrar . » register Endpoint « ( endpoint , null ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> this . registrar . » after Properties Set « ( ) ) . » with Message Containing « ( endpoint . » to String « ( ) ) ; }
@Test { » assert Before Test Method « ( » Before Transaction Declared Via Meta Annotation Test Case « . class ) ; }
@Test { for ( int i = 0 ; i < 1000 ; i ++ ) { » schedule Trigger Task « ( ) ; } }
@Test { evaluate ( " » _ name « " , " Nikola Tesla " , String . class ) ; evaluate ( " » _ name _ « " , " Nikola Tesla " , String . class ) ; }
@Test { » assert Environment Value « ( " » key 1 « " , " parent " ) ; » assert Environment Value « ( " » key 2 « " , " local " ) ; }
@Test { » Name Match Transaction Attribute Source « tas = new » Name Match Transaction Attribute Source « ( ) ; Properties attributes = new Properties ( ) ; attributes . put ( " * » ash Code « " , " » PROPAGATION _ REQUIRED « " ) ; tas . » set Properties « ( attributes ) ; » Transaction Attribute « ta = tas . » get Transaction Attribute « ( Object . class . » get Method « ( " » hash Code « " ) , null ) ; » assert That « ( ta ) . » is Not Null « ( ) ; » assert That « ( ta . » get Propagation Behavior « ( ) ) . » is Equal To « ( » Transaction Definition « . » PROPAGATION _ REQUIRED « ) ; }
@Test { Message < ? > message = new » Generic Message « < Object > ( " payload " ) ; this . template . » set Default Destination « ( " home " ) ; this . template . send ( message ) ; » assert That « ( this . template . destination ) . » is Equal To « ( " home " ) ; » assert That « ( this . template . message ) . » is Same As « ( message ) ; }
@Test { » assert That « ( this . session . » is Active « ( ) ) . » is False « ( ) ; this . session . » initialize Delegate Session « ( this . » web Socket Session « ) ; » assert That « ( this . session . » is Active « ( ) ) . » is True « ( ) ; this . » web Socket Session « . » set Open « ( false ) ; » assert That « ( this . session . » is Active « ( ) ) . » is False « ( ) ; }
@Test { rpc . » set Pattern « ( " java . lang . Object . * " ) ; » assert That « ( rpc . matches ( Object . class . » get Method « ( " » hash Code « " ) , String . class ) ) . » is True « ( ) ; » assert That « ( rpc . matches ( Object . class . » get Method « ( " wait " ) , String . class ) ) . » is True « ( ) ; }
@Test { » Method Parameter « param = » init Method Parameter « ( 1 ) ; Foo foo = new Foo ( ) ; given ( this . session . » get Attribute « ( " » special Foo « " ) ) . » will Return « ( foo ) ; Mono < Object > mono = this . resolver . » resolve Argument « ( param , new » Binding Context « ( ) , this . exchange ) ; » assert That « ( mono . block ( ) ) . » is Same As « ( foo ) ; }
@Test { this . view . » set Engine « ( mock ( » Script Engine « . class ) ) ; this . view . » set Application Context « ( this . context ) ; }
@Test { » Uri Template « template = new » Uri Template « ( " / hotels / { hotel } / bookings / { booking } " ) ; URI result = template . expand ( " 1 " , " 42 " ) ; » assert That « ( result ) . as ( " Invalid expanded template " ) . » is Equal To « ( new URI ( " / hotels / 1 / bookings / 42 " ) ) ; }
@Test { » Illegal State Exception « error = new » Illegal State Exception « ( " boo " ) ; » write With Error « ( Flux . error ( error ) ) ; }
@Test { javax . jms . Message » jms Message « = » create Jms Text Message « ( " my Payload " ) ; given ( this . » jms Template « . receive ( " » my Queue « " ) ) . » will Return « ( » jms Message « ) ; String payload = this . » messaging Template « . » receive And Convert « ( " » my Queue « " , String . class ) ; » assert That « ( payload ) . » is Equal To « ( " my Payload " ) ; verify ( this . » jms Template « ) . receive ( " » my Queue « " ) ; }
@Test { » Spel Expression « expr = new » Spel Expression Parser « ( ) . » parse Raw « ( " ( 3 + 2 ) * 2 " ) ; » assert That « ( expr . » get Value « ( ) ) . » is Equal To « ( 10 ) ; }
@Test { Map < String , String > map = new » Hash Map « < > ( ) ; map . put ( " » test Key « " , " 100 " ) ; » Nested Generic Collection Bean « gb = new » Nested Generic Collection Bean « ( ) ; » Bean Wrapper « bw = new » Bean Wrapper Impl « ( gb ) ; bw . » set Property Value « ( " » map Of Integer « " , map ) ; Object obj = gb . » get Map Of Integer « ( ) . get ( " » test Key « " ) ; boolean condition = obj instanceof Integer ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { evaluate ( " 3 >= 6 " , " false " , Boolean . class ) ; }
@Test { » assert That Exception Of Type « ( » Null Value In Nested Path Exception « . class ) . » is Thrown By « ( ( ) -> wrapper . » get Property Value « ( " » nested No Constructor « . prop " ) ) ; }
@Test { » Annotation Config Web Application Context « ctx = new » Annotation Config Web Application Context « ( ) ; ctx . » set Config Location « ( Config . class . » get Name « ( ) ) ; ctx . refresh ( ) ; » Test Bean « bean = ctx . » get Bean « ( » Test Bean « . class ) ; » assert That « ( bean ) . » is Not Null « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Mock Mvc Web Client Builder « . » mock Mvc Setup « ( null ) ) ; }
@Test { » assert That « ( » get Macro Output « ( " URLPARAMS " ) ) . » contains Exactly « ( " / springtest / aftercontext / bar ? spam = bucket " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Packages Annotation Filter « ( " " ) ) . » with Message « ( " Packages array must not have empty elements " ) ; }
@Test { factory . » set Target Bean Name « ( » BEAN _ NAME « ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> factory . » set Bean Factory « ( » bean Factory « ) ) ; }
@Test { » bean Factory « . » register Bean Definition « ( " config " , new » Root Bean Definition « ( » Config With Ordered Nested Classes « . class ) ) ; » Configuration Class Post Processor « pp = new » Configuration Class Post Processor « ( ) ; pp . » post Process Bean Factory « ( » bean Factory « ) ; Foo foo = » bean Factory « . » get Bean « ( Foo . class ) ; boolean condition = foo instanceof » Extended Foo « ; » assert That « ( condition ) . » is True « ( ) ; Bar bar = » bean Factory « . » get Bean « ( Bar . class ) ; » assert That « ( bar . foo ) . » is Same As « ( foo ) ; }
@Test { » Concurrent Map Cache « » serialize Cache « = » create Cache With Store By Value « ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » serialize Cache « . put ( » create Random Key « ( ) , this . cache ) ) . » with Message Containing « ( " Failed to serialize " ) . » with Message Containing « ( this . cache . » get Class « ( ) . » get Name « ( ) ) ; }
@Test { » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( " » annotation Driven Proxy Target Class Tests « . xml " , » get Class « ( ) ) ; » Transactional Service « service = context . » get Bean « ( " service " , » Transactional Service « . class ) ; service . » set Something « ( " » some Name « " ) ; service = ( » Transactional Service « ) » Serialization Test Utils « . » serialize And Deserialize « ( service ) ; service . » set Something « ( " » some Name « " ) ; }
@Test { » Deferred Result « < String > result = new » Deferred Result « < > ( ) ; » test Handle « ( result , » Deferred Result « . class , ( ) -> result . » set Result « ( " foo " ) , " foo " ) ; }
@Test { » test Single Component « ( » Specialized Repo « . class , Repo . class ) ; }
@Test { Exception ex = new » Http Media Type Not Acceptable Exception « ( " " ) ; » test Exception « ( ex ) ; }
@Test { Mono < » Data Buffer « > source = » string Buffer « ( » POJO _ ROOT « ) ; Mono < Object > output = this . decoder . » decode To Mono « ( source , » Resolvable Type « . » for Class « ( » Type Pojo « . class ) , null , Collections . » empty Map « ( ) ) ; » Step Verifier « . create ( output ) . » expect Next « ( new » Type Pojo « ( " foofoo " , " barbar " ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { List < Integer > sequence = Arrays . » as List « ( 1 , 2 , 3 ) ; Publisher < Integer > source = Flux . » from Iterable « ( sequence ) ; Object target = » get Adapter « ( io . reactivex . Flowable . class ) . » from Publisher « ( source ) ; boolean condition = target instanceof Flowable ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( ( ( Flowable < ? > ) target ) . » to List « ( ) . » blocking Get « ( ) ) . » is Equal To « ( sequence ) ; }
@Test { String sql = " SELECT AGE FROM CUSTMR WHERE ID < ? " ; given ( this . » result Set « . next ( ) ) . » will Return « ( false ) ; List < Map < String , Object > > li = this . template . » query For List « ( sql , new Object [ ] { 3 } ) ; » assert That « ( li . size ( ) ) . as ( " All rows returned " ) . » is Equal To « ( 0 ) ; verify ( this . » prepared Statement « ) . » set Object « ( 1 , 3 ) ; verify ( this . » result Set « ) . close ( ) ; verify ( this . » prepared Statement « ) . close ( ) ; }
@Test { String body = " Hello World " ; » Mock Http Input Message « » input Message « = new » Mock Http Input Message « ( body . » get Bytes « ( » Standard Charsets « . » UTF _ 8 « ) ) ; » input Message « . » get Headers « ( ) . » set Content Type « ( » TEXT _ PLAIN _ UTF _ 8 « ) ; String result = this . converter . read ( String . class , » input Message « ) ; » assert That « ( result ) . as ( " Invalid result " ) . » is Equal To « ( body ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Long « ( " value " ) ) ; }
@Test { Method method = » Transactional Service Impl « . class . » get Method « ( " » do It « " ) ; Set < Transactional > » all Merged Annotations « = » find All Merged Annotations « ( method , Transactional . class ) ; » assert That « ( » all Merged Annotations « . size ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Configurable Application Context « context = new » Annotation Config Application Context « ( » Enable Jms Default Container Factory Config « . class , » Jms Listener Repeatable Bean « . class ) ; » test Jms Listener Repeatable « ( context ) ; }
@Test { this . locations = Collections . » singleton List « ( new » Class Path Resource « ( " / META - INF / resources / webjars / " , » get Class « ( ) ) ) ; String file = " / foo / 2.3 / foo . txt " ; given ( this . chain . » resolve Url Path « ( file , this . locations ) ) . » will Return « ( file ) ; String actual = this . resolver . » resolve Url Path « ( file , this . locations , this . chain ) ; » assert That « ( actual ) . » is Equal To « ( file ) ; verify ( this . chain , times ( 1 ) ) . » resolve Url Path « ( file , this . locations ) ; }
@Test { » do Test New Transaction With Commit « ( » Transaction Definition « . » PROPAGATION _ REQUIRES _ NEW « , » Web Sphere Uow Transaction Manager « . » SYNCHRONIZATION _ ALWAYS « ) ; }
@Test { » Message Header Accessor « accessor = new » Message Header Accessor « ( ) ; » assert That « ( accessor . » to Map « ( ) . size ( ) ) . » is Equal To « ( 0 ) ; }
@Test { Boolean » expected Result « = 10.215f == 10.2109f ; » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « context = new » Standard Evaluation Context « ( ) ; Expression expression = parser . » parse Expression « ( " 10.215f == 10.2109f " ) ; Boolean result = expression . » get Value « ( context , null , Boolean . class ) ; » assert That « ( result ) . » is Equal To « ( » expected Result « ) ; }
@Test { » assert That « ( new » Class Path Resource « ( " / test . html " , » get Class « ( ) ) . » get Path « ( ) ) . » is Equal To « ( " / test . html " ) ; » assert That « ( ( ( » Class Path Resource « ) new » Class Path Resource « ( " " , » get Class « ( ) ) . » create Relative « ( " / test . html " ) ) . » get Path « ( ) ) . » is Equal To « ( " / test . html " ) ; }
@Test { » Test Object « src = new » Test Object « ( ) ; String dest = new String ( ) ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Reflection Utils « . » shallow Copy Field State « ( src , dest ) ) ; }
@Test { » Web Content Interceptor « interceptor = new » Web Content Interceptor « ( ) ; interceptor . » set Cache Seconds « ( - 1 ) ; interceptor . » pre Handle « ( request , response , null ) ; Iterable < String > » expires Headers « = response . » get Headers « ( " Expires " ) ; » assert That « ( » expires Headers « ) . » is Empty « ( ) ; Iterable < String > » cache Control Headers « = response . » get Headers « ( " Cache - Control " ) ; » assert That « ( » cache Control Headers « ) . » is Empty « ( ) ; }
@Test { » Bean Definition « » bean Definition « = this . » bean Factory « . » get Merged Bean Definition « ( " » with Referenced Environment « " ) ; » assert Property Value « ( » bean Definition « , " » jndi Environment « " , new » Runtime Bean Reference « ( " » my Environment « " ) ) ; » assert That « ( » bean Definition « . » get Property Values « ( ) . contains ( " » environment Ref « " ) ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> context . » bind Namespace Uri « ( null , » namespace Uri « ) ) ; }
@Test { String username = " foo " ; String password = " λ " ; » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> headers . » set Basic Auth « ( username , password ) ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Expectations Helper « ( " $ . abc " ) . » does Not Have Json Path « ( " { \" abc \" : null } " ) ) ; }
@Test { » assert That « ( » Object Utils « . » null Safe Hash Code « ( ( float [ ] ) null ) ) . » is Equal To « ( 0 ) ; }
@Test { » expect Container With Array Value Attribute But Wrong Component Type « ( ( ) -> » find Merged Repeatable Annotations « ( » get Class « ( ) , » Invalid Repeatable « . class , » Container With Array Value Attribute But Wrong Component Type « . class ) ) ; }
@Test { String expression = " $ . » family Members « [ ? ( @ . name == 'Bart' ) ] " ; » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Expectations Helper « ( expression ) . » assert Value Is Empty « ( SIMPSONS ) ) . » with Message Containing « ( " Expected an empty value at JSON path \" " + expression + " \" but found : [ { \" name \" : \" Bart \" } ] " ) ; }
@Test { » Web Response « » web Response « = this . » response Builder « . build ( ) ; » assert That « ( » web Response « . » get Status Code « ( ) ) . » is Equal To « ( 200 ) ; » assert That « ( » web Response « . » get Status Message « ( ) ) . » is Equal To « ( " OK " ) ; }
@Test { this . session . » delegate Connection Established « ( ) ; this . session . » set Active « ( true ) ; this . session . » try Close With Sock Js Transport Error « ( new Exception ( ) , » Close Status « . » BAD _ DATA « ) ; » assert That « ( this . session . » get Close Status « ( ) ) . » is Equal To « ( » Close Status « . » BAD _ DATA « ) ; » assert Closed « ( ) ; }
@Test { » Class Path Xml Application Context « ac = » new Context « ( " » aspects Plus Advisor « . xml " ) ; » I Test Bean « » should Be Weaved « = ( » I Test Bean « ) ac . » get Bean « ( " adrian " ) ; » do Test Aspects And Advisor Are Applied « ( ac , » should Be Weaved « ) ; }
@Test { » assert That « ( » Aop Utils « . » is Cglib Proxy « ( this . » request Scoped Service « ) ) . as ( " request - scoped service must be a CGLIB proxy " ) . » is True « ( ) ; this . » mock Mvc « . perform ( get ( " / » request Scoped Service « " ) . » request Attr « ( » FROM _ MVC _ TEST _ MOCK « , » FROM _ MVC _ TEST _ MOCK « ) ) ; }
@Test { » assert Num Registered Listeners « ( » Meta Test Case « . class , 3 ) ; }
@Test { editor . » set As Text « ( EMPTY ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " Setting empty string did not result in empty value string " ) . » is Equal To « ( EMPTY ) ; }
@Test { » Mock Server Web Exchange « exchange = » post Exchange « ( " text / plain " ) ; » Consumes Request Condition « condition = new » Consumes Request Condition « ( " text / plain " , " application / xml " ) ; » Consumes Request Condition « result = condition . » get Matching Condition « ( exchange ) ; » assert Conditions « ( result , " text / plain " ) ; condition = new » Consumes Request Condition « ( " application / xml " ) ; result = condition . » get Matching Condition « ( exchange ) ; » assert That « ( result ) . » is Null « ( ) ; }
@Test { » Http Headers « » new Headers « = new » Http Headers « ( ) ; » new Headers « . set ( " foo " , " bar " ) ; Mono < » Server Response « > result = » Server Response « . ok ( ) . headers ( headers -> headers . » add All « ( » new Headers « ) ) . build ( ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> » new Headers « . equals ( response . headers ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » Mock Http Session « session = new » Mock Http Session « ( ) ; session . » set Attribute « ( KEY , VALUE ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » set Session « ( session ) ; » Servlet Request Attributes « attrs = new » Servlet Request Attributes « ( request ) ; attrs . » set Attribute « ( KEY , VALUE , » Request Attributes « . » SCOPE _ SESSION « ) ; » assert That « ( session . » get Attribute « ( KEY ) ) . » is Same As « ( VALUE ) ; }
@Test { Locale » expected Locale « = Locale . UK ; Locale locale = » String Utils « . » parse Locale String « ( » expected Locale « . » to String « ( ) ) ; » assert That « ( locale ) . as ( " When given a bona - fide Locale string , must not return null . " ) . » is Not Null « ( ) ; » assert That « ( locale ) . » is Equal To « ( » expected Locale « ) ; }
@Test { try ( » Class Path Xml Application Context « context = new » Class Path Xml Application Context « ( " org / springframework / beans / factory / aspectj / » bean Configurer Tests « . xml " ) ) { » Should Be Configured By Spring « » my Object « = new » Should Be Configured By Spring « ( ) ; » assert That « ( » my Object « . » get Name « ( ) ) . » is Equal To « ( " Rod " ) ; } }
@Test { » formatting Service « . » add Formatter For Field Type « ( Number . class , new » Number Style Formatter « ( ) ) ; String formatted = » formatting Service « . convert ( 3 , String . class ) ; » assert That « ( formatted ) . » is Equal To « ( " 3 " ) ; Integer i = » formatting Service « . convert ( " 3 " , Integer . class ) ; » assert That « ( i ) . » is Equal To « ( new Integer ( 3 ) ) ; }
@Test { lbf . » register Bean Definition « ( " test " , new » Root Bean Definition « ( » Eager Init Factory « . class ) ) ; lbf . » pre Instantiate Singletons « ( ) ; » Eager Init Factory « factory = ( » Eager Init Factory « ) lbf . » get Bean « ( " & test " ) ; » assert That « ( factory . initialized ) . » is True « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> this . filter . » set Redirect Status « ( null ) ) ; }
@Test { » Context Loader Test Utils « . » set Current Web Application Context « ( null ) ; » With Autowire « encoder = new » With Autowire « ( ) ; encoder . init ( null ) ; » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> encoder . encode ( » my Type « ) ) . » with Message Containing « ( " Unable to locate the Spring » Application Context « " ) ; }
@Test { » Annotation Config Application Context « context = new » Annotation Config Application Context « ( ) ; context . register ( » Scanning Configuration « . class ) ; context . refresh ( ) ; context . » get Bean « ( » Scanned Component « . class ) ; context . » get Bean « ( » Scanned Component « . State . class ) ; }
@Test { » Class Path Xml Application Context « ctx = new » Class Path Xml Application Context « ( » CONTEXT _ WILDCARD « ) ; ctx . » get Bean Factory « ( ) . » register Singleton « ( " » manual FBAAL « " , new » Factory Bean And Application Listener « ( ) ) ; » assert That « ( ctx . » get Beans Of Type « ( » Application Listener « . class ) . size ( ) ) . » is Equal To « ( 2 ) ; ctx . close ( ) ; }
@Test { » Enum Map « < Color , Integer > » enum Map « = new » Enum Map « < > ( Color . class ) ; » enum Map « . put ( Color . RED , 1 ) ; » enum Map « . put ( Color . BLUE , 2 ) ; Map < String , Integer > map = » create Approximate Map « ( » enum Map « , 3 ) ; » assert That Exception Of Type « ( » Class Cast Exception « . class ) . » is Thrown By « ( ( ) -> map . put ( " foo " , 1 ) ) ; }
@Test { » Assertion Error « error = new » Assertion Error « ( " argh " ) ; » test Exception « ( error , error . » to String « ( ) ) ; }
@Test { » do Test Eh Cache Factory Bean « ( false ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> Assert . » is Assignable « ( null , Integer . class , " enigma " ) ) . » with Message Containing « ( " Super type to check against must not be null " ) ; }
@Test { » do Test Rmi Proxy Factory Bean With Exception « ( » Unmarshal Exception « . class ) ; }
@Test { Integer difference = » invoke Method « ( component , " subtract " , 5 , 2 ) ; » assert That « ( difference . » int Value « ( ) ) . as ( " subtract ( 5 , 2 ) " ) . » is Equal To « ( 3 ) ; }
@Test { String » statement 1 « = " select '1' as \" Dogbert 's owner' s \" from dual " ; String » statement 2 « = " select ' 2 ' as \" Dilbert » ' s « \" from dual " ; char delim = ' ; ' ; String script = » statement 1 « + delim + » statement 2 « + delim ; List < String > statements = new » Array List « < > ( ) ; » split Sql Script « ( script , ' ; ' , statements ) ; » assert That « ( statements ) . » contains Exactly « ( » statement 1 « , » statement 2 « ) ; }
@Test { » parse Check « ( " 6.0221415E+23 " , " 6.0221415E23 " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Basic Authorization Interceptor « ( " username : " , " password " ) ) . » with Message Containing « ( " Username must not contain a colon " ) ; }
@Test { » assume True « ( » run Tests « ) ; » I Jmx Test Bean « » proxy 1 « = » get Proxy « ( ) ; int age = » proxy 1 « . » get Age « ( ) ; » assert That « ( age ) . as ( " The age should be 100 " ) . » is Equal To « ( 100 ) ; }
@Test { Destination destination = new Destination ( ) { } ; Message < String > message = » init Builder « ( ) . » set Header « ( " destination " , destination ) . build ( ) ; javax . jms . Message » jms Message « = new » Stub Text Message « ( ) ; mapper . » from Headers « ( message . » get Headers « ( ) , » jms Message « ) ; Object value = » jms Message « . » get Object Property « ( " destination " ) ; » assert That « ( value ) . » is Null « ( ) ; }
@Test { List < String > list = Collections . » singleton List « ( " 3 " ) ; Integer result = » conversion Service « . convert ( list , Integer . class ) ; » assert That « ( ( int ) result ) . » is Equal To « ( ( int ) Integer . » value Of « ( 3 ) ) ; }
@Test { URI url = new URI ( " https : » // localhost « : " + port + " / foo ? param = bar " ) ; » Request Entity « < Void > request = » Request Entity « . post ( url ) . build ( ) ; » Response Entity « < Void > response = this . » rest Template « . exchange ( request , Void . class ) ; » assert That « ( response . » get Status Code « ( ) ) . » is Equal To « ( » Http Status « . OK ) ; }
@Test { editor . » set As Text « ( " " ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " All whitespace was not recognized " ) . » is Equal To « ( EMPTY ) ; }
@Test { given ( » jdbc Template « . update ( " DELETE FROM person " ) ) . » will Return « ( 10 ) ; int deleted = » Jdbc Test Utils « . » delete From Table Where « ( » jdbc Template « , " person " , null ) ; » assert That « ( deleted ) . » is Equal To « ( 10 ) ; }
@Test { » assert Filter Invoked « ( " " , " " ) ; }
@Test { » Groovy Markup View « view = new » Groovy Markup View « ( ) ; given ( this . » web App Context « . » get Beans Of Type « ( » Groovy Markup Config « . class , true , false ) ) . » will Return « ( new » Hash Map « < > ( ) ) ; view . » set Url « ( " » sample View « " ) ; » assert That Exception Of Type « ( » Application Context Exception « . class ) . » is Thrown By « ( ( ) -> view . » set Application Context « ( this . » web App Context « ) ) . » with Message Containing « ( " » Groovy Markup Config « " ) ; }
@Test { » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> new » Annotation Config Application Context « ( A . class , » A Strich « . class ) ) . » with Message Containing « ( " Circular reference " ) ; }
@Test { » Metadata Reader Factory « » metadata Reader Factory « = new » Simple Metadata Reader Factory « ( ) ; » Metadata Reader « » metadata Reader « = » metadata Reader Factory « . » get Metadata Reader « ( » Composed Configuration With Attribute Overrides Class « . class . » get Name « ( ) ) ; » Annotation Metadata « metadata = » metadata Reader « . » get Annotation Metadata « ( ) ; » assert Meta Annotation Overrides « ( metadata ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Xpath Result Matchers « ( " / foo / bar [ 2 ] " , null ) . » boolean Value « ( false ) . match ( » get Stub Mvc Result « ( ) ) ) ; }
@Test { Future < ? > » deleted Future « = template . delete ( new URI ( » base Url « + " / delete " ) ) ; » deleted Future « . get ( ) ; }
@Test { » Proxy Factory « pf = new » Proxy Factory « ( ) ; pf . » set Target « ( new » Test Bean « ( ) ) ; pf . » add Interface « ( » I Test Bean « . class ) ; Object proxy = pf . » get Proxy « ( ) ; Class < ? > [ ] » user Interfaces « = » Aop Proxy Utils « . » proxied User Interfaces « ( proxy ) ; » assert That « ( » user Interfaces « . length ) . » is Equal To « ( 1 ) ; » assert That « ( » user Interfaces « [ 0 ] ) . » is Equal To « ( » I Test Bean « . class ) ; }
@Test { String expected = " " ; » request Builder « . » set Context Path « ( expected ) ; String » context Path « = » request Builder « . » build Request « ( » servlet Context « ) . » get Context Path « ( ) ; » assert That « ( » context Path « ) . » is Equal To « ( expected ) ; }
@Test { » Handler Method « » handler Method « = » handler Method « ( " » handle And Complete Session « " , » Session Status « . class ) ; » handler Adapter « . handle ( request , response , » handler Method « ) ; » assert That « ( request . » get Session « ( ) . » get Attribute Names « ( ) . » has More Elements « ( ) ) . » is False « ( ) ; }
@Test { this . session . » handle Message « ( new » Text Message « ( " " ) , this . » web Socket Session « ) ; » verify No More Interactions « ( this . » web Socket Handler « ) ; }
@Test { this . subscriber . » get Subscription « ( ) . request ( 2 ) ; this . subscriber . » set Cancel On Next « ( true ) ; this . publisher . » on Data Available « ( ) ; » assert That « ( this . publisher . » get Read Calls « ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( this . publisher . » get Discard Calls « ( ) ) . » is Equal To « ( 1 ) ; }
@Test { » Expression Parser « parser = new » Spel Expression Parser « ( ) ; » Standard Evaluation Context « » evaluation Context « = new » Standard Evaluation Context « ( new » Boolean Holder « ( ) ) ; Object value = parser . » parse Expression « ( " » primitive Property « " ) . » get Value « ( » evaluation Context « ) ; » assert That « ( value ) . » is Instance Of « ( Boolean . class ) ; }
@Test { this . » mock Mvc « . perform ( get ( " / handle " ) . accept ( » Media Type « . » TEXT _ PLAIN « ) ) . » and Expect « ( content ( ) . bytes ( " Hello world ! " . » get Bytes « ( " ISO - 8859 - 1 " ) ) ) ; this . » mock Mvc « . perform ( get ( " / » handle Utf 8 « " ) ) . » and Expect « ( content ( ) . bytes ( " » こんにちは世界 ！ « " . » get Bytes « ( " UTF - 8 " ) ) ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » add Inlined Properties To Environment « ( new » Mock Environment « ( ) , » as Array « ( " key = » \\ u ZZZZ « " ) ) ) . » with Message Containing « ( " Failed to load test environment property " ) ; }
@Test { int [ ] array = new int [ 0 ] ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < Object > [ [ empty ] ] " ) ; array = new int [ ] { 1 } ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < Integer > [ 1 ] " ) ; array = new int [ ] { 1 , 2 } ; » assert That « ( styler . style ( array ) ) . » is Equal To « ( " array < Integer > [ 1 , 2 ] " ) ; }
@Test { » Mock Http Servlet Request « » servlet Request « = new » Mock Http Servlet Request « ( " GET " , " / " ) ; » servlet Request « . » set Parameter « ( " foo " , " " ) ; » Default Server Request « request = new » Default Server Request « ( » servlet Request « , this . » message Converters « ) ; » assert That « ( request . param ( " foo " ) ) . » is Equal To « ( Optional . of ( " " ) ) ; }
@Test { evaluate ( " 3.5 " , 3.5d , Double . class ) ; }
@Test { class » Custom Environment « extends » Abstract Environment « { @ Override protected Set < String > » get Reserved Default Profiles « ( ) { return Collections . » empty Set « ( ) ; } } Environment env = new » Custom Environment « ( ) ; » assert That « ( env . » accepts Profiles « ( » default Profile « ( ) ) ) . » is False « ( ) ; }
@Test { » test Resolve Argument « ( new » Simple Bean « ( " foo " ) , » param Named Request Part « ) ; }
@Test { » Metadata Reader Factory « » metadata Reader Factory « = new » Simple Metadata Reader Factory « ( ) ; » Metadata Reader « » metadata Reader « = » metadata Reader Factory « . » get Metadata Reader « ( » Annotated Component Sub Class « . class . » get Name « ( ) ) ; » Annotation Metadata « metadata = » metadata Reader « . » get Annotation Metadata « ( ) ; » do Test Sub Class Annotation Info « ( metadata , true ) ; }
@Test { this . » servlet Response « . » set Header « ( » Http Headers « . » ACCESS _ CONTROL _ ALLOW _ ORIGIN « , " foobar : 123 " ) ; » handle Request « ( " GET " , " / echo / info " , » Http Status « . OK ) ; » assert That « ( this . » servlet Response « . » get Header « ( » Http Headers « . » ACCESS _ CONTROL _ ALLOW _ ORIGIN « ) ) . » is Equal To « ( " foobar : 123 " ) ; }
@Test { » Page Context « pc = » create Page Context « ( ) ; » Bind Tag « tag = new » Bind Tag « ( ) ; tag . » set Page Context « ( pc ) ; tag . » set Path « ( " tb " ) ; » assert That Exception Of Type « ( » Jsp Exception « . class ) . » is Thrown By « ( tag :: » do Start Tag « ) ; }
@Test { » Annotation Config Application Context « ctx = new » Annotation Config Application Context « ( ) ; ctx . register ( Config . class , » Proxy Target Class Caching Config « . class ) ; ctx . refresh ( ) ; » assert Cache Proxying « ( ctx ) ; » assert That « ( » Aop Utils « . » is Cglib Proxy « ( ctx . » get Bean « ( » Foo Repository « . class ) ) ) . » is True « ( ) ; }
@Test { » Resolvable Type « type = » http Entity Type « ( io . reactivex . Single . class , String . class ) ; » Http Entity « < io . reactivex . Single < String > > entity = » resolve Value With Empty Body « ( type ) ; » Step Verifier « . create ( entity . » get Body « ( ) . » to Flowable « ( ) ) . » expect Next Count « ( 0 ) . » expect Error « ( » Server Web Input Exception « . class ) . verify ( ) ; }
@Test { URI uri = new URI ( " wss : » // localhost / abc « " ) ; » Web Socket Session « session = this . » ws Client « . » do Handshake « ( this . » ws Handler « , this . headers , uri ) . get ( ) ; » assert That « ( session . » get Local Address « ( ) ) . » is Not Null « ( ) ; » assert That « ( session . » get Local Address « ( ) . » get Port « ( ) ) . » is Equal To « ( 443 ) ; }
@Test { » parse Check « ( " echo ( name ) " ) ; }
@Test { » Jms Message Endpoint Manager « endpoint = new » Jms Message Endpoint Manager « ( ) ; » Jms Activation Spec Config « config = new » Jms Activation Spec Config « ( ) ; config . » set Pub Sub Domain « ( false ) ; endpoint . » set Activation Spec Config « ( config ) ; » assert That « ( endpoint . » is Pub Sub Domain « ( ) ) . » is Equal To « ( false ) ; » assert That « ( endpoint . » is Reply Pub Sub Domain « ( ) ) . » is Equal To « ( false ) ; }
@Test { new » Json Path Expectations Helper « ( " $ . » empty String « " ) . » assert Value Is String « ( CONTENT ) ; }
@Test { » Model Map « map = new » Model Map « ( ) ; » UK Inner Class « inner = new » UK Inner Class « ( ) ; map . » add Attribute « ( inner ) ; » assert That « ( map . get ( " » UK Inner Class « " ) ) . » is Same As « ( inner ) ; }
@Test { evaluate ( " '5.00' matches '^-?\\d+(\\.\\d{2})?$' " , " true " , Boolean . class ) ; }
@Test { Set < ? > things = ( Set < ? > ) this . » bean Factory « . » get Bean « ( " set . of . things " ) ; » assert That « ( things ) . » is Not Null « ( ) ; » assert That « ( things . size ( ) ) . » is Equal To « ( 2 ) ; }
@Test { » autowired Config Class Bean Methods Respect Scoping « ( » Config That Does Import « . class ) ; }
@Test { » assume True « ( » run Tests « ) ; » I Jmx Test Bean « bean = » get Proxy « ( ) ; » assert That Exception Of Type « ( » Invalid Invocation Exception « . class ) . » is Thrown By « ( ( ) -> bean . » dont Expose Me « ( ) ) ; }
@Test { Assert . » no Null Elements « ( new String [ ] { } , " enigma " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Result Matchers « ( " $ . str " ) . » does Not Exist « ( ) . match ( » stub Mvc Result « ) ) ; }
@Test { evaluate ( " new java . util . » Hash Set « ( ) . » add All « ( { 'a' , 'b' , 'c' } ) " , " true " , Boolean . class ) ; }
@Test { » assert That Illegal State Exception « ( ) . » is Thrown By « ( ( ) -> » Serialization Utils « . deserialize ( FOO . » to Byte Array « ( ) ) ) ; }
@Test { » Exchange Strategies « strategies = » Exchange Strategies « . » with Defaults « ( ) ; » assert That « ( strategies . » message Readers « ( ) . » is Empty « ( ) ) . » is False « ( ) ; » assert That « ( strategies . » message Writers « ( ) . » is Empty « ( ) ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Bean Wiring Info « ( " " ) ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Request Matchers « ( " $ . str " ) . value ( " bogus " ) . match ( request ) ) ; }
@Test { » Application Context « context = » create Context « ( » Scoped Proxy Mode « . NO ) ; » Scoped Test Bean « bean = ( » Scoped Test Bean « ) context . » get Bean « ( " prototype " ) ; » assert That « ( bean ) . » is Not Null « ( ) ; » assert That « ( context . » is Prototype « ( " prototype " ) ) . » is True « ( ) ; » assert That « ( context . » is Singleton « ( " prototype " ) ) . » is False « ( ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » Mock Mvc Request Builders « . get ( " localhost : 8080 / path " ) ) . » with Message « ( " 'url' should start with a path or be a complete HTTP URL : localhost : 8080 / path " ) ; }
@Test { » assert That Exception Of Type « ( » Bean Is Abstract Exception « . class ) . » is Thrown By « ( ( ) -> rb . » resolve View Name « ( " debug . Parent " , Locale . ENGLISH ) ) ; » assert That Exception Of Type « ( » Bean Is Abstract Exception « . class ) . » is Thrown By « ( ( ) -> rb . » resolve View Name « ( " » test Parent « " , Locale . ENGLISH ) ) ; }
@Test { » assert Num Registered Listeners « ( » Meta With Overrides Test Case « . class , 3 ) ; }
@Test { » Data Buffer « buffer = » string Buffer « ( " { \" id \" : 1 , \" name \" : " ) ; Flux < » Data Buffer « > source = Flux . just ( buffer ) . » concat With « ( Flux . error ( new » Runtime Exception « ( ) ) ) ; Flux < » Token Buffer « > result = » Jackson 2 Tokenizer « . tokenize ( source , this . » json Factory « , this . » object Mapper « , true , false , - 1 ) ; » Step Verifier « . create ( result ) . » expect Error « ( » Runtime Exception « . class ) . verify ( ) ; }
@Test { Method rset = » Result Set « . class . » get Declared Method « ( " » get Boolean « " , int . class ) ; Method rowset = » Result Set Wrapping Sql Row Set « . class . » get Declared Method « ( " » get Boolean « " , String . class ) ; » do Test « ( rset , rowset , " test " , true ) ; }
@Test { Object array = new byte [ ] { 6 , 39 } ; int expected = » Object Utils « . » null Safe Hash Code « ( ( byte [ ] ) array ) ; » assert Equal Hash Codes « ( expected , array ) ; }
@Test { » Array List « < Entry < String , Integer > > list = » create Reverse Order Map Entry List « ( ) ; Comparator < Map . Entry < String , Integer > > comparator = » Converting Comparator « . » map Entry Keys « ( new » Comparable Comparator « < String > ( ) ) ; Collections . sort ( list , comparator ) ; » assert That « ( list . get ( 0 ) . » get Key « ( ) ) . » is Equal To « ( " a " ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / " ) . header ( " Accept " , " " ) ) ; » Headers Request Condition « condition = new » Headers Request Condition « ( " accept " ) ; » assert That « ( condition . » get Matching Condition « ( exchange ) ) . » is Not Null « ( ) ; }
@Test { Flux < Object > result = this . decoder . decode ( Flux . concat ( » string Buffer « ( " null " ) ) , » Resolvable Type « . » for Type « ( Pojo . class ) , » Media Type « . » APPLICATION _ JSON « , Collections . » empty Map « ( ) ) ; » Step Verifier « . create ( result ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » assert That Exception Of Type « ( » Spel Parse Exception « . class ) . » is Thrown By « ( ( ) -> new » Spel Expression Parser « ( ) . » parse Raw « ( " \" double quote : \\\" \\\" . \" " ) ) . satisfies ( ex -> { » assert That « ( ex . » get Position « ( ) ) . » is Equal To « ( 17 ) ; » assert That « ( ex . » get Message Code « ( ) ) . » is Equal To « ( » Spel Message « . » UNEXPECTED _ ESCAPE _ CHAR « ) ; } ) ; }
@Test { » assert Before Test Method « ( » Before Transaction Declared Locally Test Case « . class ) ; }
@Test { » do Test Dependencies « ( » DEP _ DEPENDSON _ CONTEXT « , 1 ) ; }
@Test { » test Bind Foo « ( " foo " , this . » test Method « . » annot Present « ( » Model Attribute « . class ) . arg ( Foo . class ) , value -> { » assert That « ( value . » get Class « ( ) ) . » is Equal To « ( Foo . class ) ; return ( Foo ) value ; } ) ; }
@Test { new » Json Path Result Matchers « ( " $ . » empty Array « " ) . exists ( ) . match ( » stub Mvc Result « ) ; }
@Test { » assert That « ( environment . » accepts Profiles « ( Profiles . of ( " » p 1 « & » p 2 « " ) ) ) . » is False « ( ) ; environment . » add Active Profile « ( " » p 1 « " ) ; » assert That « ( environment . » accepts Profiles « ( Profiles . of ( " » p 1 « & » p 2 « " ) ) ) . » is False « ( ) ; environment . » add Active Profile « ( " » p 2 « " ) ; » assert That « ( environment . » accepts Profiles « ( Profiles . of ( " » p 1 « & » p 2 « " ) ) ) . » is True « ( ) ; }
@Test { » Property Matches « matches = » Property Matches « . » for Property « ( " unknown " , » Sample Bean Properties « . class ) ; » assert That « ( matches . » get Possible Matches « ( ) ) . » is Empty « ( ) ; }
@Test { » check At Aspect J Aspect « ( » get Class « ( ) . » get Simple Name « ( ) + " - » at Aspect J « - after . xml " ) ; }
@Test { » assert That Thrown By « ( ( ) -> » Mock Rest Request Matchers « . header ( " foo " , " bar " ) . match ( this . request ) ) . » is Instance Of « ( » Assertion Error « . class ) . » has Message Containing « ( " but was null " ) ; }
@Test { Rendering rendering = Rendering . view ( " abc " ) . build ( ) ; » assert That « ( rendering . view ( ) ) . » is Equal To « ( " abc " ) ; » assert That « ( rendering . » model Attributes « ( ) ) . » is Equal To « ( Collections . » empty Map « ( ) ) ; » assert That « ( rendering . status ( ) ) . » is Null « ( ) ; » assert That « ( rendering . headers ( ) . size ( ) ) . » is Equal To « ( 0 ) ; }
@Test { new » Xpath Request Matchers « ( " / foo / bar " , null ) . node ( Matchers . » not Null Value « ( ) ) . match ( this . request ) ; }
@Test { » assert That « ( » get Tagged « ( » With Method « . class ) . » get Method Name « ( ) ) . » is Equal To « ( " test " ) ; }
@Test { » Merged Context Configuration « » merged Config 1 « = new » Merged Context Configuration « ( » get Class « ( ) , » EMPTY _ STRING _ ARRAY « , » EMPTY _ CLASS _ ARRAY « , » EMPTY _ STRING _ ARRAY « , loader ) ; » Merged Context Configuration « » merged Config 2 « = new » Merged Context Configuration « ( » get Class « ( ) , » EMPTY _ STRING _ ARRAY « , » EMPTY _ CLASS _ ARRAY « , » EMPTY _ STRING _ ARRAY « , loader ) ; » assert That « ( » merged Config 2 « ) . » is Equal To « ( » merged Config 1 « ) ; }
@Test { Method method = » Class Utils « . » get Method « ( » Test Controller « . class , " handle " ) ; » Handler Method « » handler Method « = new » Handler Method « ( new » Test Controller « ( ) , method ) ; » Request Mapping Info « rmi = new » Request Mapping Info « ( null , null , null , null , null , null , null , null ) ; » Handler Method Mapping Naming Strategy « < » Request Mapping Info « > strategy = new » Request Mapping Info Handler Method Mapping Naming Strategy « ( ) ; » assert That « ( strategy . » get Name « ( » handler Method « , rmi ) ) . » is Equal To « ( " TC # handle " ) ; }
@Test { » assert That Exception Of Type « ( » Assertion Error « . class ) . » is Thrown By « ( ( ) -> new » Json Path Request Matchers « ( " $ . » empty Array « " ) . » does Not Exist « ( ) . match ( request ) ) ; }
@Test { » Evaluation Context « context = » create Evaluation Context « ( null ) ; Object value = new » Spel Expression Parser « ( ) . » parse Expression « ( " # result " ) . » get Value « ( context ) ; » assert That « ( value ) . » is Null « ( ) ; }
@Test { » Spel Expression Parser « parser = new » Spel Expression Parser « ( ) ; Expression expression = parser . » parse Expression « ( " » list Not Generic « " ) ; » assert That « ( expression . » get Value Type Descriptor « ( this ) . » to String « ( ) ) . » is Equal To « ( " @ org . springframework . expression . spel . » Indexing Tests $ Field Annotation « java . util . List < ? > " ) ; }
@Test { » assert That « ( this . comparator . compare ( new » Stub Ordered « ( 982300 ) , new » Stub Ordered « ( 100 ) ) ) . » is Equal To « ( 1 ) ; }
@Test { » assert That « ( this . converter . » can Read « ( » My Bean « . class , new » Media Type « ( " application " , " json " ) ) ) . » is True « ( ) ; » assert That « ( this . converter . » can Read « ( Map . class , new » Media Type « ( " application " , " json " ) ) ) . » is True « ( ) ; }
@Test { » Binding Context « » binding Context « = new » Binding Context « ( ) ; Mono < Object > mono = this . resolver . » resolve Argument « ( this . » param Optional « , » binding Context « , this . exchange ) ; » Step Verifier « . create ( mono ) . » consume Next With « ( value -> { boolean condition = value instanceof Optional ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( ( ( Optional < ? > ) value ) . » is Present « ( ) ) . » is False « ( ) ; } ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » Application Context « ctx = new » Annotation Config Application Context « ( » Bean Definition Registry Post Processor Config « . class ) ; boolean condition = ctx . » get Bean « ( " » my Test Bean « " ) instanceof » Test Bean « ; » assert That « ( condition ) . » is True « ( ) ; }
@Test { Person sam = » person Service « . » find By Name « ( SAM ) ; » assert That « ( sam ) . as ( " Should be able to find Sam " ) . » is Not Null « ( ) ; » Drivers License « » drivers License « = sam . » get Drivers License « ( ) ; » assert That « ( » drivers License « ) . as ( " Sam 's driver' s license should not be null " ) . » is Not Null « ( ) ; » assert That « ( » drivers License « . » get Number « ( ) ) . as ( " Verifying Sam 's driver' s license number " ) . » is Equal To « ( Long . » value Of « ( 1234 ) ) ; }
@Test { » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( ) ; request . » add Preferred Locale « ( Locale . TAIWAN ) ; » Session Locale Resolver « resolver = new » Session Locale Resolver « ( ) ; resolver . » set Default Locale « ( Locale . GERMAN ) ; » assert That « ( resolver . » resolve Locale « ( request ) ) . » is Equal To « ( Locale . GERMAN ) ; }
@Test { » Property Descriptor « [ ] actual = Introspector . » get Bean Info « ( » Test Bean « . class ) . » get Property Descriptors « ( ) ; » Property Descriptor « [ ] descriptors = » Bean Utils « . » get Property Descriptors « ( » Test Bean « . class ) ; » assert That « ( descriptors ) . as ( " Descriptors should not be null " ) . » is Not Null « ( ) ; » assert That « ( descriptors . length ) . as ( " Invalid number of descriptors returned " ) . » is Equal To « ( actual . length ) ; }
@Test { » Text Message « message = new » Text Message « ( " payload " ) ; » will Throw « ( new » Illegal State Exception « ( " error " ) ) . given ( this . delegate ) . » handle Message « ( this . session , message ) ; this . decorator . » handle Message « ( this . session , message ) ; » assert That « ( this . session . » get Close Status « ( ) ) . » is Equal To « ( » Close Status « . » SERVER _ ERROR « ) ; }
@Test { this . handler . » set Strict Encoding « ( false ) ; Map < String , String > vars = new » Hash Map « < > ( 2 ) ; vars . put ( " » user Id « " , " john ; doe " ) ; String template = " https : » // www . example . com / user / « { » user Id « } » / dashboard « " ; URI actual = this . handler . expand ( template , vars ) ; » assert That « ( actual . » to String « ( ) ) . » is Equal To « ( " https : » // www . example . com / user / john « ; » doe / dashboard « " ) ; }
@Test { Method » interface Method « = » I Test Bean 2 « . class . » get Method « ( " » get Age « " ) ; » Annotation Transaction Attribute Source « atas = new » Annotation Transaction Attribute Source « ( ) ; » Transaction Attribute « actual = atas . » get Transaction Attribute « ( » interface Method « , » Test Bean 2 « . class ) ; » Rule Based Transaction Attribute « rbta = new » Rule Based Transaction Attribute « ( ) ; » assert That « ( ( ( » Rule Based Transaction Attribute « ) actual ) . » get Rollback Rules « ( ) ) . » is Equal To « ( rbta . » get Rollback Rules « ( ) ) ; }
@Test { for ( Locale locale : Locale . » get Available Locales « ( ) ) { Locale » parsed Locale « = » String Utils « . » parse Locale « ( locale . » to Language Tag « ( ) ) ; if ( » parsed Locale « == null ) { » assert That « ( locale . » get Language « ( ) ) . » is Equal To « ( " " ) ; } else { » assert That « ( locale . » to Language Tag « ( ) ) . » is Equal To « ( » parsed Locale « . » to Language Tag « ( ) ) ; } } }
@Test { » Web Connection « conn = this . builder . » context Path « ( " / abc " ) . » create Connection « ( this . client ) ; » assert That « ( » get Response « ( conn , " http : » // localhost / abc / def « " ) . » get Content As String « ( ) ) . » is Equal To « ( " / abc " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Custom Collection Editor « ( null ) ) ; }
@Test { » web Request « . » set Additional Header « ( " Accept - Language " , " en - gb ; q = 0.8 , da , en ; q = 0.7 " ) ; » Mock Http Servlet Request « » actual Request « = » request Builder « . » build Request « ( » servlet Context « ) ; » assert That « ( Collections . list ( » actual Request « . » get Locales « ( ) ) ) . » contains Exactly « ( new Locale ( " da " ) , new Locale ( " en " , " gb " ) , new Locale ( " en " , " " ) ) ; }
@Test { this . configurer . » ignore Accept Header « ( true ) ; » Content Negotiation Manager « manager = this . configurer . » build Content Negotiation Manager « ( ) ; this . » servlet Request « . » set Request URI « ( " / flower " ) ; this . » servlet Request « . » add Header « ( " Accept " , » Media Type « . » IMAGE _ GIF _ VALUE « ) ; » assert That « ( manager . » resolve Media Types « ( this . » web Request « ) ) . » is Equal To « ( » Content Negotiation Strategy « . » MEDIA _ TYPE _ ALL _ LIST « ) ; }
@Test { » assert That « ( sac . » get Message « ( " message . format . » example 2 « " , null , " This is a default msg if not found in » Message Source « . " , Locale . US ) . equals ( " This is a test message in the message catalog with no args . " ) ) . as ( " valid msg from » static Msg Source « with default msg passed in returned msg from msg catalog for Locale . US " ) . » is True « ( ) ; }
@Test { » evaluate And Check Error « ( " 'abc' between { 5 , 7 } " , » Spel Message « . » NOT _ COMPARABLE « , 6 ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> environment . » set Default Profiles « ( ( String [ ] ) null ) ) ; }
@Test { » Illegal State Exception « error = new » Illegal State Exception « ( " boo " ) ; Mono < Void > completion = Mono . < String > error ( error ) . as ( this :: » send Operator « ) ; Signal < Void > signal = completion . materialize ( ) . block ( ) ; » assert That « ( signal ) . » is Not Null « ( ) ; » assert That « ( signal . » get Throwable « ( ) ) . as ( " Unexpected signal : " + signal ) . » is Same As « ( error ) ; }
@Test { this . factory . » set Serialization Inclusion « ( Include . » NON _ EMPTY « ) ; this . factory . » after Properties Set « ( ) ; » assert That « ( this . factory . » get Object « ( ) . » get Serialization Config « ( ) . » get Serialization Inclusion « ( ) ) . » is Same As « ( Include . » NON _ EMPTY « ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Path Resource « ( ( Path ) null ) ) . » with Message Containing « ( " Path must not be null " ) ; }
@Test { » tx Manager « . clear ( ) ; » assert That « ( » tx Manager « . begun ) . » is Equal To « ( 0 ) ; » method Annotation Only « . echo ( null ) ; » assert That « ( » tx Manager « . commits ) . » is Equal To « ( 1 ) ; }
@Test { » assert That Exception Of Type « ( » Bean Creation Exception « . class ) . » is Thrown By « ( ( ) -> » bean Factory « . » get Bean « ( " custom - factory - method " ) ) . satisfies ( ex -> » assert That « ( ex . » get Most Specific Cause « ( ) ) . » is Instance Of « ( » Security Exception « . class ) ) ; }
@Test { » Method Invoker « » method Invoker « = new » Method Invoker « ( ) ; » method Invoker « . » set Target Object « ( new Greeter ( ) ) ; » method Invoker « . » set Target Method « ( " greet " ) ; » method Invoker « . » set Arguments « ( new Shopper ( ) ) ; » method Invoker « . prepare ( ) ; String greeting = ( String ) » method Invoker « . invoke ( ) ; » assert That « ( greeting ) . » is Equal To « ( " purchaser : may I help you ? " ) ; }
@Test { Map < String , Object > model = new » Hash Map « < > ( ) ; model . put ( " foo " , " Foo " ) ; String url = " org / springframework / web / reactive / result / view / script / kotlin / template . kts " ; » Mock Server Http Response « response = render ( url , model , Locale . ENGLISH , » Script Templating Configuration « . class ) ; » assert That « ( response . » get Body As String « ( ) . block ( ) ) . » is Equal To « ( " < html > < body > \n < p > Hello Foo < / p > \n < / body > < / html > " ) ; }
@Test { Rendering rendering = Rendering . view ( " foo " ) . header ( " foo " , " bar " ) . build ( ) ; » assert That « ( rendering . headers ( ) . size ( ) ) . » is Equal To « ( 1 ) ; » assert That « ( rendering . headers ( ) . get ( " foo " ) ) . » is Equal To « ( Collections . » singleton List « ( " bar " ) ) ; }
@Test { » Property Editor « editor = new » Resource Editor « ( ) ; editor . » set As Text « ( " classpath : org / springframework / core / io / » Resource Editor Tests « . class " ) ; Resource resource = ( Resource ) editor . » get Value « ( ) ; » assert That « ( resource ) . » is Not Null « ( ) ; » assert That « ( resource . exists ( ) ) . » is True « ( ) ; }
@Test { Class < ? > source = » With No Annotations « . class ; » assert That « ( scan ( source , » Search Strategy « . » INHERITED _ ANNOTATIONS « ) ) . » is Empty « ( ) ; }
@Test { » Candidate Components Index « index = » Candidate Components Index Loader « . » load Index « ( » Candidate Components Test Class Loader « . index ( » get Class « ( ) . » get Class Loader « ( ) , new » Class Path Resource « ( " spring . components " , » get Class « ( ) ) ) ) ; Set < String > components = index . » get Candidate Types « ( " org . springframework " , " none " ) ; » assert That « ( components ) . » is Empty « ( ) ; }
@Test { » assert That No Such Element Exception « ( ) . » is Thrown By « ( ( ) -> this . missing . » get Int « ( " value " ) ) ; }
@Test { » Mock Server Web Exchange « exchange = » Mock Server Web Exchange « . from ( get ( " / static / error . appcache " ) ) ; Resource expected = » get Resource « ( " error . appcache " ) ; Resource actual = this . transformer . transform ( exchange , expected , this . chain ) . block ( TIMEOUT ) ; » assert That « ( actual ) . » is Equal To « ( expected ) ; }
@Test { » Charset Editor « editor = new » Charset Editor « ( ) ; String name = " UTF - 8 " ; editor . » set As Text « ( name ) ; Charset charset = Charset . » for Name « ( name ) ; » assert That « ( editor . » get Value « ( ) ) . as ( " Invalid Charset conversion " ) . » is Equal To « ( charset ) ; editor . » set Value « ( charset ) ; » assert That « ( editor . » get As Text « ( ) ) . as ( " Invalid Charset conversion " ) . » is Equal To « ( name ) ; }
@Test { » Mock Http Servlet Response « response = » run Test « ( » Tiles Web Config « . class ) ; » assert That « ( response . » get Forwarded Url « ( ) ) . » is Equal To « ( " / WEB - INF / index . jsp " ) ; }
@Test { » assert That « ( this . resolver . » supports Parameter « ( this . » builder Param « ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » servlet Builder Param « ) ) . » is True « ( ) ; » assert That « ( this . resolver . » supports Parameter « ( this . » int Param « ) ) . » is False « ( ) ; }
@Test { » init Servlet With Controllers « ( » Article Controller « . class ) ; » Mock Http Servlet Request « request = new » Mock Http Servlet Request « ( " GET " , " / method " ) ; » Mock Http Servlet Response « response = new » Mock Http Servlet Response « ( ) ; » get Servlet « ( ) . service ( request , response ) ; }
@Test { » Annotation Config Web Application Context « ctx = new » Annotation Config Web Application Context « ( ) ; ctx . scan ( " does . not . matter " ) ; » Context Loader Listener « cll = new » Context Loader Listener « ( ctx ) ; cll . » context Initialized « ( new » Servlet Context Event « ( new » Mock Servlet Context « ( ) ) ) ; }
@Test { » Generic Web Application Context « ctx = new » Generic Web Application Context « ( ) ; » Context Loader Listener « cll = new » Context Loader Listener « ( ctx ) ; » Class Path Bean Definition Scanner « scanner = new » Class Path Bean Definition Scanner « ( ctx ) ; scanner . scan ( " bogus . pkg " ) ; cll . » context Initialized « ( new » Servlet Context Event « ( new » Mock Servlet Context « ( ) ) ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> new » Customizable Trace Interceptor « ( ) . » set Enter Message « ( » Customizable Trace Interceptor « . » PLACEHOLDER _ RETURN _ VALUE « ) ) ; }
@Test { String » key 1 « = " / foo " ; String » key 2 « = " / foo * " ; this . mapping . » register Mapping « ( » key 1 « , this . handler , this . » method 1 « ) ; this . mapping . » register Mapping « ( » key 2 « , this . handler , this . » method 2 « ) ; » assert That « ( this . mapping . » get Mapping Registry « ( ) . » get Mappings « ( ) ) . » contains Keys « ( » key 1 « , » key 2 « ) ; }
@Test { » assert That « ( » get Macro Output « ( " » FORM 11 « " ) ) . » contains Exactly « ( " < input type = \" text \" id = \" name \" name = \" name \" value = \" Darren \" > " ) ; }
@Test { » Root Bean Definition « bd = new » Root Bean Definition « ( » Test Bean « . class ) ; lbf . » register Bean Definition « ( " test " , bd ) ; » Dependencies Bean « » existing Bean « = new » Dependencies Bean « ( ) ; lbf . » autowire Bean Properties « ( » existing Bean « , » Autowire Capable Bean Factory « . » AUTOWIRE _ BY _ TYPE « , true ) ; » Test Bean « test = ( » Test Bean « ) lbf . » get Bean « ( " test " ) ; » assert That « ( test ) . » is Equal To « ( » existing Bean « . » get Spouse « ( ) ) ; }
@Test { » do Test Receive « ( true , false , false , true , false , false , 1000 ) ; }
@Test { » Groovy Markup View « view = » create View With Url « ( " » i 18 n « . tpl " ) ; » assert That « ( view . » check Resource « ( Locale . CHINESE ) ) . » is True « ( ) ; }
@Test { request . » set Context Path « ( " / petclinic " ) ; request . » set Request URI « ( " / petclinic / welcome . html " ) ; » assert That « ( helper . » get Path Within Application « ( request ) ) . as ( " Incorrect path returned " ) . » is Equal To « ( " / welcome . html " ) ; }
@Test { » evaluate And Check Error « ( " new char [ 7 ] { 'a' , 'c' , 'd' , 'e' } " , » Spel Message « . » INITIALIZER _ LENGTH _ INCORRECT « ) ; » evaluate And Check Error « ( " new char [ 3 ] { 'a' , 'c' , 'd' , 'e' } " , » Spel Message « . » INITIALIZER _ LENGTH _ INCORRECT « ) ; » evaluate And Check Error « ( " new char [ 2 ] { 'hello' , 'world' } " , » Spel Message « . » TYPE _ CONVERSION _ ERROR « ) ; » evaluate And Check Error « ( " new String ( 'a' , 'c' , 'd' ) " , » Spel Message « . » CONSTRUCTOR _ INVOCATION _ PROBLEM « ) ; }
@Test { this . request . » set URI « ( new URI ( " http : » // www . foo . example / a « ? » foo = bar « & » foo = baz « " ) ) ; » assert That Thrown By « ( ( ) -> » Mock Rest Request Matchers « . » query Param « ( " foo " , » contains String « ( " bx " ) ) . match ( this . request ) ) . » is Instance Of « ( » Assertion Error « . class ) . » has Message Containing « ( " was \" bar \" " ) ; }
@Test { » Messaging Message Listener Adapter « listener = » create Default Instance « ( Message . class ) ; Session session = mock ( Session . class ) ; » assert That Exception Of Type « ( » Listener Execution Failed Exception « . class ) . » is Thrown By « ( ( ) -> listener . » on Message « ( » create Simple Jms Text Message « ( " test " ) , session ) ) . » with Cause Instance Of « ( » Message Conversion Exception « . class ) ; }
@Test { » Byte Array Output Stream « out = spy ( new » Byte Array Output Stream « ( ) ) ; » Stream Utils « . copy ( bytes , out ) ; » assert That « ( out . » to Byte Array « ( ) ) . » is Equal To « ( bytes ) ; verify ( out , never ( ) ) . close ( ) ; }
@Test { » Uri Components « » uri Components « = » from Method Call « ( on ( » Booking Controller With Object « . class ) . » get Booking « ( 21L ) ) . » build And Expand « ( 42 ) ; » assert That « ( » uri Components « . encode ( ) . » to Uri « ( ) . » to String « ( ) ) . » is Equal To « ( " http : » // localhost / hotels / 42 / bookings / 21 « " ) ; }
@Test { Single < String > body = Single . just ( " foo " ) ; » Parameterized Type Reference « < String > » type Reference « = new » Parameterized Type Reference « < String > ( ) { } ; » Entity Response « < Single < String > > response = » Entity Response « . » from Producer « ( body , » type Reference « ) . build ( ) . block ( ) ; » assert That « ( response . entity ( ) ) . » is Same As « ( body ) ; }
@Test { » Resolvable Type « type = » Resolvable Type « . » for Method Return Type « ( Methods . class . » get Method « ( " » bounded Type Variable Wildcard Result « " ) ) ; » assert That « ( type . » get Generic « ( 1 ) . » as Collection « ( ) . » resolve Generic « ( ) ) . » is Equal To « ( » Char Sequence « . class ) ; }
@Test { String script = » read Script « ( " test - data - with - multi - line - nested - comments . sql " ) ; List < String > statements = new » Array List « < > ( ) ; » split Sql Script « ( script , ' ; ' , statements ) ; String » statement 1 « = " INSERT INTO users ( » first _ name « , » last _ name « ) VALUES ( 'Juergen' , 'Hoeller' ) " ; String » statement 2 « = " INSERT INTO users ( » first _ name « , » last _ name « ) VALUES ( 'Sam' , 'Brannen' ) " ; » assert That « ( statements ) . » contains Exactly « ( » statement 1 « , » statement 2 « ) ; }
@Test { Foo target = » get Target Object « ( » cglib Proxy « ( » cglib Proxy « ( foo ) ) ) ; » assert That « ( target ) . » is Not Same As « ( foo ) ; }
@Test { String [ ] array = { " Luke " , " Anakin " } ; » assert That « ( » Object Utils « . » null Safe To String « ( array ) ) . » is Equal To « ( " { Luke , Anakin } " ) ; }
@Test { Expression expression = new » Spel Expression Parser « ( ) . » parse Raw « ( " » ints .^ « [ # this < 5 ] " ) ; » Evaluation Context « context = new » Standard Evaluation Context « ( new » Array Test Bean « ( ) ) ; Object value = expression . » get Value « ( context ) ; boolean condition = value instanceof Integer ; » assert That « ( condition ) . » is True « ( ) ; » assert That « ( value ) . » is Equal To « ( 0 ) ; }
@Test { processor = new » Model Attribute Method Processor « ( true ) ; » assert That « ( this . processor . » supports Return Type « ( » return Param Named Model Attr « ) ) . » is True « ( ) ; » assert That « ( this . processor . » supports Return Type « ( » return Param Non Simple Type « ) ) . » is True « ( ) ; }
@Test { » load Async « ( » Exception Event Listener « . class ) ; » Another Test Event « event = new » Another Test Event « ( this , " fail " ) ; » Exception Event Listener « listener = this . context . » get Bean « ( » Exception Event Listener « . class ) ; this . » event Collector « . » assert No Event Received « ( listener ) ; this . context . » publish Event « ( event ) ; this . » count Down Latch « . await ( 2 , » Time Unit « . SECONDS ) ; this . » event Collector « . » assert Event « ( listener , event ) ; this . » event Collector « . » assert Total Events Count « ( 1 ) ; }
@Test { Comparator < Object > » custom Comparator « = this . comparator . » with Source Provider « ( new » Test Source Provider « ( 50L , new Object ( ) ) ) ; » assert That « ( » custom Comparator « . compare ( new Object ( ) , 5L ) ) . » is Equal To « ( 0 ) ; }
@Test { » assert Resolved Profiles « ( » Bare Annotations « . class , » EMPTY _ STRING _ ARRAY « ) ; }
@Test { Component component = » find Annotation « ( » Meta Meta Meta Annotated Class « . class , Component . class ) ; » assert That « ( component ) . as ( " Should find meta - annotation on meta - annotation on composed annotation on class " ) . » is Not Null « ( ) ; » assert That « ( component . value ( ) ) . » is Equal To « ( " » meta 2 « " ) ; }
@Test { » assert That Illegal Argument Exception « ( ) . » is Thrown By « ( ( ) -> » web App Context Setup « ( null ) ) . » with Message « ( " » Web Application Context « is required " ) ; }
@Test { Flux < » Data Buffer « > input = Flux . just ( this . » buffer Factory « . wrap ( this . » foo Bytes « ) , this . » buffer Factory « . wrap ( this . » bar Bytes « ) ) ; » test Decode All « ( input , » Data Buffer « . class , step -> step . » consume Next With « ( » expect Data Buffer « ( this . » foo Bytes « ) ) . » consume Next With « ( » expect Data Buffer « ( this . » bar Bytes « ) ) . » verify Complete « ( ) ) ; }
@Test { » Uri Components « » uri Components « = » Uri Components Builder « . » from Uri String « ( " https : // { host } / { path } # { fragment } " ) . build ( ) . expand ( " example . com " , " foo " , " bar " ) ; » assert That « ( » uri Components « . » to Uri String « ( ) ) . » is Equal To « ( " https : » // example . com / foo « # bar " ) ; }
@Test { Message < String > message = » Message Builder « . » with Payload « ( " ABC " ) . build ( ) ; » assert That « ( this . converter . » from Message « ( message , String . class ) ) . » is Equal To « ( " success - from " ) ; » assert That « ( this . converter . » from Message « ( message , Integer . class ) ) . » is Null « ( ) ; }
@Test { » Locale Context Holder « . » set Locale « ( Locale . US ) ; » assert That IO Exception « ( ) . » is Thrown By « ( ( ) -> this . configurer . » resolve Template « ( » get Class « ( ) . » get Class Loader « ( ) , » TEMPLATE _ PREFIX « + " missing . tpl " ) ) ; }
@Test { » Multi Value Map « < String , Object > map = stream ( ) . collect ( » Merged Annotation Collectors « . » to Multi Value Map « ( result -> { result . add ( " finished " , true ) ; return result ; } ) ) ; » assert That « ( map . get ( " value " ) ) . » contains Exactly « ( " a " , " b " , " c " ) ; » assert That « ( map . get ( " extra " ) ) . » contains Exactly « ( void . class , String . class , Integer . class ) ; » assert That « ( map . get ( " finished " ) ) . » contains Exactly « ( true ) ; }
@Test { tag . » set Body Content « ( new » Mock Body Content « ( " » value 2 « " , new » Mock Http Servlet Response « ( ) ) ) ; int action = tag . » do End Tag « ( ) ; » assert That « ( action ) . » is Equal To « ( Tag . » EVAL _ PAGE « ) ; » assert That « ( parent . » get Argument « ( ) ) . » is Equal To « ( " » value 2 « " ) ; }
@Test { » try Set Default Heartbeat « ( new long [ ] { - 1 , 0 } ) ; » try Set Default Heartbeat « ( new long [ ] { 0 , - 1 } ) ; }
@Test { Mono < » Server Response « > result = » Server Response « . ok ( ) . » e Tag « ( " foo " ) . build ( ) ; » Step Verifier « . create ( result ) . » expect Next Matches « ( response -> " \" foo \" " . equals ( response . headers ( ) . » get E Tag « ( ) ) ) . » expect Complete « ( ) . verify ( ) ; }
@Test { » assert That « ( » bean Factory « . » get Type « ( " spring - factory " ) ) . » is Null « ( ) ; » assert That « ( System . » get Property « ( " factory . object . type " ) ) . » is Null « ( ) ; }
@Test { » Custom Number Editor « editor = new » Custom Number Editor « ( Short . class , true ) ; » assert That Exception Of Type « ( » Number Format Exception « . class ) . as ( " greater than Short . » MAX _ VALUE « + 1 " ) . » is Thrown By « ( ( ) -> editor . » set As Text « ( String . » value Of « ( Short . » MAX _ VALUE « + 1 ) ) ) ; }
